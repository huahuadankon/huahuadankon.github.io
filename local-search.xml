<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2024/10/23/Redis/Redis/"/>
    <url>/2024/10/23/Redis/Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis快速入门"><a href="#Redis快速入门" class="headerlink" title="Redis快速入门"></a>Redis快速入门</h1><p>Redis的常见命令和客户端使用</p><h1 id="1-初识Redis"><a href="#1-初识Redis" class="headerlink" title="1.初识Redis"></a>1.初识Redis</h1><p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p><ul><li><p>键值型</p></li><li><p>NoSql</p></li></ul><p>其中<strong>键值型</strong>，是指Redis中存储的数据都是以key、value对的形式存储，而value的形式多种多样，可以是字符串、数值、甚至json：</p><p><img src="/../../assets/Redis/6U1Rhxo.png" alt="image-20220502190959608"></p><p>而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p><h2 id="1-1-认识NoSQL"><a href="#1-1-认识NoSQL" class="headerlink" title="1.1.认识NoSQL"></a>1.1.认识NoSQL</h2><p><strong>NoSql</strong>可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为<strong>非关系型数据库</strong>。</p><h3 id="1-1-1-结构化与非结构化"><a href="#1-1-1-结构化与非结构化" class="headerlink" title="1.1.1.结构化与非结构化"></a>1.1.1.结构化与非结构化</h3><p>传统关系型数据库是结构化数据，每一张表都有严格的约束信息：字段名、字段数据类型、字段约束等等信息，插入的数据必须遵守这些约束：</p><p><img src="/../../assets/Redis/4tUgFo6.png"></p><p>而NoSql则对数据库格式没有严格约束，往往形式松散，自由。</p><p>可以是键值型：</p><p><img src="/../../assets/Redis/GdqOSsj.png"></p><p>也可以是文档型：</p><p><img src="/../../assets/Redis/zBBQfcc.png"></p><p>甚至可以是图格式：</p><p><img src="/../../assets/Redis/zBnKxWf.png"></p><h3 id="1-1-2-关联和非关联"><a href="#1-1-2-关联和非关联" class="headerlink" title="1.1.2.关联和非关联"></a>1.1.2.关联和非关联</h3><p>传统数据库的表与表之间往往存在关联，例如外键：</p><p><img src="/../../assets/Redis/tXYSl5x.png"></p><p>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  name<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  orders<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>       id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>       item<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> id<span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><span class="hljs-punctuation">,</span> title<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;荣耀6&quot;</span><span class="hljs-punctuation">,</span> price<span class="hljs-punctuation">:</span> <span class="hljs-number">4999</span><br>       <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>       id<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>       item<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> id<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> title<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小米11&quot;</span><span class="hljs-punctuation">,</span> price<span class="hljs-punctuation">:</span> <span class="hljs-number">3999</span><br>       <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此处要维护“张三”的订单与商品“荣耀”和“小米11”的关系，不得不冗余的将这两个商品保存在张三的订单文档中，不够优雅。还是建议用业务来维护关联关系。</p><h3 id="1-1-3-查询方式"><a href="#1-1-3-查询方式" class="headerlink" title="1.1.3.查询方式"></a>1.1.3.查询方式</h3><p>传统关系型数据库会基于Sql语句做查询，语法有统一标准；</p><p>而不同的非关系数据库查询语法差异极大，五花八门各种各样。</p><p><img src="/../../assets/Redis/AzaHOTF.png"></p><h3 id="1-1-4-事务"><a href="#1-1-4-事务" class="headerlink" title="1.1.4.事务"></a>1.1.4.事务</h3><p>传统关系型数据库能满足事务ACID的原则。</p><p><img src="/../../assets/Redis/J1MqOJM.png"></p><p>而非关系型数据库往往不支持事务，或者不能严格保证ACID的特性，只能实现基本的一致性。</p><h3 id="1-1-5-总结"><a href="#1-1-5-总结" class="headerlink" title="1.1.5.总结"></a>1.1.5.总结</h3><p>除了上述四点以外，在存储方式、扩展性、查询性能上关系型与非关系型也都有着显著差异，总结如下：</p><p><img src="/../../assets/Redis/kZP40dQ.png"></p><ul><li>存储方式<ul><li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li><li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li></ul></li></ul><ul><li>扩展性<ul><li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li><li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li><li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li></ul></li></ul><h2 id="1-2-认识Redis"><a href="#1-2-认识Redis" class="headerlink" title="1.2.认识Redis"></a>1.2.认识Redis</h2><p>Redis诞生于2009年全称是<strong>Re</strong>mote  <strong>D</strong>ictionary <strong>S</strong>erver 远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p><p><strong>特征</strong>：</p><ul><li>键值（key-value）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><p><strong>作者</strong>：Antirez</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h2 id="1-3-安装Redis"><a href="#1-3-安装Redis" class="headerlink" title="1.3.安装Redis"></a>1.3.安装Redis</h2><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><h3 id="1-3-1-依赖库"><a href="#1-3-1-依赖库" class="headerlink" title="1.3.1.依赖库"></a>1.3.1.依赖库</h3><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h3 id="1-3-2-上传安装包并解压"><a href="#1-3-2-上传安装包并解压" class="headerlink" title="1.3.2.上传安装包并解压"></a>1.3.2.上传安装包并解压</h3><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/../../assets/Redis/SyjanS5.png"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="/../../assets/Redis/01DTNCf.png"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xzf redis-6.2.6.tar.gz<br></code></pre></td></tr></table></figure><p>解压后：</p><p><img src="/../../assets/Redis/8V6zvCD.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-6.2.6<br></code></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="https://i.imgur.com/YSxkGm7.png"></p><p>该目录已经默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h3 id="1-3-3-启动"><a href="#1-3-3-启动" class="headerlink" title="1.3.3.启动"></a>1.3.3.启动</h3><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-4-默认启动"><a href="#1-3-4-默认启动" class="headerlink" title="1.3.4.默认启动"></a>1.3.4.默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/../../assets/Redis/v7xWsqC.png"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-5-指定配置启动"><a href="#1-3-5-指定配置启动" class="headerlink" title="1.3.5.指定配置启动"></a>1.3.5.指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/../../assets/Redis/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cp</span> redis.<span class="hljs-keyword">conf</span> redis.<span class="hljs-keyword">conf</span>.bck<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis安装目录 </span><br><span class="hljs-built_in">cd</span> /usr/local/src/redis-6.2.6<br><span class="hljs-comment"># 启动</span><br>redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br></code></pre></td></tr></table></figure><h3 id="1-3-6-开机自启"><a href="#1-3-6-开机自启" class="headerlink" title="1.3.6.开机自启"></a>1.3.6.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start redis<br><span class="hljs-comment"># 停止</span><br>systemctl stop redis<br><span class="hljs-comment"># 重启</span><br>systemctl restart redis<br><span class="hljs-comment"># 查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><h2 id="1-4-Redis桌面客户端"><a href="#1-4-Redis桌面客户端" class="headerlink" title="1.4.Redis桌面客户端"></a>1.4.Redis桌面客户端</h2><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h3 id="1-4-1-Redis命令行客户端"><a href="#1-4-1-Redis命令行客户端" class="headerlink" title="1.4.1.Redis命令行客户端"></a>1.4.1.Redis命令行客户端</h3><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/../../assets/Redis/OYYWPNo.png"></p><h3 id="1-4-2-图形化桌面客户端"><a href="#1-4-2-图形化桌面客户端" class="headerlink" title="1.4.2.图形化桌面客户端"></a>1.4.2.图形化桌面客户端</h3><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><h3 id="1-4-3-安装"><a href="#1-4-3-安装" class="headerlink" title="1.4.3.安装"></a>1.4.3.安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="/../../assets/Redis/BZ4Agbi.png"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="/../../assets/Redis/hguGHbX.png"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/../../assets/Redis/hwK5LQ8.png"></p><p>双击即可运行：</p><p><img src="/../../assets/Redis/6hUqslY.png"></p><h3 id="1-4-4-建立连接"><a href="#1-4-4-建立连接" class="headerlink" title="1.4.4.建立连接"></a>1.4.4.建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/../../assets/Redis/9qTGyoN.png"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/../../assets/Redis/DshNnKC.png"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/../../assets/Redis/A2cOm7Q.png"></p><p>点击即可建立连接了。</p><p><img src="/../../assets/Redis/ja8Fd9s.png"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br><span class="hljs-keyword">select</span> 0<br></code></pre></td></tr></table></figure><h1 id="2-Redis常见命令"><a href="#2-Redis常见命令" class="headerlink" title="2.Redis常见命令"></a>2.Redis常见命令</h1><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型：</p><p><img src="/../../assets/Redis/8tli2o9.png"></p><p>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands </a>）可以查看到不同的命令：</p><p><img src="/../../assets/Redis/5Lcr3BE.png"></p><p>不同类型的命令称为一个group，我们也可以通过help命令来查看各种不同group的命令：</p><p><img src="/../../assets/Redis/suevOIR.png"></p><p>接下来，我们就学习常见的五种基本数据类型的相关命令。</p><h2 id="2-1-Redis通用命令"><a href="#2-1-Redis通用命令" class="headerlink" title="2.1.Redis通用命令"></a>2.1.Redis通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li>KEYS：查看符合模板的所有key</li><li>DEL：删除一个指定的key</li><li>EXISTS：判断key是否存在</li><li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</li><li>TTL：查看一个KEY的剩余有效期</li></ul><p>通过help [command] 可以查看一个命令的具体用法，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看keys命令的帮助信息：</span><br>127.0.0.1:6379&gt; <span class="hljs-built_in">help</span> keys<br><br>KEYS pattern<br>summary: Find all keys matching the given pattern<br>since: 1.0.0<br>group: generic<br></code></pre></td></tr></table></figure><h2 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2.String类型"></a>2.2.String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li><li>int：整数类型，可以做自增、自减操作</li><li>float：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><p><img src="/../../assets/Redis/VZqpv73.png"></p><h3 id="2-2-1-String的常见命令"><a href="#2-2-1-String的常见命令" class="headerlink" title="2.2.1.String的常见命令"></a>2.2.1.String的常见命令</h3><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li></ul><h3 id="2-2-2-Key结构"><a href="#2-2-2-Key结构" class="headerlink" title="2.2.2.Key结构"></a>2.2.2.Key结构</h3><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p><p>例如，需要存储用户、商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p><p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p><p>Redis的key允许有多个单词形成层级结构，多个单词之间用’:’隔开，格式如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">项目名:业务名:类型:<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了key的冲突问题。</p><p>例如我们的项目名称叫 heima，有user和product两种不同类型的数据，我们可以这样定义key：</p><ul><li><p>user相关的key：<strong>heima:user:1</strong></p></li><li><p>product相关的key：<strong>heima:product:1</strong></p></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p><table><thead><tr><th><strong>KEY</strong></th><th><strong>VALUE</strong></th></tr></thead><tbody><tr><td>heima:user:1</td><td>{“id”:1,  “name”: “Jack”, “age”: 21}</td></tr><tr><td>heima:product:1</td><td>{“id”:1,  “name”: “小米11”, “price”: 4999}</td></tr></tbody></table><p>并且，在Redis的桌面客户端中，还会以相同前缀作为层级结构，让数据看起来层次分明，关系清晰：</p><p><img src="/../../assets/Redis/InWMfeD.png"></p><h2 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3.Hash类型"></a>2.3.Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p><img src="/../../assets/Redis/x2zDBjf.png"></p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><img src="/../../assets/Redis/VF2EPt0.png"></p><p>Hash的常见命令有：</p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><h2 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4.List类型"></a>2.4.List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p>List的常见命令有：</p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><h2 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5.Set类型"></a>2.5.Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li><p>无序</p></li><li><p>元素不可重复</p></li><li><p>查找快</p></li><li><p>支持交集、并集、差集等功能</p></li></ul><p>Set的常见命令有：</p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li></ul><p>例如两个集合：s1和s2:</p><p><img src="/../../assets/Redis/ha8x86R.png"></p><p>求交集：SINTER s1 s2</p><p>求s1与s2的不同：SDIFF s1 s2</p><p><img src="/../../assets/Redis/L9vTv2X.png"></p><p>练习：</p><ol><li>将下列数据用Redis的Set集合来存储：</li></ol><ul><li>张三的好友有：李四、王五、赵六</li><li>李四的好友有：王五、麻子、二狗</li></ul><ol start="2"><li>利用Set的命令实现下列功能：</li></ol><ul><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><h2 id="2-6-SortedSet类型"><a href="#2-6-SortedSet类型" class="headerlink" title="2.6.SortedSet类型"></a>2.6.SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF、ZINTER、ZUNION：求差集、交集、并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><p><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</p></li><li><p><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</p></li></ul><p>练习题：</p><p>将班级的下列学生得分存入Redis的SortedSet中：</p><p>Jack 85, Lucy 89, Rose 82, Tom 95, Jerry 78, Amy 92, Miles 76</p><p>并实现下列功能：</p><ul><li>删除Tom同学</li><li>获取Amy同学的分数</li><li>获取Rose同学的排名</li><li>查询80分以下有几个学生</li><li>给Amy同学加2分</li><li>查出成绩前3名的同学</li><li>查出成绩80分以下的所有同学</li></ul><h1 id="3-Redis的Java客户端"><a href="#3-Redis的Java客户端" class="headerlink" title="3.Redis的Java客户端"></a>3.Redis的Java客户端</h1><p>在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a></p><p><img src="/../../assets/Redis/9f68ivq.png"></p><p>其中Java客户端也包含很多：</p><p><img src="/../../assets/Redis/image-20220609102817435-165735883948534.png" alt="image-20220609102817435"></p><p>标记为*的就是推荐使用的java客户端，包括：</p><ul><li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li><li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map、Queue等，而且支持跨进程的同步机制：Lock、Semaphore等待，比较适合用来实现特殊的功能需求。</li></ul><h2 id="3-1-Jedis客户端"><a href="#3-1-Jedis客户端" class="headerlink" title="3.1.Jedis客户端"></a>3.1.Jedis客户端</h2><p>Jedis的官网地址： <a href="https://github.com/redis/jedis">https://github.com/redis/jedis</a></p><h3 id="3-1-1-快速入门"><a href="#3-1-1-快速入门" class="headerlink" title="3.1.1.快速入门"></a>3.1.1.快速入门</h3><p>我们先来个快速入门：</p><p>1）引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2）建立连接</p><p>新建一个单元测试类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Jedis jedis;<br><br><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.建立连接</span><br>    <span class="hljs-comment">// jedis = new Jedis(&quot;192.168.150.101&quot;, 6379);</span><br>    jedis = JedisConnectionFactory.getJedis();<br>    <span class="hljs-comment">// 2.设置密码</span><br>    jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>    <span class="hljs-comment">// 3.选择库</span><br>    jedis.select(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>3）测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 存入数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 插入hash数据</span><br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>    jedis.hset(<span class="hljs-string">&quot;user:1&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br><br>    <span class="hljs-comment">// 获取</span><br>    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="hljs-string">&quot;user:1&quot;</span>);<br>    System.out.println(map);<br>&#125;<br></code></pre></td></tr></table></figure><p>4）释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (jedis != <span class="hljs-literal">null</span>) &#123;<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2-连接池"><a href="#3-1-2-连接池" class="headerlink" title="3.1.2.连接池"></a>3.1.2.连接池</h3><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heima.jedis.util;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        poolConfig.setMaxWaitMillis(<span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.150.101&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-SpringDataRedis客户端"><a href="#3-2-SpringDataRedis客户端" class="headerlink" title="3.2.SpringDataRedis客户端"></a>3.2.SpringDataRedis客户端</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="/../../assets/Redis/UFlNIV0.png"></p><h3 id="3-2-1-快速入门"><a href="#3-2-1-快速入门" class="headerlink" title="3.2.1.快速入门"></a>3.2.1.快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单。</p><p>首先，新建一个maven项目，然后按照下面步骤执行：</p><h4 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.heima<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>redis-demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--redis依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--common-pool--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Jackson依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2）配置Redis"><a href="#2）配置Redis" class="headerlink" title="2）配置Redis"></a>2）配置Redis</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">100ms</span><br></code></pre></td></tr></table></figure><h4 id="3）注入RedisTemplate"><a href="#3）注入RedisTemplate" class="headerlink" title="3）注入RedisTemplate"></a>3）注入RedisTemplate</h4><p>因为有了SpringBoot的自动装配，我们可以拿来就用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4）编写测试"><a href="#4）编写测试" class="headerlink" title="4）编写测试"></a>4）编写测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisStringTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate edisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 写入一条String数据</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;虎哥&quot;</span>);<br>        <span class="hljs-comment">// 获取string数据</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-自定义序列化"><a href="#3-2-2-自定义序列化" class="headerlink" title="3.2.2.自定义序列化"></a>3.2.2.自定义序列化</h3><p>RedisTemplate可以接收任意Object作为值写入Redis：</p><p><img src="/../../assets/Redis/OEMcbuu.png"></p><p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="/../../assets/Redis/5FjtWk5.png"></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory connectionFactory)</span>&#123;<br>        <span class="hljs-comment">// 创建RedisTemplate对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(connectionFactory);<br>        <span class="hljs-comment">// 创建JSON序列化工具</span><br>        <span class="hljs-type">GenericJackson2JsonRedisSerializer</span> <span class="hljs-variable">jsonRedisSerializer</span> <span class="hljs-operator">=</span> <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>();<br>        <span class="hljs-comment">// 设置Key的序列化</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.string());<br>        <span class="hljs-comment">// 设置Value的序列化</span><br>        template.setValueSerializer(jsonRedisSerializer);<br>        template.setHashValueSerializer(jsonRedisSerializer);<br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：</p><p><img src="/../../assets/Redis/XOAq3cN.png"></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><h3 id="3-2-3-StringRedisTemplate"><a href="#3-2-3-StringRedisTemplate" class="headerlink" title="3.2.3.StringRedisTemplate"></a>3.2.3.StringRedisTemplate</h3><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><p><img src="/../../assets/Redis/Ip9TKSY.png"></p><p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了。</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><p><img src="/../../assets/Redis/zXH6Qn6.png"></p><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><span class="hljs-comment">// JSON序列化工具</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testSaveUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;虎哥&quot;</span>, <span class="hljs-number">21</span>);<br>    <span class="hljs-comment">// 手动序列化</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(user);<br>    <span class="hljs-comment">// 写入数据</span><br>    stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:200&quot;</span>, json);<br><br>    <span class="hljs-comment">// 获取数据</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonUser</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:200&quot;</span>);<br>    <span class="hljs-comment">// 手动反序列化</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> mapper.readValue(jsonUser, User.class);<br>    System.out.println(<span class="hljs-string">&quot;user1 = &quot;</span> + user1);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发基础(一)</title>
    <link href="/2024/10/22/JavaWeb(SpringBoot+Vue)/HTML-CSS/"/>
    <url>/2024/10/22/JavaWeb(SpringBoot+Vue)/HTML-CSS/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前端开发介绍"><a href="#1-前端开发介绍" class="headerlink" title="1. 前端开发介绍"></a>1. 前端开发介绍</h1><p>我们介绍Web网站工作流程的时候提到，前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309163858689-1729574785840-140.png" alt="image-20230309163858689">  </p><p>那在讲解web前端开发之前，我们先需要对web前端开发有一个整体的认知。主要明确一下三个问题：</p><p>1). 网页有哪些部分组成 ?</p><p>文字、图片、音频、视频、超链接、表格等等。</p><p>2). 我们看到的网页，背后的本质是什么 ?</p><p>程序员写的前端代码 (备注：在前后端分离的开发模式中，)</p><p>3). 前端的代码是如何转换成用户眼中的网页的 ?</p><p>通过浏览器转化（解析和渲染）成用户看到的网页</p><p>浏览器中对代码进行解析和渲染的部分，称为 <strong>浏览器内核</strong></p><p>而市面上的浏览器非常多，比如：IE、火狐Firefox、苹果safari、欧朋、谷歌Chrome、QQ浏览器、360浏览器等等。 而且我们电脑上安装的浏览器可能都不止一个，有很多。 </p><p>但是呢，需要大家注意的是，不同的浏览器，内核不同，对于相同的前端代码解析的效果也会存在差异。 那这就会造成一个问题，同一段前端程序，不同浏览器展示出来的效果是不一样的，这个用户体验就很差了。而我们想达到的效果则是，即使用户使用的是不同的浏览器，解析同一段前端代码，最终展示出来的效果都是相同的。</p><p>要想达成这样一个目标，我们就需要定义一个统一的标准，然后让各大浏览器厂商都参照这个标准来实现即可。 而这套标准呢，其实早都已经定义好了，那就是我们接下来，要介绍的web标准。</p><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）。</p></li></ul><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309170412197-1729574785840-142.png" alt="image-20230309170412197" style="zoom:67%;" /> <p>当然了，随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p><p>那这些内容呢，也是我们前端三天课程中要讲解的内容。 前端的3天课程安排如下：</p><ul><li>HTML &amp; CSS</li><li>JavaScript &amp; Vue</li><li>Ajax &amp; Axios &amp; ElementUI &amp; Nginx</li></ul><h1 id="2-HTML-CSS"><a href="#2-HTML-CSS" class="headerlink" title="2. HTML &amp; CSS"></a>2. HTML &amp; CSS</h1><p>1). 什么是HTML ?</p><blockquote><p>**HTML: **HyperText Markup Language，超文本标记语言。</p><ul><li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p></li><li><p>标记语言：由标签构成的语言</p><ul><li>HTML标签都是预定义好的。例如：使用 &LT;h1&gt; 标签展示标题，使用&LT;a&gt;展示超链接，使用&LT;img&gt;展示图片，&LT;video&gt;展示视频。</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</li></ul></li></ul></blockquote><p>下面展示的是一段html代码经过浏览器解析，呈现的效果如右图所示：</p><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309172534138-1729574785840-141.png" alt="image-20230309172534138" style="zoom:80%;" />   <p>​</p><p>2). 什么是CSS ?</p><blockquote><p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p></blockquote><p>下面展示的是一段 html代码 及 CSS样式 经过浏览器解析，呈现的效果如右图所示：</p><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309172634388-1729574785840-144.png" alt="image-20230309172634388" style="zoom: 80%;" /> <p>​</p><h2 id="2-1-HTML快速入门"><a href="#2-1-HTML快速入门" class="headerlink" title="2.1 HTML快速入门"></a>2.1 HTML快速入门</h2><h3 id="2-1-1-操作"><a href="#2-1-1-操作" class="headerlink" title="2.1.1 操作"></a>2.1.1 操作</h3><p>第一步:创建一个名为HTML的文件夹，然后找到课程资料中的 1.jpg 文件放到该目录下，此时HTML文件夹中内容如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668011569718-1729574785840-143.png" alt="1668011569718"> </p><p>第二步：创建一个文本文件，然后修改文件名为hello.html,注意文件的后缀是.html,如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668012052140-1729574785840-145.png" alt="1668012052140"> </p><p>第三步：选中文件，鼠标右击，选择使用记事本打开文件，并且编写前端代码</p><p>首先html有固定的基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML 快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello HTML<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.jpg&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中&lt;html&gt;是根标签，&lt;head&gt;和&lt;body&gt;是子标签，&lt;head&gt;中的字标签&lt;title&gt;是用来定义网页的标题的，里面定义的内容会显示在浏览器网页的标题位置。</p><p>而 &lt;body&gt; 中编写的内容，就网页中显示的核心内容。</p><p>第四步：然后选中文件，鼠标右击，选择使用浏览器打开文件，浏览器呈现效果如下:</p><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309173355794-1729574785840-146.png" alt="image-20230309173355794" style="zoom:67%;" />  <h3 id="2-1-2-总结"><a href="#2-1-2-总结" class="headerlink" title="2.1.2 总结"></a>2.1.2 总结</h3><p>1). HTML页面的基础结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>&lt;title&gt;中定义标题显示在浏览器的标题位置，&lt;body&gt;中定义的内容会呈现在浏览器的内容区域</p><p>2). HTML中的标签特点</p><ul><li>HTML标签不区分大小写</li><li>HTML标签的属性值，采用单引号、双引号都可以</li><li>HTML语法相对比较松散 (建议大家编写HTML标签的时候尽量严谨一些)</li></ul><h2 id="2-2-开发工具"><a href="#2-2-开发工具" class="headerlink" title="2.2 开发工具"></a>2.2 开发工具</h2><ul><li><p>我们通过快速入门案例，发现由记事本文件开发html是非常不方便的，所以接下来我们需要学习一款前端专业的开发工具VS Code。</p></li><li><p>Visual Studio Code（简称 VS Code ）是 Microsoft 于2015年4月发布的一款代码编辑器。VS Code 对前端代码有非常强大的支持，同时也其他编程语言（例如：C++、Java、Python、PHP、Go等）。VS Code 提供了非常强大的插件库，大大提高了开发效率。</p></li><li><p>官网： <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></p></li><li><p>详细安装教程：参考 <strong>资料&#x2F;VSCode安装&#x2F;安装文档&#x2F;VS Code安装文档.md</strong></p></li></ul><blockquote><p>注意：需要注意的是，我们作为一名开发者，不应该将软件软装在包含中文名的路径中 。</p></blockquote><h2 id="2-3-基础标签-样式"><a href="#2-3-基础标签-样式" class="headerlink" title="2.3 基础标签 &amp; 样式"></a>2.3 基础标签 &amp; 样式</h2><p>那我们在讲解HTML的常见基础标签 及 CSS的基本样式时，我们就以 新浪新闻页面 为例，来进行讲解，这样大家不仅能够知道 常见标签及样式的作用，还能够知道具体的应用场景。</p><p>新浪新闻的具体页面效果如下：</p><p><img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/image-20230309221756293.png" alt="image-20230309221756293"></p><p>原始页面网址：<a href="https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml">https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml</a></p><p>而对于这个新浪新闻的页面来说，核心内容分为两个部分，如下：</p><ul><li>新浪新闻-标题部分</li><li>新浪新闻-正文部分</li></ul><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309222608750-1729574785840-148.png" alt="image-20230309222608750"> </p><h3 id="2-3-1-新浪新闻-标题实现"><a href="#2-3-1-新浪新闻-标题实现" class="headerlink" title="2.3.1 新浪新闻-标题实现"></a>2.3.1 新浪新闻-标题实现</h3><h4 id="2-3-1-1-标题排版"><a href="#2-3-1-1-标题排版" class="headerlink" title="2.3.1.1 标题排版"></a>2.3.1.1 标题排版</h4><h5 id="2-3-1-1-1-分析"><a href="#2-3-1-1-1-分析" class="headerlink" title="2.3.1.1.1 分析"></a>2.3.1.1.1 分析</h5><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309223020809-1729574785840-150.png" alt="image-20230309223020809" style="zoom:67%;" /> <p> 1). 第一部分，是一张图片，需要用到HTML中的图片标签 &lt;img&gt; 来实现。</p><p> 2). 第二部分，是一个标题，需要用到HTML中的标题标签 <h1> … <h6>来实现。</p><p> 3). 第三部分，有两条水平分割线，需要用到HTML中的 <hr> 标签来定义水平分割线。</p><h5 id="2-3-1-1-2-标签"><a href="#2-3-1-1-2-标签" class="headerlink" title="2.3.1.1.2 标签"></a>2.3.1.1.2 标签</h5><p>1). 图片标签 img</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">A. 图片标签: <span class="hljs-symbol">&amp;lt;</span>img<span class="hljs-symbol">&amp;gt;</span><br><br>B. 常见属性: <br>src: 指定图像的url (可以指定 绝对路径 , 也可以指定 相对路径)<br>width: 图像的宽度 (像素 / 百分比 , 相对于父元素的百分比)<br>height: 图像的高度 (像素 / 百分比 , 相对于父元素的百分比)<br><br>备注: 一般width 和 height 我们只会指定一个，另外一个会自动的等比例缩放。<br><br>C. 路径书写方式:<br>    绝对路径:<br>        1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png<br>           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;</span>&gt;</span><br><br>        2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png<br>           <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;</span>&gt;</span><br>    <br>    相对路径:<br>        ./ : 当前目录 , ./ 可以省略的<br>        ../: 上一级目录<br></code></pre></td></tr></table></figure><p>2). 标题标签 h 系列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">A. 标题标签: <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> - <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>111111111111<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br>B. 效果 : h1为一级标题，字体也是最大的 ； h6为六级标题，字体是最小的。<br></code></pre></td></tr></table></figure><p>3). 水平分页线标签 <hr></p><h5 id="2-3-1-1-2-实现"><a href="#2-3-1-1-2-实现" class="headerlink" title="2.3.1.1.2 实现"></a>2.3.1.1.2 实现</h5><p>1). 打开VsCode，选择左侧最底部的 “资源管理器”，然后选择打开文件夹，选择打开桌面的 HTML 文件夹 </p><p>2). 将资料中提供的 图片、音频、视频 文件夹的这三个文件夹（里面是图片、音视频素材），复制到 HTML 文件夹中。 </p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309224226495-1729574785840-149.png" alt="image-20230309224226495"> </p><p>3). 在VsCode中创建一个新的 html 文件，文件的后缀名设置为 .html</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309224401950-1729574785840-151.png" alt="image-20230309224401950"> </p><p>4). html 文件创建好之后，在其中输入 ！，然后直接回车，就可以生成 HTML 的基础结构标签</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309224645231-1729574785841-152.png" alt="image-20230309224645231"> </p><p>5). 编写标题排版的核心代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 文档类型为HTML --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 字符集为UTF-8 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置浏览器兼容性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    img标签: </span><br><span class="hljs-comment">        src: 图片资源路径</span><br><span class="hljs-comment">        width: 宽度(px, 像素 ; % , 相对于父元素的百分比)</span><br><span class="hljs-comment">        height: 高度(px, 像素 ; % , 相对于父元素的百分比)</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        &lt;img src=&quot;img/news_logo.png&quot; width=&quot;80%&quot; &gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    路径书写方式:</span><br><span class="hljs-comment">        绝对路径:</span><br><span class="hljs-comment">            1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png</span><br><span class="hljs-comment">                           &lt;img src=&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png</span><br><span class="hljs-comment">                           &lt;img src=&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;&gt;</span><br><span class="hljs-comment">        相对路径:</span><br><span class="hljs-comment">            ./ : 当前目录 , ./ 可以省略的</span><br><span class="hljs-comment">            ../: 上一级目录</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    2023年03月02日 21:50 央视网<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-1-2-标题样式"><a href="#2-3-1-2-标题样式" class="headerlink" title="2.3.1.2 标题样式"></a>2.3.1.2 标题样式</h4><p>新浪新闻的标题部分的基本排版，我们已经完成了，然后大家会看到，我们编写的一级标题，默认字体颜色为纯黑色。 而原始的新浪新闻页面的新闻标题字体，并不是纯黑色，而是灰黑色， 那接下来，我们就要来设置这个字体的颜色。 而要设置这个字体的颜色，我们就需要通过CSS样式来控制 。</p><p>那在HTML的文件中，我们如何来编写CSS样式呢，此时就涉及到CSS的三种引入方式。</p><h5 id="2-3-1-2-1-CSS引入方式"><a href="#2-3-1-2-1-CSS引入方式" class="headerlink" title="2.3.1.2.1 CSS引入方式"></a>2.3.1.2.1 CSS引入方式</h5><p>具体有3种引入方式，语法如下表格所示：</p><table><thead><tr><th>名称</th><th>语法描述</th><th>示例</th></tr></thead><tbody><tr><td>行内样式</td><td>在标签内使用style属性，属性值是css属性键值对</td><td>&lt;h1 style&#x3D;”xxx:xxx;”&gt;中国新闻网&lt;&#x2F;h1&gt;</td></tr><tr><td>内嵌样式</td><td>定义&lt;style&gt;标签，在标签内部定义css样式</td><td>&lt;style&gt; h1 {…} &lt;&#x2F;style&gt;</td></tr><tr><td>外联样式</td><td>定义&lt;link&gt;标签，通过href属性引入外部css文件</td><td>&lt;link rel&#x3D;”stylesheet” href&#x3D;”css&#x2F;news.css”&gt;</td></tr></tbody></table><p>对于上述3种引入方式，企业开发的使用情况如下：</p><ol><li>内联样式会出现大量的代码冗余，不方便后期的维护，所以不常用。</li><li>内部样式，通过定义css选择器，让样式作用于当前页面的指定的标签上。</li><li>外部样式，html和css实现了完全的分离，企业开发常用方式。</li></ol><h5 id="2-3-1-2-2-颜色表示"><a href="#2-3-1-2-2-颜色表示" class="headerlink" title="2.3.1.2.2 颜色表示"></a>2.3.1.2.2 颜色表示</h5><p>在前端程序开发中，颜色的表示方式常见的有如下三种：</p><table><thead><tr><th><strong>表示方式</strong></th><th><strong>表示含义</strong></th><th><strong>取值</strong></th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><h5 id="2-3-1-2-3-标题字体颜色"><a href="#2-3-1-2-3-标题字体颜色" class="headerlink" title="2.3.1.2.3 标题字体颜色"></a>2.3.1.2.3 标题字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 方式二: 内嵌样式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* color: red; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* color: rgb(0, 0, 255); */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 方式三: 外联样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/news.css&quot;&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-comment">&lt;!-- 方式一: 行内样式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;h1 style=&quot;color: red;&quot;&gt;焦点访谈：中国底气 新思想夯实大国粮仓&lt;/h1&gt; --&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    2023年03月02日 21:50 央视网<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>备注: 要想拾取某一个网页中的颜色，我们可以借助于浏览器的拾色器插件来完成。【拾色器插件的安装，参照资料中提供的文档即可】</p><h5 id="2-3-1-2-4-CSS选择器"><a href="#2-3-1-2-4-CSS选择器" class="headerlink" title="2.3.1.2.4 CSS选择器"></a>2.3.1.2.4 CSS选择器</h5><p>顾名思义：选择器是选取需设置样式的元素（标签），但是我们根据业务场景不同，选择的标签的需求也是多种多样的，所以选择器有很多种，因为我们是做后台开发的，所以对于css选择器，我们只学习最基本的3种。</p><p><strong>选择器通用语法如下</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器名   &#123;<br>    css样式名：css样式值;<br>    css样式名：css样式值;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要学习的3种选择器是元素选择器，id选择器，class选择器，语法以及作用如下：</p><p><strong>1.元素（标签）选择器：</strong> </p><ul><li>选择器的名字必须是标签的名字</li><li>作用：选择器中的样式会作用于所有同名的标签上</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">元素名称 &#123;<br>    css样式名:css样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.id选择器:</strong></p><ul><li>选择器的名字前面需要加上#</li><li>作用：选择器中的样式会作用于指定id的标签上，而且有且只有一个标签（由于id是唯一的）</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#id属性值 &#123;</span><br>    css样式名<span class="hljs-symbol">:css</span>样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#did</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.类选择器：</strong></p><ul><li>选择器的名字前面需要加上 .</li><li>作用：选择器中的样式会作用于所有class的属性值和该名字一样的标签上，可以是多个</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">.<span class="hljs-keyword">class</span>属性值 &#123;<br>    css样式名<span class="hljs-symbol">:css</span>样式值；<br>&#125;<br></code></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.cls</span>&#123;<br>     <span class="hljs-attribute">color</span>: green;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-1-2-5-发布时间字体颜色"><a href="#2-3-1-2-5-发布时间字体颜色" class="headerlink" title="2.3.1.2.5 发布时间字体颜色"></a>2.3.1.2.5 发布时间字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 元素选择器 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* span &#123;</span></span><br><span class="hljs-comment"><span class="language-css">            color: red;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 类选择器 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* .cls &#123;</span></span><br><span class="hljs-comment"><span class="language-css">            color: green;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125; */</span></span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-comment">/* ID选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上述我们还使用了一个css的属性 font-size , 用来设置字体的大小。 但是需要注意，在设置字体的大小时，单位px不能省略，否则不生效。</p><h4 id="2-3-1-3-超链接"><a href="#2-3-1-3-超链接" class="headerlink" title="2.3.1.3 超链接"></a>2.3.1.3 超链接</h4><ul><li><p>在新浪新闻的标题部分，当我们点击顶部的 “新浪政务”，浏览器将自动在当前窗口访问新浪政务首页这个资源（<a href="http://gov.sina.com.cn/%EF%BC%89">http://gov.sina.com.cn/）</a></p></li><li><p>当我们点击新闻发布时间之后的 “央视网”，浏览器将会自动打开一个新的标签页，然后在新的标签页中访问央视网中的该新闻资源 （<a href="https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml%EF%BC%89">https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml）</a></p></li></ul><p><img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/a.gif" alt="a"></p><p>那接下来，我们就来完善新闻标题部分的这个功能，那此时呢，我们就需要用到HTML中的超链接的标签 。</p><h5 id="2-3-1-3-1-介绍"><a href="#2-3-1-3-1-介绍" class="headerlink" title="2.3.1.3.1 介绍"></a>2.3.1.3.1 介绍</h5><ul><li>标签: &lt;a href&#x3D;”…” target&#x3D;”…”&gt;央视网</a></li><li>属性:<ul><li>href: 指定资源访问的url</li><li>target: 指定在何处打开资源链接<ul><li>_self: 默认值，在当前页面打开</li><li>_blank: 在空白页面打开</li></ul></li></ul></li></ul><h5 id="2-3-1-3-2-实现"><a href="#2-3-1-3-2-实现" class="headerlink" title="2.3.1.3.2 实现"></a>2.3.1.3.2 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 , 去除掉 超链接 下面默认的下划线 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开此页面，我们可以看到最终效果（超链接的字体，以及默认的下划线，通过css样式已经调整好了）：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309233408698-1729574785841-154.png" alt="image-20230309233408698"> </p><h3 id="2-3-2-新浪新闻-正文实现"><a href="#2-3-2-新浪新闻-正文实现" class="headerlink" title="2.3.2 新浪新闻-正文实现"></a>2.3.2 新浪新闻-正文实现</h3><h4 id="2-3-2-1-正文排版"><a href="#2-3-2-1-正文排版" class="headerlink" title="2.3.2.1 正文排版"></a>2.3.2.1 正文排版</h4><h5 id="2-3-2-1-1-分析"><a href="#2-3-2-1-1-分析" class="headerlink" title="2.3.2.1.1 分析"></a>2.3.2.1.1 分析</h5><img src="../../assets/JavaWeb(SpringBootVue)/image-20230310084859695-1729574785841-155.png" alt="image-20230310084859695" style="zoom:80%;" /> <p>整个正文部分的排版，主要分为这么四个部分：</p><p>1). 视频 (当前这种新闻页面,可能也会存在音频)</p><p>2). 文字段落</p><p>3). 字体加粗</p><p>4). 图片</p><h5 id="2-3-2-1-2-标签"><a href="#2-3-2-1-2-标签" class="headerlink" title="2.3.2.1.2 标签"></a>2.3.2.1.2 标签</h5><p><strong>1). 视频、音频标签</strong></p><ul><li><p>视频标签: &lt;video&gt;</p><ul><li>属性: <ul><li>src: 规定视频的url</li><li>controls: 显示播放控件</li><li>width: 播放器的宽度</li><li>height: 播放器的高度</li></ul></li></ul></li><li><p>音频标签: &lt;audio&gt;</p><ul><li>属性:<ul><li>src: 规定音频的url</li><li>controls: 显示播放控件</li></ul></li></ul></li></ul><p><strong>2). 段落标签</strong></p><ul><li>换行标签: &lt;br&gt;<ul><li>注意: 在HTML页面中,我们在编辑器中通过回车实现的换行, 仅仅在文本编辑器中会看到换行效果, 浏览器是不会解析的, HTML中换行需要通过br标签</li></ul></li></ul><p>​</p><ul><li>段落标签: &lt;p&gt;<ul><li>如: &lt;p&gt; 这是一个段落 &lt;&#x2F;p&gt;</li></ul></li></ul><p><strong>3). 文本格式标签</strong></p><table><thead><tr><th>效果</th><th>标签</th><th>标签(强调)</th></tr></thead><tbody><tr><td>加粗</td><td>b</td><td>strong</td></tr><tr><td>倾斜</td><td>i</td><td>em</td></tr><tr><td>下划线</td><td>u</td><td>ins</td></tr><tr><td>删除线</td><td>s</td><td>del</td></tr></tbody></table><p>前面的标签 b、i、u、s 就仅仅是实现加粗、倾斜、下划线、删除线的效果，是没有强调语义的。 而后面的strong、em、ins、del在实现加粗、倾斜、下划线、删除线的效果的同时，还带有强调语义。</p><h5 id="2-3-2-1-3-实现"><a href="#2-3-2-1-3-实现" class="headerlink" title="2.3.2.1.3 实现"></a>2.3.2.1.3 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35px</span>; <span class="hljs-comment">/* 设置首行缩进 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>; <span class="hljs-comment">/* 设置行高 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#plast</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: right; <span class="hljs-comment">/* 对齐方式 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 标题 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 正文 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 视频 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/1.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;950px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 音频 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>央视网消息<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.jpg&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/2.jpg&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;plast&quot;</span>&gt;</span><br>        责任编辑：王树淼 SN242<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述的正文排版实现中，还用到了几个CSS属性： </p><ul><li>text-indent: 设置段落的首行缩进 </li><li>line-height: 设置行高</li><li>text-align: 设置对齐方式, 可取值为 left &#x2F; center &#x2F; right</li></ul><blockquote><p>注意事项: </p><ul><li><p>在HTML页面中无论输入了多少个空格, 最多只会显示一个。 可以使用空格占位符（&amp;nbsp；）来生成空格，如果需要多个空格，就使用多次占位符。</p></li><li><p>那在HTML中，除了空格占位符以外，还有一些其他的占位符(了解, 只需要知道空格的占位符写法即可)，如下：</p><ul><li><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">占位符</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&amp;nbsp;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&amp;lt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&amp;gt;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;amp;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&amp;quot;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&amp;apos;</td></tr></tbody></table></li></ul></li></ul></blockquote><h4 id="2-3-2-2-页面布局"><a href="#2-3-2-2-页面布局" class="headerlink" title="2.3.2.2 页面布局"></a>2.3.2.2 页面布局</h4><p>目前，新闻页面的基本排版，我们都已经完成了，但是，大家会看到，无论是标题部分，还是正文部分，都是铺满了整个浏览器。 而我们再来看看新浪新闻的原始页面，我们会看到新闻网页内容都是居中展示的，左边、右边都是一定的边距的。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230310092442972-1729574785841-156.png" alt="image-20230310092442972"> </p><p>那接下来呢，我们就需要按照这个效果，来完成页面布局。 而要想完成这样一个页面布局，我们就需要介绍一下CSS中的盒子模型 。 </p><h5 id="2-3-2-2-1-盒子模型"><a href="#2-3-2-2-1-盒子模型" class="headerlink" title="2.3.2.2.1 盒子模型"></a>2.3.2.2.1 盒子模型</h5><ul><li><p>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</p></li><li><p>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</p></li></ul><img src="../../assets/JavaWeb(SpringBootVue)/image-20230310092820616-1729574785841-157.png" alt="image-20230310092820616" style="zoom:80%;" /> <p>CSS盒子模型，其实和日常生活中的包装盒是非常类似的，就比如：</p><img src="../../assets/JavaWeb(SpringBootVue)/image-20230310093247265-1729574785841-158.png" alt="image-20230310093247265" style="zoom:80%;" /> <p>盒子的大小，其实就包括三个部分： border、padding、content，而margin外边距是不包括在盒子之内的。</p><h5 id="2-3-2-2-2-布局标签"><a href="#2-3-2-2-2-布局标签" class="headerlink" title="2.3.2.2.2 布局标签"></a>2.3.2.2.2 布局标签</h5><ul><li><p>布局标签：实际开发网页中，会大量频繁的使用 div 和 span 这两个没有语义的布局标签。</p></li><li><p>标签：<div> <span></p></li><li><p>特点：</p><ul><li><p>div标签：</p><ul><li><p>一行只显示一个（独占一行）</p></li><li><p>宽度默认是父元素的宽度，高度默认由内容撑开</p></li><li><p>可以设置宽高（width、height）</p></li></ul></li><li><p>span标签：</p><ul><li><p>一行可以显示多个</p></li><li><p>宽度和高度默认由内容撑开</p></li><li><p>不可以设置宽高（width、height）</p></li></ul></li></ul></li></ul><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开后的效果:</p><p>1). div会独占一行，默认宽度为父元素 body 的宽度</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230310093734941-1729574785841-159.png" alt="image-20230310093734941">  </p><p>2). span一行会显示多个，用来组合行内元素，默认宽度为内容撑开的宽度</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230310093827748-1729574785841-160.png" alt="image-20230310093827748"> </p><h5 id="2-3-2-2-3-盒子模型代码"><a href="#2-3-2-2-3-盒子模型代码" class="headerlink" title="2.3.2.2.3 盒子模型代码"></a>2.3.2.2.3 盒子模型代码</h5><p>代码如下: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>盒子模型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/* 宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;  <span class="hljs-comment">/* 高度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box; <span class="hljs-comment">/* 指定width height为盒子的高宽 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: aquamarine; <span class="hljs-comment">/* 背景色 */</span></span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>; <span class="hljs-comment">/* 内边距, 上 右 下 左 , 边距都一行, 可以简写: padding: 20px;*/</span> </span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red; <span class="hljs-comment">/* 边框, 宽度 线条类型 颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">30px</span>; <span class="hljs-comment">/* 外边距, 上 右 下 左 , 边距都一行, 可以简写: margin: 30px; */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>代码编写好了, 可以通过浏览器打开该页面, 通过开发者工具,我们就可以看到盒子的大小, 以及盒子各个组成部分(内容、内边距、边框、外边距)：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230310094312355-1729574785841-161.png" alt="image-20230310094312355"> </p><p>我们也可以，通过浏览器的开发者工具，清晰的看到这个盒子，以及每一个部分的大小：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230310094412539-1729574785841-163.png" alt="image-20230310094412539"> </p><h5 id="2-3-2-2-3-布局实现"><a href="#2-3-2-2-3-布局实现" class="headerlink" title="2.3.2.2.3 布局实现"></a>2.3.2.2.3 布局实现</h5><p>在实现新闻页面的布局时，我们需要做两部操作：</p><ul><li>第一步：需要将body中的新闻标题部分、正文部分使用一个 div 布局标签将其包裹起来，方便通过css设置内容占用的宽度，比如：65%。</li><li>第二步：通过css为该div设置外边距，左右的外边距分别为：17.5%，上下外边距靠边展示即可，为：0%。</li></ul><p>具体的代码实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#4D4F53</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#time</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#968D92</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">13px</span>; <span class="hljs-comment">/* 设置字体大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none; <span class="hljs-comment">/* 设置文本为一个标准的文本 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">35px</span>; <span class="hljs-comment">/* 设置首行缩进 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>; <span class="hljs-comment">/* 设置行高 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#plast</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: right; <span class="hljs-comment">/* 对齐方式 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">65%</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* margin: 0% 17.5% 0% 17.5% ; */</span> <span class="hljs-comment">/* 外边距, 上 右 下 左 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 标题 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  &gt; 正文<br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 正文 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 视频 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video/1.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;950px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 音频 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>央视网消息<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.jpg&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/2.jpg&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;plast&quot;</span>&gt;</span><br>            责任编辑：王树淼 SN242<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开此页面，最终效果如下：</p><p><img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/image-20230310094732466.png" alt="image-20230310094732466"> </p><h2 id="2-4-表格标签"><a href="#2-4-表格标签" class="headerlink" title="2.4 表格标签"></a>2.4 表格标签</h2><p><strong>场景：</strong>在网页中以表格（行、列）形式整齐展示数据，我们在一些管理类的系统中，会看到数据通常都是以表格的形式呈现出来的，比如：班级表、学生表、课程表、成绩表等等。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309174438491-1729574785841-164.png" alt="image-20230309174438491"> </p><p><strong>标签：</strong></p><ul><li><p>&lt;table&gt; : 用于定义整个表格, 可以包裹多个 &lt;tr&gt;， 常用属性如下： </p><ul><li>border：规定表格边框的宽度</li><li>width：规定表格的宽度</li><li>cellspacing: 规定单元之间的空间</li></ul></li><li><p>&lt;tr&gt; : 表格的行，可以包裹多个 &lt;td&gt;  </p></li><li><p>&lt;td&gt; : 表格单元格(普通)，可以包裹内容 , 如果是表头单元格，可以替换为 &lt;th&gt;</p></li></ul><p><strong>演示：</strong></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center; <span class="hljs-comment">/* 单元格内容居中展示 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1px&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌Logo<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>企业名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/huawei.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为技术有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/alibaba.jpg&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>阿里<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>阿里巴巴集团控股有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开浏览器，效果如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309175121361-1729574785841-165.png" alt="image-20230309175121361"> </p><p>整合表格使用 table 标签包裹 , 其中的每一行数据都是一个 tr , 每一行中的每一个单元格都是一个 td , 而如果是表头单元格, 可以使用 th (具有加粗居中展示的效果)。</p><h2 id="2-5-表单标签"><a href="#2-5-表单标签" class="headerlink" title="2.5 表单标签"></a>2.5 表单标签</h2><h3 id="2-5-1-表单"><a href="#2-5-1-表单" class="headerlink" title="2.5.1 表单"></a>2.5.1 表单</h3><h4 id="2-5-1-1-介绍"><a href="#2-5-1-1-介绍" class="headerlink" title="2.5.1.1 介绍"></a>2.5.1.1 介绍</h4><p>那表单呢,在我们日常的上网的过程中,基本上每天都会遇到。比如，我们经常在访问网站时，出现的登录页面、注册页面、个人信息提交页面，其实都是一个一个的表单 。 当我们在这些表单中录入数据之后，一点击 “提交”，就会将表单中我们填写的数据采集到，并提交， 那其实这个数据呢，一般会提交到服务端，最终保存在数据库中 （后面的课程中会讲到）。</p><p><img src="../../assets/JavaWeb(SpringBootVue)/1668055779440-1729574785841-166.png" alt="1668055779440" style="zoom:80%;" /> <img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/image-20230309175941128.png" alt="image-20230309175941128" style="zoom:80%;" /> </p><p>那其实，上述的整个窗口是一个表单，而表单是一项一项的，这个我们称为表单项 或 表单元素。</p><ul><li><p>表单场景: 表单就是在网页中负责数据采集功能的，如：注册、登录的表单。 </p></li><li><p>表单标签: &lt;form&gt;</p></li><li><p>表单属性:</p><ul><li>action: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li><li>method: 规定用于发送表单数据的方式，常见为： GET、POST。<ul><li>GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username&#x3D;Tom&amp;age&#x3D;12，url中能携带的表单数据大小是有限制的。</li><li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li></ul></li></ul></li><li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p><ul><li>input: 定义表单项，通过type属性控制输入形式</li><li>select: 定义下拉列表</li><li>textarea: 定义文本域</li></ul></li></ul><h4 id="2-5-1-2-演示"><a href="#2-5-1-2-演示" class="headerlink" title="2.5.1.2 演示"></a>2.5.1.2 演示</h4><p>1). GET方式提交的表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    form表单属性: </span><br><span class="hljs-comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span><br><span class="hljs-comment">        method: 表单的提交方式 .</span><br><span class="hljs-comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span><br><span class="hljs-comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span><br><span class="hljs-comment">    --&gt;</span>   <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><img src="../../assets/JavaWeb(SpringBootVue)/image-20230309191725329-1729574785841-168.png" alt="image-20230309191725329" style="zoom:80%;" /> <p>2). POST方式提交表单</p><p>将上述的表单提交方式由get，改为post</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    form表单属性: </span><br><span class="hljs-comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span><br><span class="hljs-comment">        method: 表单的提交方式 .</span><br><span class="hljs-comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span><br><span class="hljs-comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span><br><span class="hljs-comment">    --&gt;</span>   <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309192625939-1729574785841-169.png" alt="image-20230309192625939"> </p><h4 id="2-5-1-3-注意事项"><a href="#2-5-1-3-注意事项" class="headerlink" title="2.5.1.3 注意事项"></a>2.5.1.3 注意事项</h4><p>表单中的所有表单项，要想能够正常的采集数据，在提交的时候能提交到服务端，表单项必须指定name属性。 否则，无法提交该表单项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-2-表单项"><a href="#2-5-2-表单项" class="headerlink" title="2.5.2 表单项"></a>2.5.2 表单项</h3><h4 id="2-5-2-1-介绍"><a href="#2-5-2-1-介绍" class="headerlink" title="2.5.2.1 介绍"></a>2.5.2.1 介绍</h4><p>在一个表单中，可以存在很多的表单项，而虽然表单项的形式各式各样，但是表单项的标签其实就只有三个，分别是：</p><ul><li><p>&lt;input&gt;: 表单项 , 通过type属性控制输入形式。</p><table><thead><tr><th>type取值</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table></li><li><p>&lt;select&gt;: 定义下拉列表, &lt;option&gt; 定义列表项</p></li><li><p>&lt;textarea&gt;: 文本域</p></li></ul><h4 id="2-5-2-2-演示"><a href="#2-5-2-2-演示" class="headerlink" title="2.5.2.2 演示"></a>2.5.2.2 演示</h4><p>创建一个新的表单项的html文件，具体内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>HTML-表单项标签<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- value: 表单项提交的值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>     姓名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     密码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <br>     性别: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 男<br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 女 <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     爱好: <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span> java <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span> game <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sing&quot;</span>&gt;</span> sing <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     图像: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     生日: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birthday&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;time&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     日期时间: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;datetime&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     邮箱: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     年龄: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     学历: <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;degree&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>----------- 请选择 -----------<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>大专<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>本科<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>硕士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>博士<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     描述: <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br> <br>     <span class="hljs-comment">&lt;!-- 表单常见按钮 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span>   <br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过浏览器打开上述的表单项html文件，最终展示出的表单信息如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309221308252-1729574785841-170.png" alt="image-20230309221308252"> </p><p>而对于input type&#x3D;”hidden”，是一个隐藏域，在表单中并不会显示出来，但是在提交表单的时候，是会提交到服务端的。 接下来，我们就点击提交按钮，来提交当前表单，看看提交的数据：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20230309221530214-1729574785841-171.png" alt="image-20230309221530214"> </p><h1 id="3-文档查阅"><a href="#3-文档查阅" class="headerlink" title="3. 文档查阅"></a>3. 文档查阅</h1><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><h2 id="3-1-HTML文档查阅"><a href="#3-1-HTML文档查阅" class="headerlink" title="3.1 HTML文档查阅"></a>3.1 HTML文档查阅</h2><p>以video标签为例:</p><p><img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/html.gif" alt="html"></p><h2 id="3-2-CSS文档查阅"><a href="#3-2-CSS文档查阅" class="headerlink" title="3.2 CSS文档查阅"></a>3.2 CSS文档查阅</h2><p>以padding属性为例:</p><p><img src="D:/Notes/Java/Javaweb/web/课件/day01-HTML-CSS/day01-HTML-CSS/讲义/assets/css.gif" alt="css"> </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>技术</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识web开发</title>
    <link href="/2024/10/22/JavaWeb(SpringBoot+Vue)/webstart/"/>
    <url>/2024/10/22/JavaWeb(SpringBoot+Vue)/webstart/</url>
    
    <content type="html"><![CDATA[<h1 id="Web开发介绍"><a href="#Web开发介绍" class="headerlink" title="Web开发介绍"></a>Web开发介绍</h1><h2 id="1-什么是web开发"><a href="#1-什么是web开发" class="headerlink" title="1 什么是web开发"></a>1 什么是web开发</h2><p><strong>Web</strong>：全球广域网，也称为<strong>万维网</strong>(www <strong>W</strong>orld <strong>W</strong>ide <strong>W</strong>eb)，能够通过浏览器访问的<strong>网站</strong>。</p><p>所以<strong>Web开发</strong>说白了，就是<strong>开发网站</strong>的，例如下图所示的网站：<strong>淘宝</strong>，<strong>京东</strong>等等</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667546541068.png" alt="1667546541068"></p><p>那么我们知道了web开发是开发网站的，那么我们需要学习哪些知识呢？以及这些知识在我们整个网站开发中占据什么位置呢？对于这些问题，我们就必须知道网站整体的工作流程。</p><h2 id="2-网站的工作流程"><a href="#2-网站的工作流程" class="headerlink" title="2 网站的工作流程"></a>2 网站的工作流程</h2><p>接下来我们先来看看网站的工作流程，这样才能在我们的脑海中构建初步的知识架构体系。</p><p>1.首先我们需要通过<strong>浏览器</strong>访问发布到<strong>前端服务器</strong>中的<strong>前端程序</strong>，这时候前端程序会将前端代码返回给浏览器。如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667546920773.png" alt="1667546920773"></p><p>2.浏览器得到前端代码，此时浏览器会将前端代码进行解析，然后展示到浏览器的窗口中，这时候我们就看到了<strong>网站</strong>的<strong>页面</strong>，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667547421140.png" alt="1667547421140"></p><p>3.但是此时这个页面是没有数据的，因为数据在我们的数据库中，所以我们浏览器需要根据<strong>前端代码中指定的后台服务器的地址</strong> 向 我们的<strong>后台服务器</strong>（内部有java程序）发起<strong>请求</strong>，后台服务器再去从<strong>数据库</strong>中获取数据，然后返回给浏览器。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667547561387.png" alt="1667547561387"></p><p>4.浏览器拿到后台返回的数据后，然后将数据展示在前端资源也就是<strong>网页</strong>上，然后我们就看到了如下图所示的完整的内容</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667547604517.png" alt="1667547604517"></p><p><strong>整个流程如下：</strong></p><p>1.浏览器先向前端服务器请求<strong>前端资源</strong>，也就是我们所说的<strong>网页</strong></p><p>2.浏览器再向<strong>后台服务器</strong>发起请求，获取<strong>数据</strong></p><p>3.浏览器将得到的后台<strong>数据</strong>填充到<strong>网页</strong>上，然后展示给用户去看</p><h2 id="3-网站的开发模式"><a href="#3-网站的开发模式" class="headerlink" title="3 网站的开发模式"></a>3 网站的开发模式</h2><p>接下来我们来聊聊网站的开发模式，主要有2种：前端台分离和混合开发</p><p><strong>前后台分离</strong>：（<strong>目前企业开发的主流，</strong>市场占有率70%以上）这种开发模式的特点如下</p><ul><li><p>前端人员开发前端程序，前端程序单独部署到前端服务器上</p></li><li><p>后端人员开开发后端程序，后端程序单独部署到后端服务器上</p></li></ul><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667548530745.png" alt="1667548530745"></p><p><strong>混合开发：</strong>（早期的开发技术，目前慢慢退出市场），这种开发模式的特点是：前端人员开发的代码和后端人员开发的代码在同一个项目中，一起打包部署。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667548590602.png" alt="1667548590602"></p><h2 id="4-网站的开发技术"><a href="#4-网站的开发技术" class="headerlink" title="4 网站的开发技术"></a>4 网站的开发技术</h2><p>最后我们来看看web阶段需要学习哪些技术呢？如下图我们列举了课程中需要学习的知识点</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667548969631.png" alt="1667548969631"></p><p>以下是图表的方式整理了我们web阶段要学习的技术和其对应的作用</p><p>前端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>HTML</td><td>用于构建网站的基础结构的</td></tr><tr><td>css</td><td>用于美化页面的，作用和化妆或者整容作用一样</td></tr><tr><td>JavaScript</td><td>实现网页和用户的交互</td></tr><tr><td>Vue</td><td>主要用于将数据填充到html页面上的</td></tr><tr><td>Element</td><td>主要提供了一些非常美观的组件</td></tr><tr><td>Nginx</td><td>一款web服务器软件，可以用于部署我们的前端工程</td></tr></tbody></table><p>后端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>Maven</td><td>一款java中用于管理项目的软件</td></tr><tr><td>Mysql</td><td>最常用的一款数据库软件之一</td></tr><tr><td>SpringBoot</td><td>spring家族的产品，当前最为主流的项目开发技术。</td></tr><tr><td>Mybatis</td><td>用于操作数据库的框架</td></tr></tbody></table><p>所以只有我们学完上述的技术，我们才能开发出一个麻雀虽小，五脏俱全的网站。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>技术</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端开发基础(二)</title>
    <link href="/2024/10/22/JavaWeb(SpringBoot+Vue)/JavaScript-Vue/"/>
    <url>/2024/10/22/JavaWeb(SpringBoot+Vue)/JavaScript-Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JavaScript"><a href="#1-JavaScript" class="headerlink" title="1 JavaScript"></a>1 JavaScript</h1><p>html完成了架子，css做了美化，但是网页是死的，我们需要给他注入灵魂，所以接下来我们需要学习JavaScript，这门语言会让我们的页面能够和用户进行交互。</p><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>通过<strong>代码&#x2F;js效果演示</strong>提供资料进行效果演示，通过浏览器打开，我们点击主题5按钮，页面的主题发生了变化，所以js可以让我们的页面更加的智能，让页面和用户进行交互。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1667964998343.png" alt="1667964998343"> </p><h2 id="1-2-引入方式"><a href="#1-2-引入方式" class="headerlink" title="1.2 引入方式"></a>1.2 引入方式</h2><p>同样，js代码也是书写在html中的，那么html中如何引入js代码呢？主要通过下面的2种引入方式：</p><p>**第一种方式:**内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：demo.js中只有js代码，没有&lt;script&gt;标签</p><p>接下来，我们通过VS Code来编写代码，演示html中2种引入js的方式</p><p>第一步：在VS Code中创建名为 10.JS-引入方式.html 的文件</p><p>第二步：按照上述第一种内部脚本的方式引入js，编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-引入方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 内部脚本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello JS&#x27;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第三步：浏览器打开效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668020985363.png" alt="1668020985363"> </p><p>第四步：接下来演示外部脚本，注释掉内部脚本，然后在css目录同级创建js目录，然后创建一个名为demo.js的文件：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668021080890.png" alt="1668021080890"> </p><p>第五步：在demo.js中编写如下js内容：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-string">&#x27;Hello JS2&#x27;</span>);</span><br></code></pre></td></tr></table></figure><p>第六步：注释掉之前的内部脚本代码，添加&lt;script&gt;标签来引入外部demo.js文件,具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-引入方式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 内部脚本 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script&gt;</span><br><span class="hljs-comment">        alert(&#x27;Hello JS&#x27;);</span><br><span class="hljs-comment">    &lt;/script&gt; --&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 外部脚本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第七步：浏览器刷新效果如图：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668021241174.png" alt="1668021241174"> </p><h2 id="1-3-基础语法"><a href="#1-3-基础语法" class="headerlink" title="1.3 基础语法"></a>1.3 基础语法</h2><h3 id="1-3-1-书写语法"><a href="#1-3-1-书写语法" class="headerlink" title="1.3.1 书写语法"></a>1.3.1 书写语法</h3><p>掌握了js的引入方式，那么接下来我们需要学习js的书写了，首先需要掌握的是js的书写语法，语法规则如下：</p><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p></li><li><p>大括号表示代码块</p></li><li><p>注释：</p><ul><li><p>单行注释：&#x2F;&#x2F; 注释内容</p></li><li><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p></li></ul></li></ul><p>我们需要借助js中3钟输出语句，来演示书写语法</p><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><p>接下来我们选用通过VS Code，接触3种输入语句，来演示js的书写语法</p><p>第一步：在VS Code中创建名为 11.JS-基础语法-输出语句.html的文件</p><p>第二步：按照基本语法规则，编写3种输出语句的代码，并且添加注释，具体代码如下；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-基本语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* alert(&quot;JS&quot;); */</span></span><br><span class="language-javascript">    <span class="hljs-comment">//方式一: 弹出警告框</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello js&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开如图所示效果：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668101592422.png" alt="1668101592422"> </p><p>我们注释掉上述代码，添加代码 document.write(“hello js”); 来输出内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-基本语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* alert(&quot;JS&quot;); */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式一: 弹出警告框</span></span><br><span class="language-javascript">    <span class="hljs-comment">// window.alert(&quot;hello js&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式二: 写入html页面中</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;hello js&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>刷新浏览器，效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668101718354.png" alt="1668101718354"> </p><p>最后我们使用console.log(“hello js”); 写入到控制台，并且注释掉之前的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-基本语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">/* alert(&quot;JS&quot;); */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式一: 弹出警告框</span></span><br><span class="language-javascript">    <span class="hljs-comment">// window.alert(&quot;hello js&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //方式二: 写入html页面中</span></span><br><span class="language-javascript">    <span class="hljs-comment">// document.write(&quot;hello js&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方式三: 控制台输出</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello js&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器f12抓包，去控制台页面，如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668101840992.png" alt="1668101840992"></p><h3 id="1-3-2-变量"><a href="#1-3-2-变量" class="headerlink" title="1.3.2 变量"></a>1.3.2 变量</h3><p>书写语法会了，变量是一门编程语言比不可少的，所以接下来我们需要学习js中变量的声明，在js中，变量的声明和java中还是不同的。首先js中主要通过如下3个关键字来声明变量的：</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><p>在js中声明变量还需要注意如下几点：</p><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><p>接下来我们需要通过VS Code编写代码来演示js中变量的定义</p><p>第一步：在VS Code中创建名为 12.JS-基础语法-变量.html的文件：</p><p>第二步：编写代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-基础语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//var定义变量</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;</span><br><span class="language-javascript">    a = <span class="hljs-string">&quot;张三&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(a);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到浏览器弹出张三</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668101996370.png" alt="1668101996370"> </p><p>在js中，我们var声明的变量可以接受任何数据类型的值。并且var声明的变量的作用于是全局的，注释掉之前的代码，添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//var定义变量</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var a = 10;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// a = &quot;张三&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(a);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//特点1 : 作用域比较大, 全局变量</span></span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(x);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器照样成功弹出：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668102183766.png" alt="1668102183766"> </p><p>而且var关键字声明的变量可以重复定义，修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>     <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;A&quot;</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(x);<br>    <br></code></pre></td></tr></table></figure><p>浏览器弹出内容是A</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668102256305.png" alt="1668102256305"> </p><p>所以在ECMAScript 6 新增了 <strong>let</strong>关键字来定义变量，它的用法类似于 var，但是所声明的变量，只在 let关键字所在的代码块内有效，且不允许重复声明。注释掉之前的代码，添加代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//var定义变量</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var a = 10;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// a = &quot;张三&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(a);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//特点1 : 作用域比较大, 全局变量</span></span><br><span class="language-javascript">    <span class="hljs-comment">//特点2 : 可以重复定义的</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     var x = 1;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     var x = &quot;A&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(x);</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//let : 局部变量 ; 不能重复定义 </span></span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> x = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(x);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，f12抓包，来到控制台页面，发现报错，变量没有定义，说明let声明的变量在代码块外不生效</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668102426953.png" alt="1668102426953"></p><p>接着我们使用let重复定义变量，代码修改如下：发现idea直接帮我们报错了，说明let声明的变量不能重复定义</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668102527993.png" alt="1668102527993"> </p><p>在ECMAScript6中，还新增了const关键字用来声明常量，但是一旦声明，常量的值是无法更改的。注释之前的内容，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.14</span>;<br>pi = <span class="hljs-number">3.15</span>;<br><span class="hljs-title function_">alert</span>(pi);<br></code></pre></td></tr></table></figure><p>浏览器f12抓包，来到控制台页面发现直接报错了，</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668102736759.png" alt="1668102736759"> </p><p>关于变量的讲解我们就此结束，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-基础语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//var定义变量</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var a = 10;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// a = &quot;张三&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(a);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//特点1 : 作用域比较大, 全局变量</span></span><br><span class="language-javascript">    <span class="hljs-comment">//特点2 : 可以重复定义的</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     var x = 1;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     var x = &quot;A&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(x);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//let : 局部变量 ; 不能重复定义 </span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     let x = 1;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     alert(x);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//const: 常量 , 不能给改变的.</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.14</span>;</span><br><span class="language-javascript">    pi = <span class="hljs-number">3.15</span>;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(pi);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3-3-数据类型和运算符"><a href="#1-3-3-数据类型和运算符" class="headerlink" title="1.3.3 数据类型和运算符"></a>1.3.3 数据类型和运算符</h3><p>虽然js是弱数据类型的语言，但是js中也存在数据类型，js中的数据类型分为 ：原始类型 和 引用类型，具体有如下类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><p>使用typeof函数可以返回变量的数据类型，接下来我们需要通过书写代码来演示js中的数据类型</p><p>第一步：在VS Code中创建名为13. JS-基础语法-数据类型.html的文件</p><p>第二步：编写如下代码，然后直接挨个观察数据类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-数据类型<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//原始数据类型</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">3</span>); <span class="hljs-comment">//number</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">3.14</span>); <span class="hljs-comment">//number</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;A&quot;</span>); <span class="hljs-comment">//string</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;Hello&#x27;</span>);<span class="hljs-comment">//string</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>); <span class="hljs-comment">//boolean</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span>);<span class="hljs-comment">//boolean</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>); <span class="hljs-comment">//object </span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> a ;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">typeof</span> a); <span class="hljs-comment">//undefined</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>熟悉了js的数据类型了，那么我们需要学习js中的运算法，js中的运算规则绝大多数还是和java中一致的，具体运算符如下：</p><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><p>接下来我们通过代码来演示js中的运算法，主要记忆js中和java中不一致的地方</p><p>第一步：在VS Code中创建名为14. JS-基础语法-运算符.html的文件</p><p>第二步：编写代码</p><p>在js中，绝大多数的运算规则和java中是保持一致的，但是js中的=&#x3D;和&#x3D;&#x3D;&#x3D;是有区别的。</p><ul><li>=&#x3D;：只比较值是否相等，不区分数据类型，哪怕类型不一致，&#x3D;&#x3D;也会自动转换类型进行值得比较</li><li>&#x3D;&#x3D;&#x3D;：不光比较值，还要比较类型，如果类型不一致，直接返回false</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-运算符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> _age = <span class="hljs-string">&quot;20&quot;</span>;</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> $age = <span class="hljs-number">20</span>;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(age == _age);<span class="hljs-comment">//true ，只比较值</span></span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(age === _age);<span class="hljs-comment">//false ，类型不一样</span></span><br><span class="language-javascript">     <span class="hljs-title function_">alert</span>(age === $age);<span class="hljs-comment">//true ，类型一样，值一样</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在js中，虽然不区分数据类型，但是有时候涉及到数值计算，还是需要进行类型转换的，js中可以通过parseInt()函数来进行将其他类型转换成数值类型。注释之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类型转换 - 其他类型转为数字</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;12&quot;</span>)); <span class="hljs-comment">//12</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;12A45&quot;</span>)); <span class="hljs-comment">//12</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;A45&quot;</span>));<span class="hljs-comment">//NaN (not a number)</span><br></code></pre></td></tr></table></figure><p>除此之外，在js中，还有非常重要的一点是：0,null,undefined,””,NaN理解成false,反之理解成true。注释掉之前的代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//false</span><br>   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;0 转换为false&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器刷新页面，发现没有任何弹框，因为0理解成false，所以条件不成立。注释掉上述代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//true</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;除0和NaN其他数字都转为 true&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器刷新，因为1理解成true，条件成立，所以浏览器效果如下；</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668103531260.png" alt="1668103531260"> </p><p>其他情况可以一一演示，完整演示代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// if(0)&#123; //false</span><br><span class="hljs-comment">//     alert(&quot;0 转换为false&quot;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// if(NaN)&#123;//false</span><br><span class="hljs-comment">//     alert(&quot;NaN 转换为false&quot;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//true</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;除0和NaN其他数字都转为 true&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// if(&quot;&quot;)&#123; //false</span><br><span class="hljs-comment">//     alert(&quot;空字符串为 false, 其他都是true&quot;);</span><br><span class="hljs-comment">// &#125;</span><br>    <br><span class="hljs-comment">// if(null)&#123; //false</span><br><span class="hljs-comment">//     alert(&quot;null 转化为false&quot;);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// if(undefined)&#123; //false</span><br><span class="hljs-comment">//     alert(&quot;undefined 转化为false&quot;);</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure><p>流程控制语句if，switch，for等和java保持一致，此处不再演示</p><p><strong>需要注意的是：</strong>在js中，0,null,undefined,””,NaN理解成false,反之理解成true</p><h2 id="1-4-函数"><a href="#1-4-函数" class="headerlink" title="1.4 函数"></a>1.4 函数</h2><p>在java中我们为了提高代码的复用性，可以使用方法。同样，在JavaScript中可以使用函数来完成相同的事情。JavaScript中的函数被设计为执行特定任务的代码块，通过关键字function来定义。接下来我们学习一下JavaScript中定义函数的2种语法</p><h3 id="1-4-1-第一种定义格式"><a href="#1-4-1-第一种定义格式" class="headerlink" title="1.4.1 第一种定义格式"></a>1.4.1 第一种定义格式</h3><p>第一种定义格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2.</span>.)&#123;<br>    要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><p>如下示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们需要在VS Code中编写代码来演示</p><p>第一步：新建名为js的文件夹，创建名为01. JS-函数的html文件，然后在&lt;script&gt;中定义上述示例的函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">     <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span>  a + b;</span><br><span class="language-javascript">     &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是上述只是定义函数，<strong>函数需要被调用才能执行！</strong>所以接下来我们需要调用函数</p><p>第二步：因为定义的add函数有返回值，所以我们可以接受返回值，并且输出到浏览器上，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-title function_">alert</span>(result);<br></code></pre></td></tr></table></figure><p>查看浏览器运行结果：浏览器弹框内容如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668584359136.png" alt="1668584359136"> </p><h3 id="1-4-2-第二种定义格式"><a href="#1-4-2-第二种定义格式" class="headerlink" title="1.4.2 第二种定义格式"></a>1.4.2 第二种定义格式</h3><p>第二种可以通过var去定义函数的名字，具体格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> functionName = <span class="hljs-keyword">function</span> (<span class="hljs-params">参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2.</span>.</span>)&#123;   <br><span class="hljs-comment">//要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义函数-1</span></span><br><span class="language-javascript">    <span class="hljs-comment">// function add(a,b)&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//    return  a + b;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义函数-2</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span>  a + b;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//函数调用</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(result);</span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器弹框效果和上述一致</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668584359136.png" alt="1668584359136"> </p><p>我们在调用add函数时，再添加2个参数，修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><p>浏览器打开，发现没有错误，并且依然弹出30，这是为什么呢？</p><p>因为在JavaScript中，函数的调用只需要名称正确即可，参数列表不管的。如上述案例，10传递给了变量a，20传递给了变量b,而30和40没有变量接受，但是不影响函数的正常调用。</p><h2 id="1-5-JavaScript对象"><a href="#1-5-JavaScript对象" class="headerlink" title="1.5 JavaScript对象"></a>1.5 JavaScript对象</h2><p>JavaScript中的对象有很多，主要可以分为如下3大类，我们可以打开<a href="https://www.w3school.com.cn/">W3school在线学习文档</a>，来到首页，在左侧栏找到浏览器脚本下的JavaScript，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668587524509.png" alt="1668587524509"></p><p>然后进入到如下界面，点击右侧的参考书</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668587661914.png" alt="1668587661914"> </p><p>然后进入到如下页面，此页面列举出了JavaScript中的所有对象</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668587855863.png" alt="1668587855863"></p><p>可以大体分页3大类：</p><p>第一类：基本对象,我们主要学习Array和JSON和String</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668587953841.png" alt="1668587953841"> </p><p>第二类：BOM对象,主要是和浏览器相关的几个对象</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668588039871.png" alt="1668588039871"> </p><p>第三类：DOM对象，JavaScript中将html的每一个标签都封装成一个对象</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668588141399.png" alt="1668588141399"> </p><p>我们先来学习基本对象种的Array对象</p><h3 id="1-5-1-基本对象"><a href="#1-5-1-基本对象" class="headerlink" title="1.5.1 基本对象"></a>1.5.1 基本对象</h3><h4 id="1-5-1-1-Array对象"><a href="#1-5-1-1-Array对象" class="headerlink" title="1.5.1.1 Array对象"></a>1.5.1.1 Array对象</h4><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><p>Array对象时用来定义数组的。常用语法格式有如下2种：</p><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表); <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">//1,2,3,4 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = [ 元素列表 ]; <br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]; <span class="hljs-comment">//1,2,3,4 是存储在数组中的数据（元素）</span><br></code></pre></td></tr></table></figure><p>数组定义好了，那么我们该如何获取数组中的值呢？和java中一样，需要通过索引来获取数组中的值。语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">arr[索引] = 值;<br></code></pre></td></tr></table></figure><p>接下来，我们在VS Code中创建名为02. JS-对象-Array.html的文件，按照上述的语法定义数组，并且通过索引来获取数组中的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义数组</span></span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);</span><br><span class="language-javascript">     <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];</span><br><span class="language-javascript"><span class="hljs-comment">//获取数组中的值，索引从0开始计数</span></span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">1</span>]);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器控制台观察的效果如下：输出1和2</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668590655291.png" alt="1668590655291"> </p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。接下来我们通过代码来演示上述特点。</p><p>注释掉之前的代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//特点: 长度可变 类型可变</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr[<span class="hljs-number">10</span>] = <span class="hljs-number">50</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">10</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">9</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">8</span>]);<br></code></pre></td></tr></table></figure><p>上述代码定义的arr变量中，数组的长度是4，但是我们直接再索引10的位置直接添加了数据10，并且输出索引为10的位置的元素，浏览器控制台数据结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668590614787.png" alt="1668590614787"> </p><p>因为索引8和9的位置没有值，所以输出内容undefined,当然，我们也可以给数组添加其他类型的值，添加代码如下：注释掉之前控制台输出的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//特点: 长度可变 类型可变</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr[<span class="hljs-number">10</span>] = <span class="hljs-number">50</span>;<br><br><span class="hljs-comment">// console.log(arr[10]);</span><br><span class="hljs-comment">// console.log(arr[9]);</span><br><span class="hljs-comment">// console.log(arr[8]);</span><br><br>arr[<span class="hljs-number">9</span>] = <span class="hljs-string">&quot;A&quot;</span>;<br>arr[<span class="hljs-number">8</span>] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><p>浏览器控制台输出结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668590895662.png" alt="1668590895662"> </p><h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><p>Array作为一个对象，那么对象是有属性和方法的，所以接下来我们介绍一下Array对象的属性和方法</p><p>官方文档中提供了Array的很多属性和方法，但是我们只学习常用的属性和方法，如下图所示：</p><p>属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><ul><li><p>length属性：</p><p>length属性可以用来获取数组的长度，所以我们可以借助这个属性，来遍历数组中的元素，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr[<span class="hljs-number">10</span>] = <span class="hljs-number">50</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器控制台输出结果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668591566013.png" alt="1668591566013"> </p></li><li><p>forEach()函数</p><p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//e是形参，接受的是数组遍历时的值</span><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然了，在ES6中，引入箭头函数的写法，语法类似java中lambda表达式，修改上述代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;) <br></code></pre></td></tr></table></figure><p>浏览器输出结果如下：注意的是，没有元素的内容是不会输出的，因为forEach只会遍历有值的元素 </p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668592407223.png" alt="1668592407223">  </p></li><li><p>push()函数</p><p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//push: 添加元素到数组末尾</span><br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><p>浏览器输出结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668593799333.png" alt="1668593799333"> </p></li><li><p>splice()函数</p><p>splice()函数用来数组中的元素，函数中填入2个参数。</p><p>参数1：表示从哪个索引位置删除</p><p>参数2：表示删除元素的个数</p><p>如下代码表示：从索引2的位置开始删，删除2个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//splice: 删除元素</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><p>浏览器执行效果如下：元素3和4被删除了，元素3是索引2</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668594075039.png" alt="1668594075039"></p></li></ul><p>Array数组的完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-Array<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义数组</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var arr = new Array(1,2,3,4);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var arr = [1,2,3,4];</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr[0]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr[1]);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//特点: 长度可变 类型可变</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var arr = [1,2,3,4];</span></span><br><span class="language-javascript">    <span class="hljs-comment">// arr[10] = 50;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr[10]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr[9]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr[8]);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// arr[9] = &quot;A&quot;;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// arr[8] = true;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];</span><br><span class="language-javascript">    arr[<span class="hljs-number">10</span>] = <span class="hljs-number">50</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// for (let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(arr[i]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(&quot;==================&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//forEach: 遍历数组中有值的元素</span></span><br><span class="language-javascript">    <span class="hljs-comment">// arr.forEach(function(e)&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(e);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;)</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //ES6 箭头函数: (...) =&gt; &#123;...&#125; -- 简化函数定义</span></span><br><span class="language-javascript">    <span class="hljs-comment">// arr.forEach((e) =&gt; &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(e);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;) </span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//push: 添加元素到数组末尾</span></span><br><span class="language-javascript">    <span class="hljs-comment">// arr.push(7,8,9);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(arr);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//splice: 删除元素</span></span><br><span class="language-javascript">    arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-5-1-2-String对象"><a href="#1-5-1-2-String对象" class="headerlink" title="1.5.1.2 String对象"></a>1.5.1.2 String对象</h4><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><p>String对象的创建方式有2种：</p><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;…&quot;</span>) ; <span class="hljs-comment">//方式一</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello String&quot;</span>);<br></code></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-string">&quot;…&quot;</span> ; <span class="hljs-comment">//方式二</span><br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Hello String&#x27;</span>;<br></code></pre></td></tr></table></figure><p>按照上述的格式，在VS Code中创建为名03. JS-对象-String.html的文件，编写代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建字符串对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">//var str = new String(&quot;Hello String&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;  Hello String    &quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器控制台输出结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668595022160.png" alt="1668595022160"> </p><h5 id="属性和方法-1"><a href="#属性和方法-1" class="headerlink" title="属性和方法"></a>属性和方法</h5><p>String对象也提供了一些常用的属性和方法，如下表格所示：</p><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><ul><li><p>length属性：</p><p>length属性可以用于返回字符串的长度，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//length</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>);<br></code></pre></td></tr></table></figure></li><li><p>charAt()函数：</p><p>charAt()函数用于返回在指定索引位置的字符，函数的参数就是索引。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure></li><li><p>indexOf()函数</p><p>indexOf()函数用于检索指定内容在字符串中的索引位置的，返回值是索引，参数是指定的内容。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lo&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>trim()函数</p><p>trim()函数用于去除字符串两边的空格的。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s = str.<span class="hljs-title function_">trim</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">length</span>);<br></code></pre></td></tr></table></figure></li><li><p>substring()函数</p><p>substring()函数用于截取字符串的，函数有2个参数。</p><p>参数1：表示从那个索引位置开始截取。包含</p><p>参数2：表示到那个索引位置结束。不包含</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure></li></ul><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-String<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//创建字符串对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">//var str = new String(&quot;Hello String&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;  Hello String    &quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//length</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//charAt</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">4</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//indexOf</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;lo&quot;</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//trim</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> s = str.<span class="hljs-title function_">trim</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-property">length</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//substring(start,end) --- 开始索引, 结束索引 (含头不含尾)</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>));</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器执行效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668595450181.png" alt="1668595450181"> </p><h4 id="1-5-1-3-JSON对象"><a href="#1-5-1-3-JSON对象" class="headerlink" title="1.5.1.3 JSON对象"></a>1.5.1.3 JSON对象</h4><h5 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h5><p>在 JavaScript 中自定义对象特别简单，其语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 对象名 = &#123;<br>    属性名<span class="hljs-number">1</span>: 属性值<span class="hljs-number">1</span>, <br>    属性名<span class="hljs-number">2</span>: 属性值<span class="hljs-number">2</span>,<br>    属性名<span class="hljs-number">3</span>: 属性值<span class="hljs-number">3</span>,<br>    函数名称: <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>我们可以通过如下语法调用属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.属性名<br></code></pre></td></tr></table></figure><p>通过如下语法调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">对象名.函数名()<br></code></pre></td></tr></table></figure><p>接下来，我们再VS Code中创建名为04. JS-对象-JSON.html的文件演示自定义对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//自定义对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> user = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">eat</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;用膳~&quot;</span>);</span><br><span class="language-javascript">         &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">    user.<span class="hljs-title function_">eat</span>();</span><br><span class="language-javascript">&lt;script&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器控制台结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668596039535.png" alt="1668596039535"></p><p>其中上述函数定义的语法可以简化成如下格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;male&quot;</span>,<br>    <span class="hljs-comment">// eat: function()&#123;</span><br>    <span class="hljs-comment">//      console.log(&quot;用膳~&quot;);</span><br>    <span class="hljs-comment">//  &#125;</span><br>    <span class="hljs-title function_">eat</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;用膳~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="json对象"><a href="#json对象" class="headerlink" title="json对象"></a>json对象</h5><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-string">&quot;key&quot;</span>:value,<br>    <span class="hljs-string">&quot;key&quot;</span>:value,<br>    <span class="hljs-string">&quot;key&quot;</span>:value<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型。</strong></p><p>例如我们可以直接百度搜索“json在线解析”，随便挑一个进入，然后编写内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;李传播&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668596701343.png" alt="1668596701343"> </p><p>但是当我们将双引号切换成单引号，再次校验，则报错，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668596798551.png" alt="1668596798551"></p><p>那么json这种数据格式的文本到底应用在企业开发的什么地方呢？– 经常用来作为前后台交互的数据载体</p><p>如下图所示：前后台交互时，我们需要传输数据，但是java中的对象我们该怎么去描述呢？我们可以使用如图所示的xml格式，可以清晰的描述java中需要传递给前端的java对象。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668597000013.png" alt="1668597000013"> </p><p>但是xml格式存在如下问题：</p><ul><li>标签需要编写双份，占用带宽，浪费资源</li><li>解析繁琐</li></ul><p>所以我们可以使用json来替代，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668597176685.png" alt="1668597176685"> </p><p>接下来我们通过代码来演示json对象：注释掉之前的代码，编写代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jsonstr = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;<br><span class="hljs-title function_">alert</span>(jsonstr.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>浏览器输出结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668597352197.png" alt="1668597352197"> </p><p>为什么呢？<strong>因为上述是一个json字符串，不是json对象，所以我们需要借助如下函数来进行json字符串和json对象的转换。</strong>添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonstr);<br><span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>此时浏览器输出结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668597489911.png" alt="1668597489911"> </p><p>当然了，我们也可以通过如下函数将json对象再次转换成json字符串。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br></code></pre></td></tr></table></figure><p>浏览器输出结果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668597624263.png" alt="1668597624263"> </p><p>整体全部代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-JSON<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//自定义对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var user = &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     name: &quot;Tom&quot;,</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     age: 10,</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     gender: &quot;male&quot;,</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     // eat: function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     //      console.log(&quot;用膳~&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     //  &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     eat()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         console.log(&quot;用膳~&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// console.log(user.name);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// user.eat();</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //定义json</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> jsonstr = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//alert(jsonstr.name);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //json字符串--js对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonstr);</span><br><span class="language-javascript">    <span class="hljs-comment">//alert(obj.name);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //js对象--json字符串</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-2-BOM对象"><a href="#1-5-2-BOM对象" class="headerlink" title="1.5.2 BOM对象"></a>1.5.2 BOM对象</h3><p>接下来我们学习BOM对象，BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。例如：我们想要将浏览器的地址改为<code>http://www.baidu.com</code>,我们就可以通过BOM中提供的location对象的href属性来完成，代码如下：<code>location.href=&#39;http://www.baidu.com&#39;</code></p><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><p>上述5个对象与浏览器各组成对应的关系如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/image-20210815194911914.png"> </p><p>对于上述5个对象，我们重点学习的是Window对象、Location对象这2个。</p><h4 id="1-5-2-1-Window对象"><a href="#1-5-2-1-Window对象" class="headerlink" title="1.5.2.1 Window对象"></a>1.5.2.1 Window对象</h4><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.例如：我们之前学习的alert()函数其实是属于window对象的,其完整的代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">window</span>.alert(<span class="hljs-string">&#x27;hello&#x27;</span>);<br></code></pre></td></tr></table></figure><p>其可以省略window.  所以可以简写成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#x27;hello&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><p>所以对于window对象的属性和方法，我们都是采用简写的方式。window提供了很多属性和方法，下表列出了常用属性和方法</p><p>window对象提供了获取其他BOM对象的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>也就是说我们要使用location对象，只需要通过代码<code>window.location</code>或者简写<code>location</code>即可使用</p><p>window也提供了一些常用的函数，如下表格所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><p>接下来，我们通过VS Code中创建名为05. JS-对象-BOM.html文件来编写代码来演示上述函数：</p><ul><li><p>alert()函数：弹出警告框，函数的内容就是警告框的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//window对象是全局对象，window对象的属性和方法在调用时可以省略window.</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello BOM&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello BOM Window&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，依次弹框，此处只截图一张</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668794735581.png" alt="1668794735581"> </p></li><li><p>confirm()函数：弹出确认框，并且提供用户2个按钮，分别是确认和取消。</p><p>添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;您确认删除该记录吗?&quot;</span>);<br></code></pre></td></tr></table></figure><p>浏览器打开效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668794898891.png" alt="1668794898891"> </p><p>但是我们怎么知道用户点击了确认还是取消呢？所以这个函数有一个返回值，当用户点击确认时，返回true，点击取消时，返回false。我们根据返回值来决定是否执行后续操作。修改代码如下：再次运行，可以查看返回值true或者false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;您确认删除该记录吗?&quot;</span>);<br><span class="hljs-title function_">alert</span>(flag);<br></code></pre></td></tr></table></figure></li><li><p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p><p>fn:函数，需要周期性执行的功能代码</p><p>毫秒值：间隔时间</p><p>注释掉之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定时器 - setInterval -- 周期性的执行某一个函数</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     i++;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;定时器执行了&quot;</span>+i+<span class="hljs-string">&quot;次&quot;</span>);<br>&#125;,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>刷新页面，浏览器每个一段时间都会在控制台输出，结果如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668795435780.png" alt="1668795435780"> </p></li><li><p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p><p>注释掉之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定时器 - setTimeout -- 延迟指定时间执行一次 </span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;JS&quot;</span>);<br>&#125;,<span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>浏览器打开，3s后弹框，关闭弹框，发现再也不会弹框了。</p></li></ul><h4 id="1-5-2-2-Location对象"><a href="#1-5-2-2-Location对象" class="headerlink" title="1.5.2.2 Location对象"></a>1.5.2.2 Location对象</h4><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//获取浏览器地址栏信息</span><br><span class="hljs-title function_">alert</span>(location.<span class="hljs-property">href</span>);<br><span class="hljs-comment">//设置浏览器地址栏信息</span><br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.itcast.cn&quot;</span>;<br></code></pre></td></tr></table></figure><p>浏览器效果如下：首先弹框展示浏览器地址栏信息，</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668796236628.png" alt="1668796236628"> </p><p>然后点击确定后，因为我们设置了地址栏信息，所以浏览器跳转到传智首页</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-BOM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//获取</span></span><br><span class="language-javascript">    <span class="hljs-comment">// window.alert(&quot;Hello BOM&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(&quot;Hello BOM Window&quot;);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方法</span></span><br><span class="language-javascript">    <span class="hljs-comment">//confirm - 对话框 -- 确认: true , 取消: false</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var flag = confirm(&quot;您确认删除该记录吗?&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(flag);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定时器 - setInterval -- 周期性的执行某一个函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var i = 0;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// setInterval(function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     i++;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     console.log(&quot;定时器执行了&quot;+i+&quot;次&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;,2000);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定时器 - setTimeout -- 延迟指定时间执行一次 </span></span><br><span class="language-javascript">    <span class="hljs-comment">// setTimeout(function()&#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     alert(&quot;JS&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;,3000);</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//location</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(location.<span class="hljs-property">href</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.itcast.cn&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-3-DOM对象"><a href="#1-5-3-DOM对象" class="headerlink" title="1.5.3 DOM对象"></a>1.5.3 DOM对象</h3><h4 id="1-5-3-1-DOM介绍"><a href="#1-5-3-1-DOM介绍" class="headerlink" title="1.5.3.1 DOM介绍"></a>1.5.3.1 DOM介绍</h4><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668796698067.png" alt="1668796698067"> </p><p>那么我们学习DOM技术有什么用呢？主要作用如下：</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p>总而达到动态改变页面效果目的，具体我们可以查看代码中提供的06. JS-对象-DOM-演示.html来体会DOM的效果。</p><h4 id="1-5-3-2-获取DOM对象"><a href="#1-5-3-2-获取DOM对象" class="headerlink" title="1.5.3.2 获取DOM对象"></a>1.5.3.2 获取DOM对象</h4><p>我们知道DOM的作用是通过修改HTML元素的内容和样式等来实现页面的各种动态效果，但是我们要操作DOM对象的前提是先获取元素对象，然后才能操作。所以学习DOM,主要的核心就是学习如下2点：</p><ul><li>如何获取DOM中的元素对象（Element对象 ，也就是标签）</li><li>如何操作Element对象的属性,也就是标签的属性。</li></ul><p>接下来我们先来学习如何获取DOM中的元素对象。</p><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><p>接下来我们通过VS Code中创建名为07. JS-对象-DOM-获取元素.html的文件来演示上述api，首先在准备如下页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-DOM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>document.getElementById()： 根据标签的id属性获取标签对象，id是唯一的，所以获取到是单个标签对象。</p><p>添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//1. 获取Element元素</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//1.1 获取元素-根据ID获取</span></span><br><span class="language-javascript"> <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);</span><br><span class="language-javascript"> <span class="hljs-title function_">alert</span>(img);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，效果如图所示：从弹出的结果能够看出，这是一个图片标签对象</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668798266255.png" alt="1668798266255"> </p></li><li><p>document.getElementsByTagName() :  根据标签的名字获取标签对象，同名的标签有很多，所以返回值是数组。</p><p>添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.2 获取元素-根据标签获取 - div</span><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>     <span class="hljs-title function_">alert</span>(divs[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器输出2次如下所示的弹框</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668799227223.png" alt="1668799227223"> </p></li><li><p>document.getElementsByName() ：根据标签的name的属性值获取标签对象，name属性值可以重复，所以返回值是一个数组。</p><p>添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.3 获取元素-根据name属性获取</span><br><span class="hljs-keyword">var</span> ins = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;hobby&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ins.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-title function_">alert</span>(ins[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器会有3次如下图所示的弹框：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668799393592.png" alt="1668799393592">  </p></li><li><p>document.getElementsByClassName() : 根据标签的class属性值获取标签对象，class属性值也可以重复，返回值是数组。</p><p>添加如下图所示的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.4 获取元素-根据class属性获取</span><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;cls&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>     <span class="hljs-title function_">alert</span>(divs[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器会弹框2次，都是div标签对象</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668799564602.png" alt="1668799564602"> </p></li><li><p>操作属性</p><p>那么获取到标签了，我们如何操作标签的属性呢？通过查询文档资料，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668800047162.png" alt="1668800047162"> </p><p>得出我们可以通过div标签对象的innerHTML属性来修改标签的内容。此时我们想把页面中的<strong>传智教育替换成传智教育666</strong>，所以要获取2个div中的第一个，所以可以通过下标0获取数组中的第一个div，注释之前的代码，编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;cls&#x27;</span>);<br><span class="hljs-keyword">var</span> div1 = divs[<span class="hljs-number">0</span>];<br><br>div1.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;传智教育666&quot;</span>;<br></code></pre></td></tr></table></figure><p>浏览器刷新页面，展示效果如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668800387791.png" alt="1668800387791"> </p><p>发现页面内容变成了传智教育666</p></li></ul><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-DOM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 获取Element元素</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.1 获取元素-根据ID获取</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var img = document.getElementById(&#x27;h1&#x27;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// alert(img);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.2 获取元素-根据标签获取 - div</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var divs = document.getElementsByTagName(&#x27;div&#x27;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     alert(divs[i]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.3 获取元素-根据name属性获取</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var ins = document.getElementsByName(&#x27;hobby&#x27;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// for (let i = 0; i &lt; ins.length; i++) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     alert(ins[i]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1.4 获取元素-根据class属性获取</span></span><br><span class="language-javascript">    <span class="hljs-comment">// var divs = document.getElementsByClassName(&#x27;cls&#x27;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     alert(divs[i]);</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//2. 查询参考手册, 属性、方法</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;cls&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> div1 = divs[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    div1.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;传智教育666&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-5-4-案例"><a href="#1-5-4-案例" class="headerlink" title="1.5.4 案例"></a>1.5.4 案例</h3><h4 id="1-5-4-1-需求说明"><a href="#1-5-4-1-需求说明" class="headerlink" title="1.5.4.1 需求说明"></a>1.5.4.1 需求说明</h4><p>鲁迅说的好，光说不练假把式,光练不说傻把式。所以接下来我们需要通过案例来加强对于上述DOM知识的掌握。需求如下3个：</p><ul><li>点亮灯泡</li><li>将所有的div标签的标签体内容后面加上：very good</li><li>使所有的复选框呈现被选中的状态</li></ul><p>效果如下所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668800646200.png" alt="1668800646200"> </p><h4 id="1-5-4-2-资料准备"><a href="#1-5-4-2-资料准备" class="headerlink" title="1.5.4.2 资料准备"></a>1.5.4.2 资料准备</h4><p>在JS目录下，也就是用于存放html文件的同级创建img文件下，然后将<code>资料/图片素材</code>中提供的2张图片拷贝到img文件夹中，最终整体结果如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668801302139.png" alt="1668801302139"> </p><p>在VS Code中创建名为08. JS-对象-DOM-案例.html的文件，然后准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-DOM-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开此时效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668800839720.png" alt="1668800839720"> </p><h4 id="1-5-4-3-需求1"><a href="#1-5-4-3-需求1" class="headerlink" title="1.5.4.3 需求1"></a>1.5.4.3 需求1</h4><ul><li><p>需求</p><p>点亮灯泡</p></li><li><p>分析</p><p>此时我们需要把灯泡点亮，其实就是换一张图片。那么我们需要切换图片，就需要操作图片的src属性。要操作图片的src属性，就需要先来获取img标签对象。</p></li><li><p>步骤</p><ul><li>首先获取img标签对象</li><li>然后修改img标签对象的src属性值，进行图片的切换</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 点亮灯泡 : src 属性值</span><br><span class="hljs-comment">//首先获取img标签对象</span><br><span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);<br><span class="hljs-comment">//然后修改img标签对象的src属性值，进行图片的切换</span><br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/on.gif&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><p>浏览器打开，效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668801541168.png" alt="1668801541168"> </p><h4 id="1-5-4-4-需求2"><a href="#1-5-4-4-需求2" class="headerlink" title="1.5.4.4 需求2"></a>1.5.4.4 需求2</h4><ul><li><p>需求</p><p>将所有的div标签的标签体内容后面加上：very good  </p><p>并且very good是红色字体</p></li><li><p>分析</p><p>我们需要在原有内容后面追加红色的very good.所以我们首先需要获取原有内容，然后再进行内容的追加。但是如何保证very good是红色的呢？所以我们可以通过之前html中学过的&lt;font&gt;标签和属性来完整。如何进行内容的替换呢？之前我们学习过innerHTML属性。需要替换2个div的内容，所以我们需要获取2个div，并且遍历进行替换。</p></li><li><p>步骤</p><ul><li>通过标签的名字div获取所有的div标签</li><li>遍历所有的div标签</li><li>获取div标签的原有内容，然后追加&lt;font color&#x3D;’red’&gt;very good&lt;&#x2F;font&gt;,并且替原内容</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//2. 将所有div标签的内容后面加上: very good (红色字体) -- &lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;</span><br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> div = divs[i];<br>    div.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;very good&lt;/font&gt;&quot;</span>; <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>浏览器打开效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668801991368.png" alt="1668801991368"> </p><h4 id="1-5-4-5-需求3"><a href="#1-5-4-5-需求3" class="headerlink" title="1.5.4.5 需求3"></a>1.5.4.5 需求3</h4><ul><li><p>需求</p><p>使所有的复选框呈现被选中的状态</p></li><li><p>分析</p><p>要让复选框处于选中状态，那么什么属性或者方法可以使复选框选中？可以查询资料得出checkbox标签对象的checked属性设置为true，可以改变checkbox为选中状态。那么需要设置所有的checkbox，那么我们需要获取所有的checkbox并且遍历</p></li><li><p>步骤</p><ul><li>可以通过name属性值获取所有的checkbox标签</li><li>遍历所有的checkbox标签，</li><li>设置每个checkbox标签的</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// //3. 使所有的复选框呈现选中状态</span><br><span class="hljs-keyword">var</span> ins = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;hobby&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ins.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">const</span> check = ins[i];<br>check.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<span class="hljs-comment">//选中</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>浏览器刷新，效果如图所示:</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668802645347.png" alt="1668802645347"> </p><h4 id="1-5-4-6-完整代码"><a href="#1-5-4-6-完整代码" class="headerlink" title="1.5.4.6 完整代码"></a>1.5.4.6 完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-对象-DOM-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;h1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 点亮灯泡 : src 属性值</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);</span><br><span class="language-javascript">    img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/on.gif&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//2. 将所有div标签的内容后面加上: very good (红色字体) -- &lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; divs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> div = divs[i];</span><br><span class="language-javascript">        div.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;&lt;font color=&#x27;red&#x27;&gt;very good&lt;/font&gt;&quot;</span>; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// //3. 使所有的复选框呈现选中状态</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ins = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;hobby&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; ins.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> check = ins[i];</span><br><span class="language-javascript">        check.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<span class="hljs-comment">//选中</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-6-JavaScript事件"><a href="#1-6-JavaScript事件" class="headerlink" title="1.6 JavaScript事件"></a>1.6 JavaScript事件</h2><h3 id="1-6-1-事件介绍"><a href="#1-6-1-事件介绍" class="headerlink" title="1.6.1 事件介绍"></a>1.6.1 事件介绍</h3><p>如下图所示的百度注册页面，当我们用户输入完内容，百度可以自动的提示我们用户名已经存在还是可以使用。那么百度是怎么知道我们用户名输入完了呢？这就需要用到JavaScript中的事件了。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668802830796.png" alt="1668802830796"> </p><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p><ul><li>按钮被点击</li><li>鼠标移到元素上</li><li>输入框失去焦点</li><li>……..</li></ul><p>而我们可以给这些事件绑定函数，当事件触发时，可以自动的完成对应的功能。这就是事件监听。例如：对于我们所说的百度注册页面，我们给用户名输入框的失去焦点事件绑定函数，当我们用户输入完内容，在标签外点击了鼠标，对于用户名输入框来说，失去焦点，然后执行绑定的函数，函数进行用户名内容的校验等操作。JavaScript事件是js非常重要的一部分，接下来我们进行事件的学习。那么我们对于JavaScript事件需要学习哪些内容呢？我们得知道有哪些常用事件，然后我们得学会如何给事件绑定函数。所以主要围绕2点来学习：</p><ul><li>事件绑定</li><li>常用事件</li></ul><h3 id="1-6-2-事件绑定"><a href="#1-6-2-事件绑定" class="headerlink" title="1.6.2 事件绑定"></a>1.6.2 事件绑定</h3><p>JavaScript对于事件的绑定提供了2种方式：</p><ul><li><p>方式1：通过html标签中的事件属性进行绑定</p><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p><p>在VS Code中创建名为09. JS-事件-事件绑定.html，添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>很明显没有on函数，所以我们需要创建该函数，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮1被点击了...&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，然后点击按钮，弹框如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668804375833.png" alt="1668804375833"> </p></li><li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。此时我们再次添加一个按钮，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以先通过id属性获取按钮对象，然后操作对象的onclick属性来绑定事件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn2&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮2被点击了...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器刷新页面，点击第二个按钮，弹框如下：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668804696373.png" alt="1668804696373"> </p><p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-事件-事件绑定<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;事件绑定2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮1被点击了...&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn2&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;按钮2被点击了...&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-6-3-常见事件"><a href="#1-6-3-常见事件" class="headerlink" title="1.6.3 常见事件"></a>1.6.3 常见事件</h3><p>上面案例中使用到了 <code>onclick</code> 事件属性，那都有哪些事件属性供我们使用呢？下面就给大家列举一些比较常用的事件属性</p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><p>在代码中提供了10. JS-事件-常见事件.html的文件，我们可以通过浏览器打开来观察几个常用事件的具体效果：</p><ul><li><p>onfocus:获取焦点事件，鼠标点击输入框，输入框中光标一闪一闪的，就是输入框获取焦点了</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668805346551.png" alt="1668805346551"> </p></li><li><p>onblur:失去焦点事件，前提是输入框获取焦点的状态下，在输入框之外的地方点击，光标从输入框中消失了，这就是失去焦点。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668805498416.png" alt="1668805498416"></p></li></ul><p>其他事件的效果，同学们可以通过提供好的代码去演示，亲身体会事件在什么时候触发。</p><h3 id="1-6-4-案例"><a href="#1-6-4-案例" class="headerlink" title="1.6.4 案例"></a>1.6.4 案例</h3><h4 id="1-6-4-1-需求说明"><a href="#1-6-4-1-需求说明" class="headerlink" title="1.6.4.1 需求说明"></a>1.6.4.1 需求说明</h4><p>接下来我们通过案例来加强所学js知识点的掌握。</p><p>需求如下3个：</p><ol><li>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</li><li>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</li><li>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</li></ol><p>效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668806049390.png" alt="1668806049390"> </p><h4 id="1-6-4-2-资料准备"><a href="#1-6-4-2-资料准备" class="headerlink" title="1.6.4.2 资料准备"></a>1.6.4.2 资料准备</h4><p>在VS  Code中创建名为11. JS-事件-案例.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-事件-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点亮&quot;</span> &gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;熄灭&quot;</span> &gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ITCAST&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全选&quot;</span> &gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668806362090.png" alt="1668806362090"> </p><h4 id="1-6-4-3-需求1"><a href="#1-6-4-3-需求1" class="headerlink" title="1.6.4.3 需求1"></a>1.6.4.3 需求1</h4><ul><li><p>需求：</p><p>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</p></li><li><p>分析：</p><p>点击按钮的时候触发，所以我们需要绑定单击事件。不管是点亮还是熄灭，都是图片的变化，所以我们需要修改图片。但是修改图片我们还需要先获取标签图片标签对象。</p></li><li><p>步骤：</p><ul><li>首先给点亮按钮和熄灭按钮都绑定单击事件。分别绑定函数on()和off（）</li><li>然后在js中定义on()和off()函数</li><li>on()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换点亮的图片</li><li>off()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换熄灭的图片</li></ul></li><li><p>代码实现：</p><p>事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点亮&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;熄灭&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>on()和off()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 点击 &quot;点亮&quot; 按钮, 点亮灯泡; 点击 &quot;熄灭&quot; 按钮, 熄灭灯泡; -- onclick</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//a. 获取img元素对象</span><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br>    <span class="hljs-comment">//b. 设置src属性</span><br>    img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/on.gif&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//a. 获取img元素对象</span><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);<br>    <span class="hljs-comment">//b. 设置src属性</span><br>    img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/off.gif&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-4-需求2"><a href="#1-6-4-4-需求2" class="headerlink" title="1.6.4.4 需求2"></a>1.6.4.4 需求2</h4><ul><li><p>需求：</p><p>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</p></li><li><p>分析：</p><p>聚焦和失焦的时候完成功能，所以我们需要给input标签绑定onfocus和onblur事件；我们要切换大小写，那么我们可定要获取原本输入框的内容，通过查询资料，需要使用input标签对象的value属性，然后进行大小写切换；切换完成我们需要重新填入，所以还是通过value属性来设置input标签输入框的内容</p></li><li><p>步骤:</p><ul><li>给input标签的onfocus和onblur事件分别绑定lower()和upper()函数</li><li>然后在js中定义lower()和upper()函数</li><li>对于lower()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toLowerCase()函数来进行小写转换</li><li>对于upper()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toupperCase()函数来进行大写转换</li></ul></li><li><p>代码实现：、</p><p>事件绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ITCAST&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;lower()&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;upper()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>lower()和upper()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">lower</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//小写</span><br>    <span class="hljs-comment">//a. 获取输入框元素对象</span><br>    <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br><br>    <span class="hljs-comment">//b. 将值转为小写</span><br>    input.<span class="hljs-property">value</span> = input.<span class="hljs-property">value</span>.<span class="hljs-title function_">toLowerCase</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">upper</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//大写</span><br>    <span class="hljs-comment">//a. 获取输入框元素对象</span><br>    <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);<br><br>    <span class="hljs-comment">//b. 将值转为大写</span><br>    input.<span class="hljs-property">value</span> = input.<span class="hljs-property">value</span>.<span class="hljs-title function_">toUpperCase</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-5-需求3"><a href="#1-6-4-5-需求3" class="headerlink" title="1.6.4.5 需求3"></a>1.6.4.5 需求3</h4><ul><li><p>需求：</p><p>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</p></li><li><p>分析：</p><p>点击按钮完成功能，所以我们需要给2个按钮绑定单击事件；我们需要设置所有复选框的状态，通过我们之前的案例，我们知道，我们需要获取所有的复选框，然后遍历，可以通过设置checked属性为true，来设置复选框为选中；那么反之，设置checked属性为false，来设置复选框为未选中。</p></li><li><p>步骤：</p><ul><li>给全选和反选按钮绑定单击事件，分别绑定函数checkAll()和reverse()</li><li>在js中定义checkAll()和reverse()函数</li><li>对于checkAll()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为true即可</li><li>对于reverse()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为false即可</li></ul></li><li><p>代码实现：</p><p>事件绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全选&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;checkAll()&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reverse()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>checkAll()和reverse()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//3. 点击 &quot;全选&quot; 按钮使所有的复选框呈现选中状态 ; 点击 &quot;反选&quot; 按钮使所有的复选框呈现取消勾选的状态 ; </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAll</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//a. 获取所有复选框元素对象</span><br>    <span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>    <span class="hljs-comment">//b. 设置选中状态</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> element = hobbys[i];<br>        element.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br>    <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//a. 获取所有复选框元素对象</span><br>    <span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>    <span class="hljs-comment">//b. 设置未选中状态</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">const</span> element = hobbys[i];<br>        element.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-6-完整代码"><a href="#1-6-4-6-完整代码" class="headerlink" title="1.6.4.6 完整代码"></a>1.6.4.6 完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JS-事件-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;light&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点亮&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;熄灭&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ITCAST&quot;</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;lower()&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;upper()&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 电影<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 旅游<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span> 游戏<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全选&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;checkAll()&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;reverse()&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//1. 点击 &quot;点亮&quot; 按钮, 点亮灯泡; 点击 &quot;熄灭&quot; 按钮, 熄灭灯泡; -- onclick</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">on</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取img元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 设置src属性</span></span><br><span class="language-javascript">        img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/on.gif&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">off</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取img元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;light&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 设置src属性</span></span><br><span class="language-javascript">        img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img/off.gif&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">lower</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//小写</span></span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取输入框元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 将值转为小写</span></span><br><span class="language-javascript">        input.<span class="hljs-property">value</span> = input.<span class="hljs-property">value</span>.<span class="hljs-title function_">toLowerCase</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">upper</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//大写</span></span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取输入框元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;name&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 将值转为大写</span></span><br><span class="language-javascript">        input.<span class="hljs-property">value</span> = input.<span class="hljs-property">value</span>.<span class="hljs-title function_">toUpperCase</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//3. 点击 &quot;全选&quot; 按钮使所有的复选框呈现选中状态 ; 点击 &quot;反选&quot; 按钮使所有的复选框呈现取消勾选的状态 ; -- onclick</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取所有复选框元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 设置选中状态</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> element = hobbys[i];</span><br><span class="language-javascript">            element.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//a. 获取所有复选框元素对象</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hobbys = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;hobby&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//b. 设置未选中状态</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; hobbys.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> element = hobbys[i];</span><br><span class="language-javascript">            element.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-Vue"><a href="#2-Vue" class="headerlink" title="2 Vue"></a>2 Vue</h1><h2 id="2-1-Vue概述"><a href="#2-1-Vue概述" class="headerlink" title="2.1 Vue概述"></a>2.1 Vue概述</h2><p>通过我们学习的html+css+js已经能够开发美观的页面了，但是开发的效率还有待提高，那么如何提高呢？我们先来分析下页面的组成。一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，那么意味着我们需要将后台获取到的数据呈现到页面上，很明显， 这就需要我们使用DOM操作。正因为这种开发流程，所以我们引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong>，即让我们开发者更加关注数据，而非数据绑定到视图这种机械化的操作。那么具体什么是MVVM思想呢？</p><p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul><p>如图所示就是MVVM开发思想的含义：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668857055058.png" alt="1668857055058"> </p><p>基于上述的MVVM思想，其中的Model我们可以通过Ajax来发起请求从后台获取;对于View部分，我们将来会学习一款ElementUI框架来替代HTML+CSS来更加方便的搭建View;而今天我们要学习的就是侧重于ViewModel部分开发的vue前端框架，用来替代JavaScript的DOM操作，让数据展示到视图的代码开发变得更加的简单。可以简单到什么程度呢？可以参考下图对比：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668858213508.png" alt="1668858213508"> </p><p>在更加复杂的dom操作中，vue只会变得更加的简单！在上述的代码中，我们看不到之前的DOM操作，因为vue全部帮我们封装好了。</p><p>接下来我们来介绍一下vue。</p><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>框架即是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。</p><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h2><p>接下来我们通过一个vue的快速入门案例，来体验一下vue。</p><p>第一步：在VS Code中创建名为12. Vue-快速入门.html的文件，并且在html文件同级创建js目录，将<strong>资料&#x2F;vue.js文件</strong>目录下得vue.js拷贝到js目录，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668858952627.png" alt="1668858952627"> </p><p>第二步：然后编写&lt;script&gt;标签来引入vue.js文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第三步：在js代码区域定义vue对象,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello Vue&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el:  用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。这个我们在后面就会用到</li></ul><p>第四步：在html区域编写视图，其中&#123;&#123;&#125;&#125;是插值表达式，用来将vue对象中定义的model展示到页面上的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668859214102.png" alt="1668859214102"> </p><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>        &#123;&#123;message&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello Vue&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-Vue指令"><a href="#2-3-Vue指令" class="headerlink" title="2.3 Vue指令"></a>2.3 Vue指令</h2><p>在上述的快速入门中，我们发现了html中输入了一个没有学过的属性<code>v-model</code>，这个就是vue的<strong>指令</strong>。</p><p><strong>指令：</strong>HTML 标签上带有 v- 前缀的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</p><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h3 id="2-3-1-v-bind和v-model"><a href="#2-3-1-v-bind和v-model" class="headerlink" title="2.3.1 v-bind和v-model"></a>2.3.1 v-bind和v-model</h3><p>我们首先来学习v-bind指令和v-model指令。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr></tbody></table><ul><li><p>v-bind:  为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p><p>接下来我们通过代码来演示。</p><p>首先我们在VS Code中创建名为13. Vue-指令-v-bind和v-model.html的文件，然后准备好如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-bind<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>链接1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>链接2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> &gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述的代码中，我们需要给&lt;a&gt;标签的href属性赋值，并且值应该来自于vue对象的数据模型中的url变量。所以编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上述的代码中，v-bind指令是可以省略的，但是:不能省略，所以第二个超链接的代码编写如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，2个超链接都可以点击，然后跳转到百度去！效果如图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668860425429.png" alt="1668860425429"> </p><p><strong>注意：html属性前面有:表示采用的vue的属性绑定！</strong></p></li><li><p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p><ul><li>vue对象的data属性中的数据变化，视图展示会一起变化</li><li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li></ul><p>data属性中数据变化，我们知道可以通过赋值来改变，但是视图数据为什么会发生变化呢？<strong>只有表单项标签！所以双向绑定一定是使用在表单项标签上的</strong>。编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开浏览器，我们修改表单项标签，发现vue对象data中的数据也发生了变化，如下图所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668861009068.png" alt="1668861009068"> </p><p>通过上图我们发现，我们只是改变了表单数据，那么我们之前超链接的绑定的数据值也发生了变化，为什么？</p><p>就是因为我们双向绑定，在视图发生变化时，同时vue的data中的数据模型也会随着变化。那么这个在企业开发的应用场景是什么？</p><p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p><p>整体代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-bind<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-2-v-on"><a href="#2-3-2-v-on" class="headerlink" title="2.3.2 v-on"></a>2.3.2 v-on</h3><p>接下来我们学习一下v-on指令。</p><p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p><ul><li><p>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</p></li><li><p>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</p><p>例如：在js中，事件绑定demo函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;demo()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vue中，事件绑定demo函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;demo()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>接下来我们通过代码演示。</p><p>首先在VS Code中创建名为14. Vue-指令-v-on.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-on<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们需要在vue对象的methods属性中定义事件绑定时需要的handle()函数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你点我了一下...&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们给第一个按钮，通过v-on指令绑定单击事件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样，v-on也存在简写方式，即v-on: 可以替换成@，所以第二个按钮绑定单击事件的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handle()&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-on<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;handle()&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我一下&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handle()&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">handle</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;你点我了一下...&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-3-v-if和v-show"><a href="#2-3-3-v-if和v-show" class="headerlink" title="2.3.3 v-if和v-show"></a>2.3.3 v-if和v-show</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-if-else</td><td></td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr></tbody></table><p>我们直接通过代码来演示效果。在VS Code中创建名为15. Vue-指令-v-if和v-show.html的文件，提前准备好如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-if与v-show<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <br>        年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>经判定,为:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>年轻人(35及以下)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>中年人(35-60)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>老年人(60及以上)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中采用了双向绑定到age属性，意味着我们可以通过表单输入框来改变age的值。</p><p>需求是当我们改变年龄时，需要动态判断年龄的值，呈现对应的年龄的文字描述。年轻人，我们需要使用条件判断<code>age&lt;=35</code>,中年人我们需要使用条件判断<code>age&gt;35 &amp;&amp; age&lt;60</code>,其他情况是老年人。所以通过v-if指令编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>经判定,为:<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>老年人(60及以上)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开测试效果如下图：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668864281939.png" alt="1668864281939"> </p><p>v-show和v-if的作用效果是一样的，只是原理不一样。复制上述html代码，修改v-if指令为v-show指令，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>经判定,为:<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开浏览器，展示效果如下所示：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668864558419.png" alt="1668864558419"> </p><p>可以发现，浏览器呈现的效果是一样的，但是浏览器中html源码不一样。v-if指令，不满足条件的标签代码直接没了，而v-show指令中，不满足条件的代码依然存在，只是添加了css样式来控制标签不去显示。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-if与v-show<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <br>        年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>经判定,为:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>老年人(60及以上)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        年龄<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>经判定,为:<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">age</span>: <span class="hljs-number">20</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-4-v-for"><a href="#2-3-4-v-for" class="headerlink" title="2.3.4 v-for"></a>2.3.4 v-for</h3><p>v-for: 从名字我们就能看出，这个指令是用来遍历的。其语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">标签</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;变量名 in 集合模型数据&quot;</span>&gt;</span><br>    &#123;&#123;变量名&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">标签</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是：需要循环那个标签，v-for 指令就写在那个标签上。</p><p>有时我们遍历时需要使用索引，那么v-for指令遍历的语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">标签</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(变量名,索引变量) in 集合模型数据&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--索引变量是从0开始，所以要表示序号的话，需要手动的加1--&gt;</span><br>   &#123;&#123;索引变量 + 1&#125;&#125; &#123;&#123;变量名&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">标签</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来，我们再VS Code中创建名为16. Vue-指令-v-for.html的文件编写代码演示，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-for<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">addrs</span>:[<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;西安&quot;</span>, <span class="hljs-string">&quot;成都&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后分别编写2种遍历语法，来遍历数组，展示数据，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;addr in addrs&quot;</span>&gt;</span>&#123;&#123;addr&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(addr,index) in addrs&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125; : &#123;&#123;addr&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，呈现如下效果：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668866805981.png" alt="1668866805981"> </p><h3 id="2-3-5-案例"><a href="#2-3-5-案例" class="headerlink" title="2.3.5 案例"></a>2.3.5 案例</h3><ul><li><p>需求：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668868100828.png" alt="1668868100828"> </p><p>如上图所示，我们提供好了数据模型，users是数组集合，提供了多个用户信息。然后我们需要将数据以表格的形式，展示到页面上，其中，性别需要转换成中文男女，等级需要将分数数值转换成对应的等级。</p></li><li><p>分析：</p><p>首先我们肯定需要遍历数组的，所以需要使用v-for标签；然后我们每一条数据对应一行，所以v-for需要添加在tr标签上；其次我们需要将编号，所以需要使用索引的遍历语法；然后我们要将数据展示到表格的单元格中，所以我们需要使用&#123;&#123;&#125;&#125;插值表达式；最后，我们需要转换内容，所以我们需要使用v-if指令，进行条件判断和内容的转换</p></li><li><p>步骤：</p><ul><li>使用v-for的带索引方式添加到表格的&lt;tr&gt;标签上</li><li>使用&#123;&#123;&#125;&#125;插值表达式展示内容到单元格</li><li>使用索引+1来作为编号</li><li>使用v-if来判断，改变性别和等级这2列的值</li></ul></li><li><p>代码实现：</p><p>首先创建名为17. Vue-指令-案例.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>等级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">users</span>: [&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">78</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Rose&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">86</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jerry&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">90</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tony&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">52</span></span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在&lt;tr&gt;上添加v-for进行遍历，以及通过插值表达式&#123;&#123;&#125;&#125;和v-if指令来填充内容和改变内容，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,index) in users&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.gender == 1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.gender == 2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.score&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.score &gt;= 85&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;user.score &gt;= 60&quot;</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>其完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-案例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;60%&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>等级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,index) in users&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.gender == 1&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.gender == 2&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.score&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.score &gt;= 85&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;user.score &gt;= 60&quot;</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">users</span>: [&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tom&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">78</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Rose&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">86</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Jerry&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">26</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">90</span></span><br><span class="language-javascript">            &#125;,&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Tony&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">score</span>: <span class="hljs-number">52</span></span><br><span class="language-javascript">            &#125;]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-生命周期"><a href="#2-4-生命周期" class="headerlink" title="2.4 生命周期"></a>2.4 生命周期</h2><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p>下图是 Vue 官网提供的从创建 Vue 到效果 Vue 对象的整个过程及各个阶段对应的钩子函数：</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668867134683.png" alt="1668867134683"></p><p>其中我们需要重点关注的是**mounted,**其他的我们了解即可。</p><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p><p>我们在VS Code中创建名为18. Vue-生命周期.html的文件编写代码来演示效果，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue-指令-v-for<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后我们编写mounted声明周期的钩子函数，与methods同级，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//定义Vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>, <span class="hljs-comment">//vue接管区域</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">           </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">mounted</span> () &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;vue挂载完成,发送请求到服务端&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器打开，运行结果如下：我们发现，自动打印了这句话，因为页面加载完成，vue对象创建并且完成了挂在，此时自动触发mounted所绑定的钩子函数，然后自动执行，弹框。</p><p><img src="/../../assets/JavaWeb(SpringBootVue)/1668867458156.png" alt="1668867458156"> </p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>技术</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux(二)</title>
    <link href="/2024/10/22/linux/Linux2/"/>
    <url>/2024/10/22/linux/Linux2/</url>
    
    <content type="html"><![CDATA[<h2 id="第七章-磁盘分区和挂载"><a href="#第七章-磁盘分区和挂载" class="headerlink" title="第七章 磁盘分区和挂载"></a>第七章 磁盘分区和挂载</h2><p><img src="/../assets/Linux/image-20241021215343855.png" alt="image-20241021215343855"></p><h3 id="1-磁盘分区"><a href="#1-磁盘分区" class="headerlink" title="1. 磁盘分区"></a>1. 磁盘分区</h3><h4 id="1-1-磁盘分区的基本概念"><a href="#1-1-磁盘分区的基本概念" class="headerlink" title="1.1 磁盘分区的基本概念"></a>1.1 磁盘分区的基本概念</h4><p>在 Linux 中，物理硬盘可以被划分为多个逻辑分区。每个分区可以被格式化为不同的文件系统，以便存储和管理数据。分区的目的是为了更好地管理存储空间，提高数据的安全性和访问效率。</p><h4 id="1-2-常用分区类型"><a href="#1-2-常用分区类型" class="headerlink" title="1.2 常用分区类型"></a>1.2 常用分区类型</h4><ul><li><strong>主分区</strong>：最多可以有四个，适用于大多数需求。</li><li><strong>扩展分区</strong>：用于在主分区中创建更多的逻辑分区，可以包含多个逻辑分区，解决主分区数量的限制。</li><li><strong>逻辑分区</strong>：存在于扩展分区中的分区，可以根据需要创建多个逻辑分区。</li></ul><h4 id="1-3-分区工具"><a href="#1-3-分区工具" class="headerlink" title="1.3 分区工具"></a>1.3 分区工具</h4><ul><li><strong>fdisk</strong>：用于 MBR（主引导记录）分区管理的命令行工具，适用于较旧的硬盘。</li><li><strong>gdisk</strong>：用于 GPT（GUID 分区表）分区管理的工具，适用于现代硬盘。</li><li><strong>parted</strong>：支持 MBR 和 GPT 的通用分区工具，具有图形界面和命令行界面。</li></ul><h3 id="2-挂载"><a href="#2-挂载" class="headerlink" title="2. 挂载"></a>2. 挂载</h3><h4 id="2-1-挂载的基本概念"><a href="#2-1-挂载的基本概念" class="headerlink" title="2.1 挂载的基本概念"></a>2.1 挂载的基本概念</h4><p>挂载是将文件系统与一个特定的目录（挂载点）关联的过程。通过挂载，用户可以访问磁盘分区中的文件和目录。挂载点是一个空目录，表示将要访问的分区的内容。</p><h3 id="3-常用指令"><a href="#3-常用指令" class="headerlink" title="3. 常用指令"></a>3. 常用指令</h3><h4 id="3-1-查看磁盘和分区信息"><a href="#3-1-查看磁盘和分区信息" class="headerlink" title="3.1 查看磁盘和分区信息"></a>3.1 查看磁盘和分区信息</h4><ul><li><p><strong>查看分区信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>这个命令会列出所有块设备，包括磁盘和分区，输出的格式包含设备名称、大小、类型（如分区、光盘、硬盘等）、挂载点等信息。</p><p><img src="/../assets/Linux/image-20241021215447248.png" alt="image-20241021215447248"></p></li><li><p><strong>查看详细的磁盘分区信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk -l<br></code></pre></td></tr></table></figure><p>此命令将列出所有磁盘及其分区的详细信息，包括每个分区的大小、类型、文件系统等。</p></li><li><p><strong>查询系统整体磁盘使用情况</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">df-h</span><br></code></pre></td></tr></table></figure><p><img src="/../assets/Linux/image-20241022083554565.png" alt="image-20241022083554565"></p></li><li><p><strong>查询指定目录的磁盘占用情况</strong></p></li></ul>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff">du-h<br>查询指定目录的磁盘占用情况，默认为当前目录<br><span class="hljs-deletion">-s 指定目录占用大小汇总</span><br><span class="hljs-deletion">-h 带计量单位</span><br><span class="hljs-deletion">-a 含文件</span><br><span class="hljs-deletion">--max-depth=1 子目录深度</span><br><span class="hljs-deletion">-c 列出明细的同时，增加汇总值</span><br></code></pre></td></tr></table></figure><p>  <img src="/../assets/Linux/image-20241022083921077.png" alt="image-20241022083921077"></p><h4 id="3-2-分区操作"><a href="#3-2-分区操作" class="headerlink" title="3.2 分区操作"></a>3.2 分区操作</h4><ul><li><p><strong>创建新的分区</strong><br>例如，使用 <code>fdisk</code> 对 <code>/dev/sdb</code> 创建分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk /dev/sdb<br></code></pre></td></tr></table></figure><ul><li>输入 <code>n</code> 创建新分区。</li><li>输入 <code>p</code> 创建主分区或 <code>e</code> 创建扩展分区。</li><li>输入分区编号（例如 1、2、3、4）。</li><li>设置起始扇区和结束扇区，直接回车可使用默认值。</li><li>输入 <code>w</code> 保存更改并退出。</li></ul></li><li><p><strong>删除分区</strong><br>在 <code>fdisk</code> 中，输入 <code>d</code> 删除指定分区。</p></li></ul><h4 id="3-3-格式化分区"><a href="#3-3-格式化分区" class="headerlink" title="3.3 格式化分区"></a>3.3 格式化分区</h4><p>一旦分区创建完成，需要格式化分区以创建文件系统。例如，将新创建的分区 <code>/dev/sdb1</code> 格式化为 ext4 文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mkfs.ext4 /dev/sdb1<br></code></pre></td></tr></table></figure><p>这条命令会将 <code>/dev/sdb1</code> 分区格式化为 ext4 文件系统。</p><h3 id="4-挂载分区"><a href="#4-挂载分区" class="headerlink" title="4. 挂载分区"></a>4. 挂载分区</h3><h4 id="4-1-创建挂载点"><a href="#4-1-创建挂载点" class="headerlink" title="4.1 创建挂载点"></a>4.1 创建挂载点</h4><p>在挂载之前，需要创建一个挂载点，通常是一个空目录。例如，创建挂载点 <code>/mnt/mydisk</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/mydisk<br></code></pre></td></tr></table></figure><h4 id="4-2-挂载分区"><a href="#4-2-挂载分区" class="headerlink" title="4.2 挂载分区"></a>4.2 挂载分区</h4><p>使用 <code>mount</code> 命令将分区挂载到指定的挂载点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount /dev/sdb1 /mnt/mydisk<br></code></pre></td></tr></table></figure><p>这条命令将 <code>/dev/sdb1</code> 分区的文件系统挂载到 <code>/mnt/mydisk</code> 目录。</p><h4 id="4-3-查看已挂载的分区"><a href="#4-3-查看已挂载的分区" class="headerlink" title="4.3 查看已挂载的分区"></a>4.3 查看已挂载的分区</h4><p>使用 <code>df</code> 命令可以查看当前挂载的文件系统及其使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><p>输出将显示每个文件系统的大小、已用空间、可用空间和挂载点。</p><h4 id="4-4-卸载分区"><a href="#4-4-卸载分区" class="headerlink" title="4.4 卸载分区"></a>4.4 卸载分区</h4><p>如果需要卸载分区，使用 <code>umount</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt/mydisk<br></code></pre></td></tr></table></figure><p>请确保在卸载之前没有任何进程正在使用该挂载点。</p><h3 id="5-设置开机自动挂载"><a href="#5-设置开机自动挂载" class="headerlink" title="5. 设置开机自动挂载"></a>5. 设置开机自动挂载</h3><p>为了在系统启动时自动挂载分区，需要编辑 <code>/etc/fstab</code> 文件。</p><h4 id="5-1-获取分区-UUID"><a href="#5-1-获取分区-UUID" class="headerlink" title="5.1 获取分区 UUID"></a>5.1 获取分区 UUID</h4><p>可以使用 <code>blkid</code> 命令获取分区的 UUID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> blkid /dev/sdb1<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/dev/sdb1: <span class="hljs-type">UUID</span>=&quot;abc1234-56de-78fg-90hi-jklmnopqrs&quot; <span class="hljs-keyword">TYPE</span>=&quot;ext4&quot;<br></code></pre></td></tr></table></figure><h4 id="5-2-编辑-etc-fstab"><a href="#5-2-编辑-etc-fstab" class="headerlink" title="5.2 编辑 &#x2F;etc&#x2F;fstab"></a>5.2 编辑 &#x2F;etc&#x2F;fstab</h4><p>打开 <code>/etc/fstab</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/fstab<br></code></pre></td></tr></table></figure><p>添加一行以指定自动挂载：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UUID</span>=abc1234-<span class="hljs-number">56</span>de-<span class="hljs-number">78</span>fg-<span class="hljs-number">90</span>hi-jklmnopqrs /mnt/mydisk ext4 defaults <span class="hljs-number">0</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="5-3-测试-etc-fstab-配置"><a href="#5-3-测试-etc-fstab-配置" class="headerlink" title="5.3 测试 &#x2F;etc&#x2F;fstab 配置"></a>5.3 测试 &#x2F;etc&#x2F;fstab 配置</h4><p>可以使用 <code>mount -a</code> 命令测试 <code>/etc/fstab</code> 中的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -a<br></code></pre></td></tr></table></figure><p>如果没有错误信息，则说明配置正确。</p><h3 id="6-为虚拟机增加硬盘并分区的操作"><a href="#6-为虚拟机增加硬盘并分区的操作" class="headerlink" title="6. 为虚拟机增加硬盘并分区的操作"></a>6. 为虚拟机增加硬盘并分区的操作</h3><h4 id="6-1-在虚拟机中添加硬盘"><a href="#6-1-在虚拟机中添加硬盘" class="headerlink" title="6.1 在虚拟机中添加硬盘"></a>6.1 在虚拟机中添加硬盘</h4><p>以下是如何在常见的虚拟机管理器中添加新的虚拟硬盘：</p><ul><li><p><strong>VirtualBox</strong>：</p><ol><li>关闭虚拟机。</li><li>打开虚拟机设置。</li><li>选择“存储”选项。</li><li>点击“添加硬盘”图标，选择“创建新的虚拟硬盘”。</li><li>按照向导完成硬盘创建过程。</li></ol></li><li><p><strong>VMware</strong>：</p><ol><li>关闭虚拟机。</li><li>打开虚拟机设置。</li><li>在“硬件”选项卡中选择“添加”。</li><li>选择“硬盘”，然后按照向导完成硬盘添加。</li></ol></li></ul><h4 id="6-2-启动虚拟机并分区"><a href="#6-2-启动虚拟机并分区" class="headerlink" title="6.2 启动虚拟机并分区"></a>6.2 启动虚拟机并分区</h4><ol><li><p><strong>启动虚拟机</strong>。</p></li><li><p><strong>使用 lsblk 查看新的硬盘</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>新硬盘可能显示为 <code>/dev/sdb</code>（或其他名称，取决于已有的硬盘）。</p></li><li><p><strong>创建分区</strong>：<br>使用 <code>fdisk</code> 创建分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fdisk /dev/sdb<br></code></pre></td></tr></table></figure><ul><li>输入 <code>n</code> 创建新分区。</li><li>输入 <code>p</code> 创建主分区或 <code>l</code> 创建逻辑分区。</li><li>输入分区编号和起始、结束扇区（可以使用默认值）。</li><li>输入 <code>w</code> 保存并退出。</li></ul></li><li><p><strong>格式化分区</strong>：<br>格式化新创建的分区 <code>/dev/sdb1</code> 为 ext4 文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mkfs.ext4 /dev/sdb1<br></code></pre></td></tr></table></figure></li><li><p><strong>挂载分区</strong>：<br>创建挂载点并挂载分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /mnt/newdisk<br><span class="hljs-built_in">sudo</span> mount /dev/sdb1 /mnt/newdisk<br></code></pre></td></tr></table></figure></li></ol><p>在 Linux 中，磁盘分区和挂载是管理存储设备的重要操作。了解如何创建和格式化分区、挂载文件系统，以及设置自动挂载对于有效地使用 Linux 系统是至关重要的。在虚拟机中增加硬盘并进行分区的过程与在物理机上类似，只需在虚拟机管理器中完成硬件设置即可。通过这些操作，用户可以灵活地管理和使用系统的存储资源。</p><h2 id="第八章-网络配置"><a href="#第八章-网络配置" class="headerlink" title="第八章 网络配置"></a>第八章 网络配置</h2><p>原理图</p><p><img src="/../assets/Linux/image-20241021215635033.png" alt="image-20241021215635033"></p><p>个人理解：</p><blockquote><p>可以将VMnet8看作一个具有NAT功能的虚拟路由器，它负责在虚拟机和外部网络之间进行通信。具体来说：</p><p>VMnet8作为虚拟路由器：<br>在NAT模式下，VMnet8相当于虚拟机的默认网关，它为虚拟机提供访问外部网络的能力。就像物理路由器一样，它负责在虚拟网络和外部网络之间转发数据包。</p><p>NAT功能：<br>VMnet8的NAT功能会将虚拟机（例如你的ens33上的IP地址）的私有IP地址转换为宿主机的公网IP或宿主机可以与外部网络通信的IP地址。这样，虚拟机即便使用的是一个私有的IP地址（如192.168.x.x），也能通过宿主机与外部网络进行通信。</p><p>IP地址转换：<br>当虚拟机向外部网络发出请求时，VMware的NAT功能会将虚拟机的私有IP地址转换成宿主机的IP地址，从而使虚拟机能够正常访问外部网络。外部网络收到请求后，将响应返回给宿主机，VMware再通过NAT将响应转发回虚拟机。</p></blockquote><h3 id="1-常用的-Linux-网络配置指令"><a href="#1-常用的-Linux-网络配置指令" class="headerlink" title="1. 常用的 Linux 网络配置指令"></a>1. 常用的 Linux 网络配置指令</h3><h4 id="1-1-查看网络接口信息"><a href="#1-1-查看网络接口信息" class="headerlink" title="1.1 查看网络接口信息"></a>1.1 查看网络接口信息</h4><ul><li><p><strong><code>ip</code> 命令</strong><br><code>ip</code> 是一个功能强大的网络管理工具，它可以用来查看和修改网络配置。常用的 <code>ip</code> 命令包括：</p><ul><li><p>查看所有网络接口的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr<br></code></pre></td></tr></table></figure><p>这个命令会显示系统中所有网络接口的 IP 地址、MAC 地址、广播地址等信息。</p></li><li><p>查看特定接口信息，例如 <code>eth0</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip addr show eth0<br></code></pre></td></tr></table></figure></li><li><p>启用或禁用网络接口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> eth0 up    <span class="hljs-comment"># 启用接口</span><br><span class="hljs-built_in">sudo</span> ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> eth0 down  <span class="hljs-comment"># 禁用接口</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>ifconfig</code> 命令</strong><br><code>ifconfig</code> 是早期的网络管理工具，虽然被 <code>ip</code> 取代，但仍然常用。</p><ul><li><p>查看网络接口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>nmcli</code> 命令</strong><br><code>nmcli</code> 是 NetworkManager 的命令行工具，用于管理网络连接：</p><ul><li><p>查看所有连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmcli connection show<br></code></pre></td></tr></table></figure></li><li><p>启用或禁用连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nmcli connection up &lt;连接名&gt;<br><span class="hljs-built_in">sudo</span> nmcli connection down &lt;连接名&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-2-检测网络连接"><a href="#1-2-检测网络连接" class="headerlink" title="1.2 检测网络连接"></a>1.2 检测网络连接</h4><ul><li><p><strong><code>ping</code> 命令</strong><br><code>ping</code> 用于测试网络的连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 8.8.8.8   <span class="hljs-comment"># Ping Google 公共 DNS 服务器</span><br></code></pre></td></tr></table></figure><p>如果能收到响应，说明与网络连通。</p></li><li><p><strong><code>traceroute</code> 命令</strong><br><code>traceroute</code> 用于追踪网络数据包经过的路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">traceroute www.google.com<br></code></pre></td></tr></table></figure></li><li><p><strong><code>netstat</code> 命令</strong><br><code>netstat</code> 用于查看网络连接和端口使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -tuln   <span class="hljs-comment"># 显示当前监听的端口</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="1-3-网络故障排查"><a href="#1-3-网络故障排查" class="headerlink" title="1.3 网络故障排查"></a>1.3 网络故障排查</h4><ul><li><p><strong><code>dig</code> 命令</strong><br><code>dig</code> 用于查询 DNS 解析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dig www.google.com<br></code></pre></td></tr></table></figure></li><li><p><strong><code>nslookup</code> 命令</strong><br><code>nslookup</code> 也是一个 DNS 查询工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nslookup www.google.com<br></code></pre></td></tr></table></figure></li><li><p><strong><code>tcpdump</code> 命令</strong><br><code>tcpdump</code> 是一个强大的网络抓包工具，用于捕获和分析网络流量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> tcpdump -i eth0<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-配置-Linux-静态-IP-地址"><a href="#2-配置-Linux-静态-IP-地址" class="headerlink" title="2. 配置 Linux 静态 IP 地址"></a>2. 配置 Linux 静态 IP 地址</h3><p>配置静态 IP 地址意味着在系统启动时手动为网络接口分配固定的 IP，而不是通过 DHCP 动态获取。以下步骤展示了如何为 Linux 服务器配置静态 IP。</p><h4 id="编辑-etc-sysconfig-network-scripts-ifcfg-ens33-文件（CentOS-RHEL-系列）"><a href="#编辑-etc-sysconfig-network-scripts-ifcfg-ens33-文件（CentOS-RHEL-系列）" class="headerlink" title="编辑 /etc/sysconfig/network-scripts/ifcfg-ens33 文件（CentOS&#x2F;RHEL 系列）"></a>编辑 <code>/etc/sysconfig/network-scripts/ifcfg-ens33</code> 文件（CentOS&#x2F;RHEL 系列）</h4><ol><li><p><strong>打开配置文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure></li><li><p><strong>添加静态 IP 配置</strong>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 网络接口的类型，通常为以太网（Ethernet）</span><br><span class="hljs-attr">TYPE</span>=<span class="hljs-string">&quot;Ethernet&quot;</span><br><br><span class="hljs-comment"># 代理方法设置，&quot;none&quot; 表示不使用代理</span><br><span class="hljs-attr">PROXY_METHOD</span>=<span class="hljs-string">&quot;none&quot;</span><br><br><span class="hljs-comment"># 指示此网络连接是否仅用于浏览器，&quot;no&quot; 表示不仅限于浏览器</span><br><span class="hljs-attr">BROWSER_ONLY</span>=<span class="hljs-string">&quot;no&quot;</span><br><br><span class="hljs-comment"># 设置IP地址的获取方式，&quot;static&quot; 表示使用静态IP地址</span><br><span class="hljs-attr">BOOTPROTO</span>=<span class="hljs-string">&quot;static&quot;</span><br><br><span class="hljs-comment"># 是否将该接口设置为默认路由接口，&quot;yes&quot; 表示该接口为默认网关</span><br><span class="hljs-attr">DEFROUTE</span>=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># 如果IPv4配置失败，是否视为严重错误，&quot;no&quot; 表示继续尝试其他协议</span><br><span class="hljs-attr">IPV4_FAILURE_FATAL</span>=<span class="hljs-string">&quot;no&quot;</span><br><br><span class="hljs-comment"># 是否启用IPv6协议，&quot;yes&quot; 表示启用IPv6</span><br><span class="hljs-attr">IPV6INIT</span>=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># 是否通过无状态自动配置来配置IPv6地址，&quot;yes&quot; 表示启用自动配置</span><br><span class="hljs-attr">IPV6_AUTOCONF</span>=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># 是否将该接口设置为IPv6的默认路由，&quot;yes&quot; 表示该接口为IPv6的默认网关</span><br><span class="hljs-attr">IPV6_DEFROUTE</span>=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># 如果IPv6配置失败，是否视为严重错误，&quot;no&quot; 表示不视为致命错误</span><br><span class="hljs-attr">IPV6_FAILURE_FATAL</span>=<span class="hljs-string">&quot;no&quot;</span><br><br><span class="hljs-comment"># IPv6地址生成模式，&quot;stable-privacy&quot; 表示使用稳定隐私地址生成</span><br><span class="hljs-attr">IPV6_ADDR_GEN_MODE</span>=<span class="hljs-string">&quot;stable-privacy&quot;</span><br><br><span class="hljs-comment"># 网络接口的名称，通常由系统命名，这里是&quot;ens33&quot;</span><br><span class="hljs-attr">NAME</span>=<span class="hljs-string">&quot;ens33&quot;</span><br><br><span class="hljs-comment"># 网络接口的唯一标识符（UUID），用于唯一标识此网络接口</span><br><span class="hljs-attr">UUID</span>=<span class="hljs-string">&quot;21e7c1a7-3eaa-4fa1-9c20-5dfce94667ff&quot;</span><br><br><span class="hljs-comment"># 该配置文件针对的物理设备名称，与 NAME 字段相同</span><br><span class="hljs-attr">DEVICE</span>=<span class="hljs-string">&quot;ens33&quot;</span><br><br><span class="hljs-comment"># 是否在系统启动时自动启用此网络接口，&quot;yes&quot; 表示自动启用</span><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># 静态IPv4地址，配置此接口的IP地址为192.168.200.130</span><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">200.130</span><br><br><span class="hljs-comment"># 指定默认网关的地址，这里是192.168.200.2</span><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">200.2</span><br><br><span class="hljs-comment"># 指定DNS服务器的地址，这里DNS服务器是192.168.200.2</span><br><span class="hljs-attr">DNS1</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">200.2</span><br><br><span class="hljs-comment"># 网络接口的防火墙区域，这里指定为&quot;public&quot;区域，通常安全级别较低</span><br><span class="hljs-attr">ZONE</span>=public<br><br></code></pre></td></tr></table></figure></li><li><p><strong>重启网络服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart network<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-域名解析过程"><a href="#3-域名解析过程" class="headerlink" title="3. 域名解析过程"></a>3. 域名解析过程</h3><p>域名解析（DNS 解析）是将人类易读的域名（如 <code>www.example.com</code>）转换为计算机可以理解的 IP 地址（如 <code>93.184.216.34</code>）的过程。DNS 解析是通过递归查询和层级结构完成的。</p><p><img src="/../assets/Linux/image-20241021220151695.png" alt="image-20241021220151695"></p><h4 id="3-1-DNS-解析的详细过程"><a href="#3-1-DNS-解析的详细过程" class="headerlink" title="3.1 DNS 解析的详细过程"></a>3.1 DNS 解析的详细过程</h4><ol><li><p><strong>用户请求域名</strong>：<br>用户在浏览器中输入 <code>www.example.com</code>，操作系统会首先检查本地的 DNS 缓存，看看是否已经有该域名的 IP 地址。如果有，直接返回缓存的结果。</p></li><li><p><strong>查询本地域名服务器</strong>：<br>如果缓存中没有相应记录，操作系统会向配置的本地 DNS 服务器发送查询请求，通常是路由器或 ISP 提供的 DNS 服务器。</p></li><li><p><strong>本地 DNS 服务器查询根 DNS 服务器</strong>：<br>本地 DNS 服务器首先会查询根 DNS 服务器，根服务器返回负责顶级域 <code>.com</code> 的 DNS 服务器地址。</p></li><li><p><strong>查询顶级域名服务器</strong>：<br>本地 DNS 服务器向 <code>.com</code> 顶级域名服务器发送查询请求，顶级域名服务器返回 <code>example.com</code> 的权威 DNS 服务器地址。</p></li><li><p><strong>查询权威 DNS 服务器</strong>：<br>本地 DNS 服务器向 <code>example.com</code> 的权威 DNS 服务器发送查询请求，权威服务器返回 <code>www.example.com</code> 对应的 IP 地址。</p></li><li><p><strong>返回 IP 地址并缓存</strong>：<br>本地 DNS 服务器将 IP 地址返回给客户端，并将该结果缓存，以便后续查询时加速。</p></li><li><p><strong>客户端连接服务器</strong>：<br>客户端使用获得的 IP 地址连接到目标服务器并获取网站内容。</p></li></ol><h4 id="3-2-重要的配置文件"><a href="#3-2-重要的配置文件" class="headerlink" title="3.2 重要的配置文件"></a>3.2 重要的配置文件</h4><ul><li><p><code>/etc/resolv.conf</code>：该文件指定系统使用的 DNS 服务器地址，例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nameserver</span> <span class="hljs-number">8.8.8.8</span><br></code></pre></td></tr></table></figure></li><li><p><code>/etc/hosts</code>：该文件用于静态配置域名与 IP 地址的对应关系，优先于 DNS 查询，例如：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>   localhost<br><span class="hljs-number">192.168.1.100</span>   myserver<br></code></pre></td></tr></table></figure></li></ul><h2 id="第九章-进程管理"><a href="#第九章-进程管理" class="headerlink" title="第九章 进程管理"></a>第九章 进程管理</h2><h3 id="1-Linux-进程管理"><a href="#1-Linux-进程管理" class="headerlink" title="1. Linux 进程管理"></a>1. Linux 进程管理</h3><p>进程是系统运行的基本单位，Linux 提供了多种工具和命令用于查看、控制、终止和监控进程。</p><h4 id="1-1-查看进程"><a href="#1-1-查看进程" class="headerlink" title="1.1 查看进程"></a>1.1 查看进程</h4><ul><li><p><strong><code>ps</code> 命令</strong><br><code>ps</code> 用于显示当前正在运行的进程信息。常用选项包括：</p><ul><li><p>查看当前用户的所有进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -u &lt;username&gt;<br></code></pre></td></tr></table></figure></li><li><p>查看所有进程（包括系统进程）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef<br></code></pre></td></tr></table></figure></li><li><p>显示所有进程全部状态</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps -<span class="hljs-built_in">aux</span><br></code></pre></td></tr></table></figure><p><strong>解释 <code>ps -aux</code> 的含义</strong>：</p><ul><li><code>ps</code>：Process Status，显示系统中进程的状态。</li><li><code>-a</code>：显示所有用户的进程（不只是当前用户）。</li><li><code>-u</code>：显示进程的详细信息，包括用户和CPU、内存使用等。</li><li><code>x</code>：显示没有控制终端的进程（比如守护进程）。</li></ul><p><strong><code>ps -aux</code> 输出的常见字段说明：</strong></p><ol><li><strong>USER</strong>：启动该进程的用户名称。</li><li><strong>PID</strong>：进程的ID（Process ID），每个进程都有一个唯一的ID。</li><li><strong>%CPU</strong>：进程使用的CPU百分比。</li><li><strong>%MEM</strong>：进程使用的内存百分比。</li><li><strong>VSZ</strong>：进程使用的虚拟内存大小（以KB为单位）。</li><li><strong>RSS</strong>：进程占用的实际内存大小（以KB为单位）。</li><li><strong>TTY</strong>：该进程关联的终端。<code>?</code> 表示没有关联终端。</li><li><strong>STAT</strong>：进程的状态码：<ul><li><code>R</code>：运行中</li><li><code>S</code>：睡眠中</li><li><code>D</code>：不可中断的睡眠状态（通常是等待IO）</li><li><code>T</code>：停止或暂停</li><li><code>Z</code>：僵尸进程</li></ul></li><li><strong>START</strong>：进程的启动时间。</li><li><strong>TIME</strong>：进程占用的CPU时间。</li><li><strong>COMMAND</strong>：启动进程的命令及其参数。</li></ol><p><strong>示例输出：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root         1  0.0  0.1 163184  9440 ?        Ss   10:00   0:01 /sbin/init<br>user       204  1.2  2.5 456728 65432 ?        Sl   10:01   0:15 /usr/bin/python3 script.py<br>www-data   412  0.3  0.8 321896 20764 ?        S    10:01   0:03 /usr/sbin/apache2 -k start<br>mysql      514  0.5  3.0 754328 80412 ?        S    10:01   0:10 /usr/sbin/mysqld<br>user      1305  0.0  0.3 271684  8224 pts/0    R+   10:20   0:00 ps -aux<br></code></pre></td></tr></table></figure><p><strong>输出内容解释：</strong></p><ul><li><code>root</code> 用户的进程 <code>1</code> 是系统的 <code>init</code> 进程，占用很少的内存和CPU。</li><li><code>user</code> 用户启动了一个 <code>python3</code> 的脚本，占用了较多的CPU和内存。</li><li><code>www-data</code> 用户启动了一个 <code>apache2</code> 服务。</li><li><code>mysql</code> 用户启动了 <code>mysqld</code>，是MySQL数据库服务，占用较多的内存。</li></ul><p>通过 <code>ps -aux</code>，你可以监控系统中的进程，查看每个进程的资源使用情况，并进一步进行分析和管理。</p></li><li><p>按照层次结构显示进程树：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -e --forest<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>top</code> 命令</strong><br><code>top</code> 是一个动态显示系统中运行进程的工具，按 CPU、内存使用等实时排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top<br></code></pre></td></tr></table></figure></li><li><p><strong><code>htop</code> 命令</strong><br><code>htop</code> 是 <code>top</code> 的增强版本，提供了更友好的界面和功能（需要安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">htop<br></code></pre></td></tr></table></figure></li><li><p><strong><code>pgrep</code> 命令</strong><br><code>pgrep</code> 用于根据名称查找进程的 PID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pgrep &lt;process_name&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-2-控制和管理进程"><a href="#1-2-控制和管理进程" class="headerlink" title="1.2 控制和管理进程"></a>1.2 控制和管理进程</h4><ul><li><p><strong><code>kill</code> 命令</strong><br><code>kill</code> 用于发送信号给进程，常用于终止进程。最常用的信号是 <code>SIGKILL</code>（信号 9），表示强制终止进程。</p><ul><li><p>通过 PID 终止进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 &lt;pid&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>killall</code> 命令</strong><br><code>killall</code> 用于通过进程名终止进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">killall &lt;process_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>nice</code> 和 <code>renice</code> 命令</strong><br>这两个命令用于调整进程的优先级，<code>nice</code> 启动进程时指定优先级，<code>renice</code> 用于调整已经运行的进程优先级。</p><ul><li><p>使用 <code>nice</code> 启动一个优先级较低的进程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nice</span> -n 10 &lt;<span class="hljs-built_in">command</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>调整已经运行的进程优先级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">renice 5 &lt;pid&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-3-后台运行进程"><a href="#1-3-后台运行进程" class="headerlink" title="1.3 后台运行进程"></a>1.3 后台运行进程</h4><ul><li><p><strong><code>&amp;</code> 操作符</strong><br>将命令放在后台运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;<span class="hljs-built_in">command</span>&gt; &amp;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>nohup</code> 命令</strong><br><code>nohup</code> 用于使命令在关闭终端后继续运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> &lt;<span class="hljs-built_in">command</span>&gt; &amp;<br></code></pre></td></tr></table></figure></li><li><p><strong><code>bg</code> 和 <code>fg</code> 命令</strong><br><code>bg</code> 用于将暂停的进程放到后台运行，<code>fg</code> 用于将后台进程调到前台：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bg</span> %&lt;job_id&gt;<br><span class="hljs-built_in">fg</span> %&lt;job_id&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-Linux-服务管理"><a href="#2-Linux-服务管理" class="headerlink" title="2. Linux 服务管理"></a>2. Linux 服务管理</h3><p>Linux 中的服务（也叫守护进程）通常是后台持续运行的程序。<code>systemd</code> 和 <code>init</code> 是最常见的服务管理系统，现代 Linux 发行版大多采用 <code>systemd</code>。</p><h4 id="2-1-使用-systemctl-管理服务"><a href="#2-1-使用-systemctl-管理服务" class="headerlink" title="2.1 使用 systemctl 管理服务"></a>2.1 使用 <code>systemctl</code> 管理服务</h4><ul><li><p><strong>启动服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>停止服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>重启服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>重新加载服务配置（不重启）</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl reload &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看服务状态</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>启用服务开机自启</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>禁用服务开机自启</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> &lt;service_name&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>查看所有已启用的服务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl list-unit-files --<span class="hljs-built_in">type</span>=service --state=enabled<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-2-使用-service-管理服务（传统方式）"><a href="#2-2-使用-service-管理服务（传统方式）" class="headerlink" title="2.2 使用 service 管理服务（传统方式）"></a>2.2 使用 <code>service</code> 管理服务（传统方式）</h4><p>部分较老的系统仍使用 <code>service</code> 命令来管理服务：</p><ul><li><p>启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service &lt;service_name&gt; start<br></code></pre></td></tr></table></figure></li><li><p>停止服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service &lt;service_name&gt; stop<br></code></pre></td></tr></table></figure></li><li><p>重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service &lt;service_name&gt; restart<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-Linux-防火墙管理"><a href="#3-Linux-防火墙管理" class="headerlink" title="3. Linux 防火墙管理"></a>3. Linux 防火墙管理</h3><p>Linux 中常用的防火墙工具包括 <code>iptables</code> 和 <code>firewalld</code>，其中 <code>firewalld</code> 是较新的工具，提供了动态配置的功能。</p><p><img src="/../assets/Linux/image-20241021221227087.png" alt="image-20241021221227087"></p><h4 id="3-1-使用-firewalld-管理防火墙"><a href="#3-1-使用-firewalld-管理防火墙" class="headerlink" title="3.1 使用 firewalld 管理防火墙"></a>3.1 使用 <code>firewalld</code> 管理防火墙</h4><p><code>firewalld</code> 是现代 Linux 发行版中默认的防火墙管理工具，采用区域（zone）和服务（service）相结合的方式。</p><ul><li><p>**启动 <code>firewalld</code>**：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start firewalld<br></code></pre></td></tr></table></figure></li><li><p>**停止 <code>firewalld</code>**：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop firewalld<br></code></pre></td></tr></table></figure></li><li><p><strong>查看当前防火墙状态</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --state<br></code></pre></td></tr></table></figure></li><li><p><strong>查看活动区域</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --get-active-zones<br></code></pre></td></tr></table></figure></li><li><p><strong>查看特定区域的规则</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --zone=public --list-all<br></code></pre></td></tr></table></figure></li><li><p><strong>允许某个端口通过防火墙</strong>（例如 HTTP 端口 80）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --zone=public --add-port=80/tcp --permanent<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br></code></pre></td></tr></table></figure></li><li><p><strong>允许某个服务通过防火墙</strong>（例如 HTTP）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> firewall-cmd --zone=public --add-service=http --permanent<br><span class="hljs-built_in">sudo</span> firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-Linux运行级别"><a href="#4-Linux运行级别" class="headerlink" title="4.Linux运行级别"></a>4.Linux运行级别</h3><p>在 Linux 操作系统中，<strong>运行级别</strong>（Runlevel）是系统中不同状态的预定义配置，决定了系统中可以运行的服务和进程。这些运行级别决定系统的启动模式，比如是图形界面、命令行、还是维护模式等。</p><h4 id="1-Linux-运行级别的含义"><a href="#1-Linux-运行级别的含义" class="headerlink" title="1. Linux 运行级别的含义"></a>1. <strong>Linux 运行级别的含义</strong></h4><p>运行级别从 <code>0</code> 到 <code>6</code>，每个级别对应不同的系统运行状态：</p><ul><li><p><strong>0 - 停机（Halt）</strong>：</p><ul><li>系统将会关闭，所有进程终止，机器停止工作。执行这个级别会关闭操作系统。</li></ul></li><li><p><strong>1 - 单用户模式（Single-user mode）</strong>：</p><ul><li>只有 root 用户可以登录，通常用于系统维护和修复。不启用网络服务或多用户功能，适用于紧急恢复。</li></ul></li><li><p><strong>2 - 多用户模式（Multi-user mode）</strong>：</p><ul><li>启用多用户模式，但不支持网络服务。这种模式允许多个用户登录，但没有网络连接功能。</li></ul></li><li><p><strong>3 - 完整的多用户模式（Full multi-user mode）</strong>：</p><ul><li>支持多用户登录，并启用网络服务。没有图形界面，用户使用命令行登录，适用于服务器环境，建议平时使用这个</li></ul></li><li><p><strong>4 - 自定义模式（Unused&#x2F;Custom mode）</strong>：</p><ul><li>通常不被使用，但可以根据需要进行自定义。某些系统可能会根据特定的需求配置此级别。</li></ul></li><li><p><strong>5 - 图形用户界面模式（Graphical mode）</strong>：</p><ul><li>启用多用户模式，并启动图形界面（GUI）。大部分桌面系统默认使用这个级别。</li></ul></li><li><p><strong>6 - 重启（Reboot）</strong>：</p><ul><li>系统将重新启动，所有进程被终止，系统重新加载并启动。</li></ul></li></ul><h3 id="2-查看和切换运行级别的指令"><a href="#2-查看和切换运行级别的指令" class="headerlink" title="2. 查看和切换运行级别的指令"></a>2. <strong>查看和切换运行级别的指令</strong></h3><h4 id="2-1-查看当前运行级别："><a href="#2-1-查看当前运行级别：" class="headerlink" title="2.1 查看当前运行级别："></a>2.1 查看当前运行级别：</h4><p>你可以使用以下命令来查看系统的当前运行级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">runlevel<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">N</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><code>N</code> 表示当前没有之前的运行级别，而 <code>5</code> 表示当前运行级别是图形模式（GUI）。</p><h4 id="2-2-切换运行级别："><a href="#2-2-切换运行级别：" class="headerlink" title="2.2 切换运行级别："></a>2.2 切换运行级别：</h4><p>你可以使用 <code>init</code> 或 <code>systemctl</code> 命令来切换运行级别。</p><ul><li><p>使用 <code>init</code> 命令（传统方式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> init [运行级别]<br></code></pre></td></tr></table></figure><p>例如，要切换到运行级别 <code>3</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> init 3<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>systemctl</code> 命令（现代方式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl isolate [目标.target]<br></code></pre></td></tr></table></figure><p>例如，切换到运行级别 <code>3</code>（多用户模式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl isolate multi-user.target<br></code></pre></td></tr></table></figure><p>切换到运行级别 <code>5</code>（图形界面模式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl isolate graphical.target<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-3-设置默认运行级别："><a href="#2-3-设置默认运行级别：" class="headerlink" title="2.3 设置默认运行级别："></a>2.3 设置默认运行级别：</h4><p>在现代的基于 <code>systemd</code> 的 Linux 系统中，默认运行级别通过目标（target）来配置。</p><ul><li><p>查看当前默认运行级别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl get-default<br></code></pre></td></tr></table></figure></li><li><p>设置默认运行级别为图形界面模式（运行级别5）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl set-default graphical.target<br></code></pre></td></tr></table></figure></li><li><p>设置默认运行级别为多用户模式（运行级别3）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl set-default multi-user.target<br></code></pre></td></tr></table></figure></li></ul><h2 id="第十章-RPM-与-YUM"><a href="#第十章-RPM-与-YUM" class="headerlink" title="第十章 RPM 与 YUM"></a>第十章 RPM 与 YUM</h2><h3 id="1-RPM-和-YUM-的作用"><a href="#1-RPM-和-YUM-的作用" class="headerlink" title="1. RPM 和 YUM 的作用"></a>1. <strong>RPM 和 YUM 的作用</strong></h3><h4 id="1-1-RPM（Red-Hat-Package-Manager）"><a href="#1-1-RPM（Red-Hat-Package-Manager）" class="headerlink" title="1.1 RPM（Red Hat Package Manager）"></a>1.1 RPM（Red Hat Package Manager）</h4><p><strong>RPM</strong> 是一个底层的包管理工具，专门用于管理 <code>.rpm</code> 格式的软件包。它主要提供以下功能：</p><ul><li>安装软件包</li><li>卸载软件包</li><li>升级软件包</li><li>查询已安装的软件包信息</li><li>验证软件包完整性</li></ul><p><strong>RPM</strong> 只能处理单个软件包，并且不处理软件包的依赖关系。如果安装的软件包依赖于其他包，则必须手动安装这些依赖项，这让 RPM 在处理复杂安装时变得繁琐。</p><h4 id="1-2-YUM（Yellowdog-Updater-Modified）"><a href="#1-2-YUM（Yellowdog-Updater-Modified）" class="headerlink" title="1.2 YUM（Yellowdog Updater, Modified）"></a>1.2 YUM（Yellowdog Updater, Modified）</h4><p><strong>YUM</strong> 是基于 RPM 的高层次软件包管理工具，它不仅可以安装、卸载、更新和查询 RPM 包，还能自动解决软件包的依赖问题。它可以从指定的软件库（repository）中下载和安装软件包，这使得 YUM 更适合管理复杂的软件包依赖关系。</p><h3 id="2-RPM-和-YUM-的区别"><a href="#2-RPM-和-YUM-的区别" class="headerlink" title="2. RPM 和 YUM 的区别"></a>2. <strong>RPM 和 YUM 的区别</strong></h3><table><thead><tr><th>功能</th><th>RPM</th><th>YUM</th></tr></thead><tbody><tr><td>包管理</td><td>管理 <code>.rpm</code> 软件包</td><td>管理 <code>.rpm</code> 软件包</td></tr><tr><td>依赖关系处理</td><td>不处理依赖关系，必须手动安装依赖</td><td>自动解决依赖关系，能从仓库中安装依赖包</td></tr><tr><td>仓库管理</td><td>不支持使用软件仓库</td><td>可以从远程仓库下载和安装软件包</td></tr><tr><td>常用场景</td><td>安装单个已下载的 <code>.rpm</code> 包</td><td>从仓库中安装、更新、删除软件包，解决依赖问题</td></tr><tr><td>安装软件</td><td>必须有具体的 <code>.rpm</code> 文件</td><td>直接通过包名查找并安装，无需下载 <code>.rpm</code> 文件</td></tr></tbody></table><h3 id="3-RPM-和-YUM-的使用方法与示例"><a href="#3-RPM-和-YUM-的使用方法与示例" class="headerlink" title="3. RPM 和 YUM 的使用方法与示例"></a>3. <strong>RPM 和 YUM 的使用方法与示例</strong></h3><h4 id="3-1-RPM-的使用"><a href="#3-1-RPM-的使用" class="headerlink" title="3.1 RPM 的使用"></a>3.1 RPM 的使用</h4><p><strong>安装软件包</strong>：<br>假设有一个名为 <code>example.rpm</code> 的包可以安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm -ivh example.rpm<br></code></pre></td></tr></table></figure><ul><li><code>-i</code>：安装软件包。</li><li><code>-v</code>：显示详细信息。</li><li><code>-h</code>：显示进度条。</li></ul><p><strong>升级软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm -Uvh example.rpm<br></code></pre></td></tr></table></figure><ul><li><code>-U</code>：升级软件包（如果包不存在则安装）。</li></ul><p><strong>卸载软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm -e example<br></code></pre></td></tr></table></figure><ul><li><code>-e</code>：卸载指定软件包（无需文件扩展名 <code>.rpm</code>，只需要包名）。</li></ul><p><strong>查询已安装的软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -qa | grep example<br></code></pre></td></tr></table></figure><ul><li><code>-q</code>：查询软件包。</li><li><code>-a</code>：显示所有已安装的软件包。</li></ul><p><strong>查看包信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -qi example<br></code></pre></td></tr></table></figure><ul><li><code>-q</code>：查询软件包信息。</li><li><code>-i</code>：显示包详细信息。</li></ul><p><strong>验证软件包完整性</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> rpm -V example<br></code></pre></td></tr></table></figure><ul><li><code>-V</code>：验证指定包的完整性，检查文件是否被修改。</li></ul><h4 id="3-2-YUM-的使用"><a href="#3-2-YUM-的使用" class="headerlink" title="3.2 YUM 的使用"></a>3.2 YUM 的使用</h4><p><strong>安装软件包</strong>：<br>不需要提前下载软件包，直接从仓库安装。例如安装 <code>httpd</code>（Apache Web Server）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install httpd<br></code></pre></td></tr></table></figure><p><strong>卸载软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum remove httpd<br></code></pre></td></tr></table></figure><p><strong>更新软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum update httpd<br></code></pre></td></tr></table></figure><p>或者更新系统中所有的软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum update<br></code></pre></td></tr></table></figure><p><strong>列出可用的软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list available<br></code></pre></td></tr></table></figure><p><strong>查询已安装的软件包</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum list installed | grep httpd<br></code></pre></td></tr></table></figure><p><strong>查找软件包</strong>：<br>通过 YUM 仓库查找软件包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum search httpd<br></code></pre></td></tr></table></figure><p><strong>查看软件包详细信息</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum info httpd<br></code></pre></td></tr></table></figure><p><strong>清理缓存</strong>：<br>YUM 会将软件包的元数据缓存在本地，使用以下命令可以清除这些缓存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum clean all<br></code></pre></td></tr></table></figure><h4 id="3-3-YUM-仓库的配置"><a href="#3-3-YUM-仓库的配置" class="headerlink" title="3.3 YUM 仓库的配置"></a>3.3 YUM 仓库的配置</h4><p>YUM 使用配置文件 <code>/etc/yum.repos.d/</code> 中的 <code>.repo</code> 文件来定义仓库。例如，<code>CentOS-Base.repo</code> 是 CentOS 的默认仓库配置文件。</p><p>示例：创建一个自定义的 YUM 仓库文件 <code>/etc/yum.repos.d/custom.repo</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[custom-repo]<br>name=Custom Repository<br>baseurl=http://repository.example.com/custom/<br>enabled=1<br>gpgcheck=0<br></code></pre></td></tr></table></figure><ul><li><code>name</code>：仓库的名称。</li><li><code>baseurl</code>：仓库的 URL 或本地路径。</li><li><code>enabled</code>：是否启用该仓库（1 为启用，0 为禁用）。</li><li><code>gpgcheck</code>：是否启用 GPG 密钥检查。</li></ul><h3 id="4-YUM-的高级功能"><a href="#4-YUM-的高级功能" class="headerlink" title="4. YUM 的高级功能"></a>4. <strong>YUM 的高级功能</strong></h3><h4 id="4-1-YUM-组管理"><a href="#4-1-YUM-组管理" class="headerlink" title="4.1 YUM 组管理"></a>4.1 YUM 组管理</h4><p>YUM 支持安装软件组，这些组通常由多个相关软件包组成，安装一组可以方便地部署一整套相关的软件。</p><p><strong>列出所有软件组</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum group list<br></code></pre></td></tr></table></figure><p><strong>安装一个软件组</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum groupinstall <span class="hljs-string">&quot;Development Tools&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-检查系统中未使用的依赖"><a href="#4-2-检查系统中未使用的依赖" class="headerlink" title="4.2 检查系统中未使用的依赖"></a>4.2 检查系统中未使用的依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum autoremove<br></code></pre></td></tr></table></figure><p>该命令将删除未使用的依赖包，通常在卸载软件后，可以清理残留的依赖。</p><h2 id="第十一章-shell编程"><a href="#第十一章-shell编程" class="headerlink" title="第十一章 shell编程"></a>第十一章 shell编程</h2><h3 id="1-Shell-的定义"><a href="#1-Shell-的定义" class="headerlink" title="1. Shell 的定义"></a>1. <strong>Shell 的定义</strong></h3><p><strong>Shell</strong> 是 Linux 和 Unix 操作系统中的命令解释器，位于用户和操作系统核心之间，允许用户通过命令行界面对系统进行操作。它不仅可以作为命令行解释器，还可以通过编写 <strong>Shell 脚本</strong> 实现自动化任务。</p><p>Shell 的种类很多，常见的有：</p><ul><li><strong>Bash（Bourne Again Shell）</strong>：最常见的 Linux Shell，功能强大且兼容性好。</li><li><strong>Zsh、Csh、Ksh</strong> 等：其他特定用途的 Shell。</li></ul><h3 id="2-Shell-编程的基础语法"><a href="#2-Shell-编程的基础语法" class="headerlink" title="2. Shell 编程的基础语法"></a>2. <strong>Shell 编程的基础语法</strong></h3><p>Shell 编程是一种脚本语言，常用于自动化任务和系统管理。在 Linux 系统中，常见的 Shell 解释器有 Bash（Bourne Again Shell）、Zsh 等。以下将详细讲解 Shell 编程的基础语法，包括注释、变量、位置参数、运算符、分支、循环、<code>case</code> 语句，以及函数的使用。</p><hr><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. <strong>注释</strong></h4><ul><li>在 Shell 脚本中，注释是用于解释代码的文字，供程序员阅读，而不会被执行。</li><li>单行注释使用 <code>#</code>，从 <code>#</code> 开始直到行尾的内容都会被忽略。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这是一个单行注释</span><br></code></pre></td></tr></table></figure><ul><li>多行注释可以通过 <code>:&lt;&lt;</code> 的方式实现（不常用，但在复杂注释时可以帮助组织代码）。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">:&lt;&lt;<span class="hljs-string">&#x27;EOF&#x27;</span><br>这是多行注释<br>这里的所有内容都不会被执行<br>EOF<br></code></pre></td></tr></table></figure><hr><h4 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. <strong>变量</strong></h4><h5 id="2-1-变量的定义"><a href="#2-1-变量的定义" class="headerlink" title="2.1 变量的定义"></a>2.1 变量的定义</h5><ul><li>在 Shell 中，变量的赋值方式是：<code>变量名=值</code>。注意，等号两边不能有空格。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=<span class="hljs-string">&quot;Alice&quot;</span><br>age=25<br></code></pre></td></tr></table></figure><h5 id="2-2-变量的引用"><a href="#2-2-变量的引用" class="headerlink" title="2.2 变量的引用"></a>2.2 变量的引用</h5><ul><li>通过 <code>$</code> 来引用变量的值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span>  <span class="hljs-comment"># 输出 Alice</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$age</span>   <span class="hljs-comment"># 输出 25</span><br></code></pre></td></tr></table></figure><h5 id="2-3-变量的作用域"><a href="#2-3-变量的作用域" class="headerlink" title="2.3 变量的作用域"></a>2.3 变量的作用域</h5><ul><li><strong>局部变量</strong>：只在当前 Shell 脚本中有效。</li><li><strong>环境变量</strong>：通过 <code>export</code> 命令导出变量，使其在当前 Shell 进程及其子进程中可用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/usr/local/bin:<span class="hljs-variable">$PATH</span>&quot;</span>  <span class="hljs-comment"># 将路径添加到环境变量</span><br></code></pre></td></tr></table></figure><h5 id="2-4-特殊变量"><a href="#2-4-特殊变量" class="headerlink" title="2.4 特殊变量"></a>2.4 特殊变量</h5><ul><li><code>$0</code>：当前脚本的名字。</li><li><code>$1, $2, ..., $n</code>：传递给脚本的参数，称为位置参数。</li><li><code>$#</code>：参数的个数。</li><li><code>$*</code> 和 <code>$@</code>：代表传递给脚本的所有参数，区别在于它们处理带引号的参数时的行为不同。</li><li><code>$?</code>：上一条命令的退出状态码。</li></ul><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;脚本名：<span class="hljs-variable">$0</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;第一个参数：<span class="hljs-variable">$1</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;参数个数：<span class="hljs-variable">$#</span>&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-位置参数"><a href="#3-位置参数" class="headerlink" title="3. 位置参数"></a>3. <strong>位置参数</strong></h4><ul><li>在调用脚本时，可以传递参数，这些参数可以通过 <code>$1, $2, ..., $n</code> 进行访问。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$1</span>!&quot;</span><br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./script.sh Alice  <span class="hljs-comment"># 输出 &quot;Hello, Alice!&quot;</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. <strong>运算符</strong></h4><h5 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h5><ul><li>Shell 支持基本的算术运算，可以使用 <code>expr</code> 命令或 <code>$(( ))</code> 进行计算。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=5<br>b=3<br><span class="hljs-built_in">sum</span>=$(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>)  <span class="hljs-comment"># 使用 expr 进行加法运算</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sum</span>            <span class="hljs-comment"># 输出 8</span><br><br>result=$((a * b))    <span class="hljs-comment"># 使用 $(( )) 进行乘法运算</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$result</span>         <span class="hljs-comment"># 输出 15</span><br></code></pre></td></tr></table></figure><h5 id="4-2-关系运算符"><a href="#4-2-关系运算符" class="headerlink" title="4.2 关系运算符"></a>4.2 关系运算符</h5><ul><li>用于比较数值，常用于条件判断中。<ul><li><code>-eq</code>：等于</li><li><code>-ne</code>：不等于</li><li><code>-gt</code>：大于</li><li><code>-ge</code>：大于或等于</li><li><code>-lt</code>：小于</li><li><code>-le</code>：小于或等于</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> is greater than <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h5 id="4-3-逻辑运算符"><a href="#4-3-逻辑运算符" class="headerlink" title="4.3 逻辑运算符"></a>4.3 逻辑运算符</h5><ul><li>用于连接多个条件。<ul><li><code>-a</code>：与（AND）</li><li><code>-o</code>：或（OR）</li><li><code>!</code>：非（NOT）</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt 0 -a <span class="hljs-variable">$b</span> -lt 10 ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;a is positive and b is less than 10&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h5 id="4-4-字符串运算符"><a href="#4-4-字符串运算符" class="headerlink" title="4.4 字符串运算符"></a>4.4 字符串运算符</h5><ul><li>用于字符串的比较。<ul><li><code>=</code>：字符串相等</li><li><code>!=</code>：字符串不等</li><li><code>-z</code>：字符串长度为零</li><li><code>-n</code>：字符串非空</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$name</span>&quot;</span> = <span class="hljs-string">&quot;Alice&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, Alice!&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><hr><h4 id="5-条件分支"><a href="#5-条件分支" class="headerlink" title="5. 条件分支"></a>5. <strong>条件分支</strong></h4><h5 id="5-1-if-else-结构"><a href="#5-1-if-else-结构" class="headerlink" title="5.1 if-else 结构"></a>5.1 <code>if-else</code> 结构</h5><ul><li><code>if</code> 语句用于条件判断，<code>then</code> 部分在条件为真时执行，<code>else</code> 部分在条件为假时执行。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> is greater than <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> is not greater than <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h5 id="5-2-elif（else-if）"><a href="#5-2-elif（else-if）" class="headerlink" title="5.2 elif（else if）"></a>5.2 <code>elif</code>（else if）</h5><ul><li>可以用 <code>elif</code> 来进行多条件判断。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$a</span> -eq <span class="hljs-variable">$b</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> equals <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$a</span> -gt <span class="hljs-variable">$b</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> is greater than <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$a</span> is less than <span class="hljs-variable">$b</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><hr><h4 id="6-循环"><a href="#6-循环" class="headerlink" title="6. 循环"></a>6. <strong>循环</strong></h4><h5 id="6-1-for-循环"><a href="#6-1-for-循环" class="headerlink" title="6.1 for 循环"></a>6.1 <code>for</code> 循环</h5><ul><li>用于遍历一组值。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> 1 2 3; <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Number: <span class="hljs-variable">$i</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="6-2-while-循环"><a href="#6-2-while-循环" class="headerlink" title="6.2 while 循环"></a>6.2 <code>while</code> 循环</h5><ul><li>当条件为真时执行循环体。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=0<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$count</span> -lt 5 ]; <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Count: <span class="hljs-variable">$count</span>&quot;</span><br>  count=$((count + <span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h5 id="6-3-until-循环"><a href="#6-3-until-循环" class="headerlink" title="6.3 until 循环"></a>6.3 <code>until</code> 循环</h5><ul><li>当条件为假时执行循环体。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">count=0<br><span class="hljs-keyword">until</span> [ <span class="hljs-variable">$count</span> -ge 5 ]; <span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Count: <span class="hljs-variable">$count</span>&quot;</span><br>  count=$((count + <span class="hljs-number">1</span>))<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><hr><h4 id="7-case-语句"><a href="#7-case-语句" class="headerlink" title="7. case 语句"></a>7. <strong><code>case</code> 语句</strong></h4><ul><li>用于多条件匹配，相当于 <code>switch-case</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">fruit=<span class="hljs-string">&quot;apple&quot;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$fruit</span> <span class="hljs-keyword">in</span><br>  <span class="hljs-string">&quot;apple&quot;</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is an apple.&quot;</span> ;;<br>  <span class="hljs-string">&quot;banana&quot;</span>)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a banana.&quot;</span> ;;<br>  *)<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Unknown fruit.&quot;</span> ;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><hr><h4 id="8-函数"><a href="#8-函数" class="headerlink" title="8. 函数"></a>8. <strong>函数</strong></h4><h5 id="8-1-定义函数"><a href="#8-1-定义函数" class="headerlink" title="8.1 定义函数"></a>8.1 定义函数</h5><ul><li>函数用于封装代码块，可以重复调用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">my_function</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a function.&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-2-调用函数"><a href="#8-2-调用函数" class="headerlink" title="8.2 调用函数"></a>8.2 调用函数</h5><ul><li>使用函数名即可调用函数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">my_function  <span class="hljs-comment"># 输出 &quot;This is a function.&quot;</span><br></code></pre></td></tr></table></figure><h5 id="8-3-带参数的函数"><a href="#8-3-带参数的函数" class="headerlink" title="8.3 带参数的函数"></a>8.3 带参数的函数</h5><ul><li>可以向函数传递参数，通过 <code>$1, $2, ...</code> 访问参数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-function"><span class="hljs-title">greet</span></span>() &#123;<br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$1</span>!&quot;</span><br>&#125;<br><br>greet <span class="hljs-string">&quot;Alice&quot;</span>  <span class="hljs-comment"># 输出 &quot;Hello, Alice!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3-运行-Shell-脚本"><a href="#3-运行-Shell-脚本" class="headerlink" title="3. 运行 Shell 脚本"></a>3. <strong>运行 Shell 脚本</strong></h3><p><strong>第一种方式</strong></p><ul><li>编写脚本文件（扩展名通常为 <code>.sh</code>），例如 <code>backup.sh</code>。</li><li>确保脚本有执行权限：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x backup.sh<br></code></pre></td></tr></table></figure></li><li>运行脚本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">./backup.sh<br> 或者使用绝对路径 /root/shcode/backup.sh<br></code></pre></td></tr></table></figure></li></ul><p><strong>第二种方式</strong></p><ul><li><p>不用赋予脚本执行权限，直接执行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">sh</span> backup.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-数据库备份-Shell-脚本示例"><a href="#4-数据库备份-Shell-脚本示例" class="headerlink" title="4.数据库备份 Shell 脚本示例"></a>4.<strong>数据库备份 Shell 脚本示例</strong></h3><p>假设你要对 MySQL 数据库进行备份，可以编写一个简单的 Shell 脚本自动化完成此任务。</p><h4 id="4-1-脚本内容（mysql-backup-sh）："><a href="#4-1-脚本内容（mysql-backup-sh）：" class="headerlink" title="4.1 脚本内容（mysql_backup.sh）："></a>4.1 脚本内容（<code>mysql_backup.sh</code>）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 配置参数</span><br>DB_NAME=<span class="hljs-string">&quot;your_database_name&quot;</span>  <span class="hljs-comment"># 需要备份的数据库名</span><br>DB_USER=<span class="hljs-string">&quot;your_username&quot;</span>       <span class="hljs-comment"># 数据库用户名</span><br>DB_PASSWORD=<span class="hljs-string">&quot;your_password&quot;</span>   <span class="hljs-comment"># 数据库密码</span><br>BACKUP_PATH=<span class="hljs-string">&quot;/path/to/backup&quot;</span> <span class="hljs-comment"># 备份存储的路径</span><br>DATE=$(<span class="hljs-built_in">date</span> +%Y%m%d_%H%M%S)   <span class="hljs-comment"># 当前日期时间，用于生成文件名</span><br><br><span class="hljs-comment"># 创建备份目录（如果不存在）</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$BACKUP_PATH</span><br><br><span class="hljs-comment"># 备份数据库</span><br>mysqldump -u<span class="hljs-variable">$DB_USER</span> -p<span class="hljs-variable">$DB_PASSWORD</span> <span class="hljs-variable">$DB_NAME</span> &gt; <span class="hljs-variable">$BACKUP_PATH</span>/<span class="hljs-variable">$&#123;DB_NAME&#125;</span>_backup_<span class="hljs-variable">$DATE</span>.sql<br><br><span class="hljs-comment"># 检查备份是否成功</span><br><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数据库 <span class="hljs-variable">$DB_NAME</span> 备份成功，存储在 <span class="hljs-variable">$BACKUP_PATH</span>/<span class="hljs-variable">$&#123;DB_NAME&#125;</span>_backup_<span class="hljs-variable">$DATE</span>.sql&quot;</span><br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;数据库 <span class="hljs-variable">$DB_NAME</span> 备份失败&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h4 id="4-2-脚本说明："><a href="#4-2-脚本说明：" class="headerlink" title="4.2 脚本说明："></a>4.2 脚本说明：</h4><ul><li><code>DB_NAME</code>、<code>DB_USER</code>、<code>DB_PASSWORD</code>：配置需要备份的数据库名和 MySQL 连接信息。</li><li><code>BACKUP_PATH</code>：指定数据库备份文件的存储位置。</li><li><code>DATE=$(date +%Y%m%d_%H%M%S)</code>：获取当前的日期和时间，用于生成唯一的备份文件名。</li><li><code>mysqldump</code>：是用于导出 MySQL 数据库内容的命令，生成 <code>.sql</code> 文件。</li></ul><h4 id="4-3-运行脚本"><a href="#4-3-运行脚本" class="headerlink" title="4.3 运行脚本"></a>4.3 运行脚本</h4><ol><li>将脚本保存为 <code>mysql_backup.sh</code>。</li><li>赋予执行权限：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x mysql_backup.sh<br></code></pre></td></tr></table></figure></li><li>运行脚本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysql_backup.sh<br></code></pre></td></tr></table></figure></li></ol><h4 id="4-4-备份结果"><a href="#4-4-备份结果" class="headerlink" title="4.4 备份结果"></a>4.4 备份结果</h4><p>脚本运行后，会在指定的 <code>BACKUP_PATH</code> 中生成一个 <code>.sql</code> 文件，其中包含数据库的完整备份。</p><h2 id="第十二章-日志管理"><a href="#第十二章-日志管理" class="headerlink" title="第十二章 日志管理"></a>第十二章 日志管理</h2><p>Linux 系统有强大的日志管理系统，用于记录系统、服务、应用程序的运行情况。了解日志管理有助于排查问题、调试应用及监控系统状态。</p><hr><h3 id="1-日志文件概览"><a href="#1-日志文件概览" class="headerlink" title="1. 日志文件概览"></a>1. <strong>日志文件概览</strong></h3><p>在 Linux 系统中，日志文件主要位于 <code>/var/log</code> 目录下，不同的日志文件记录不同类型的系统信息。以下是一些常见的日志文件：</p><ul><li><code>/var/log/messages</code>：系统的通用日志文件，记录系统启动信息、驱动信息、用户登录等。</li><li><code>/var/log/syslog</code>：系统日志，记录系统级别的消息和调试信息（适用于 Debian 系）。</li><li><code>/var/log/dmesg</code>：内核环缓冲区消息，记录与硬件相关的信息，尤其是启动时的内核信息。</li><li><code>/var/log/auth.log</code>：认证日志，记录所有认证相关的信息，如登录、sudo 使用等（适用于 Debian 系）。</li><li><code>/var/log/secure</code>：同样是认证日志，适用于 RHEL 系统。</li><li><code>/var/log/wtmp</code> 和 <code>/var/log/btmp</code>：记录所有成功（<code>wtmp</code>）和失败（<code>btmp</code>）的登录尝试。</li><li><code>/var/log/cron</code>：记录与定时任务（Cron jobs）相关的日志。</li><li><code>/var/log/boot.log</code>：系统启动过程的日志。</li><li><code>/var/log/mail.log</code>：与邮件系统相关的日志（例如 Sendmail、Postfix）。</li><li><code>/var/log/httpd/</code>：Web 服务器（如 Apache、Nginx）的日志文件目录。</li></ul><hr><h3 id="2-常用日志管理指令"><a href="#2-常用日志管理指令" class="headerlink" title="2. 常用日志管理指令"></a>2. <strong>常用日志管理指令</strong></h3><h4 id="2-1-查看日志内容的常用命令"><a href="#2-1-查看日志内容的常用命令" class="headerlink" title="2.1 查看日志内容的常用命令"></a>2.1 查看日志内容的常用命令</h4><ul><li>**<code>cat</code>**：直接输出日志文件的全部内容。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/syslog<br></code></pre></td></tr></table></figure><ul><li>**<code>tail</code>**：查看日志文件的最后几行，常用于查看最近的日志更新。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> /var/log/messages<br><span class="hljs-built_in">tail</span> -n 100 /var/log/messages  <span class="hljs-comment"># 查看最后100行日志</span><br></code></pre></td></tr></table></figure><ul><li>**<code>tail -f</code>**：实时查看日志文件的更新，通常用于调试或监控。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /var/log/messages<br></code></pre></td></tr></table></figure><ul><li>**<code>less</code>**：按页查看大文件，支持滚动和查找功能，适合查看长日志。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">less /var/log/dmesg<br></code></pre></td></tr></table></figure><ul><li>**<code>grep</code>**：从日志文件中筛选出包含特定关键字的日志条目。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;error&quot;</span> /var/log/syslog  <span class="hljs-comment"># 查找包含 &quot;error&quot; 的日志</span><br></code></pre></td></tr></table></figure><ul><li>**<code>dmesg</code>**：查看内核环缓冲区中的消息，显示启动时和硬件相关的信息。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg | less  <span class="hljs-comment"># 分页查看内核日志</span><br></code></pre></td></tr></table></figure><ul><li>**<code>journalctl</code>**：查看 <code>systemd</code> 管理的日志，支持过滤、分页等功能。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl  <span class="hljs-comment"># 查看所有日志</span><br>journalctl -xe  <span class="hljs-comment"># 查看详细的错误日志</span><br>journalctl -u ssh  <span class="hljs-comment"># 查看与 ssh 服务相关的日志</span><br></code></pre></td></tr></table></figure><h4 id="2-2-日志文件管理命令"><a href="#2-2-日志文件管理命令" class="headerlink" title="2.2 日志文件管理命令"></a>2.2 日志文件管理命令</h4><ul><li>**<code>logrotate</code>**：日志轮换工具，用于自动管理日志文件，防止日志文件过大。它支持对日志文件进行压缩、删除和归档。</li></ul><p><strong>配置文件</strong>：</p><ul><li><code>/etc/logrotate.conf</code>：主配置文件，定义全局的日志轮换设置。</li><li><code>/etc/logrotate.d/</code>：包含每个服务的日志轮换配置。</li></ul><p><strong>示例配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/log/syslog &#123;<br>    daily          <span class="hljs-comment"># 每天轮换日志</span><br>    rotate 7       <span class="hljs-comment"># 保留7个旧日志文件</span><br>    compress       <span class="hljs-comment"># 压缩旧的日志文件</span><br>    missingok      <span class="hljs-comment"># 如果日志文件丢失不报错</span><br>    notifempty     <span class="hljs-comment"># 如果日志为空，则不轮换</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行日志轮换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">logrotate /etc/logrotate.conf  <span class="hljs-comment"># 手动执行日志轮换</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-系统日志管理工具"><a href="#3-系统日志管理工具" class="headerlink" title="3. 系统日志管理工具"></a>3. <strong>系统日志管理工具</strong></h3><h4 id="3-1-rsyslog"><a href="#3-1-rsyslog" class="headerlink" title="3.1 rsyslog"></a>3.1 <strong>rsyslog</strong></h4><ul><li><code>rsyslog</code> 是 Linux 系统上最常用的日志管理服务，用于收集、存储和转发系统日志。它是 <code>syslog</code> 的增强版本，能够通过网络传输日志，还支持日志过滤和日志格式化等高级功能。</li></ul><p><strong>配置文件</strong>：</p><ul><li><code>/etc/rsyslog.conf</code>：主配置文件，用于定义日志的记录规则。</li><li><code>/etc/rsyslog.d/</code>：存放额外的配置文件。</li></ul><p><strong>日志格式说明</strong>：<br><code>rsyslog</code> 的配置文件中使用 <code>&lt;facility&gt;.&lt;level&gt;</code> 的形式来指定日志的类型和级别。</p><ul><li><p><strong>facility（设备）</strong>：表示日志的来源（系统组件），例如：</p><ul><li><code>auth</code>：认证系统日志</li><li><code>cron</code>：定时任务日志</li><li><code>daemon</code>：后台服务日志</li><li><code>kern</code>：内核日志</li></ul></li><li><p><strong>level（级别）</strong>：表示日志的严重程度，级别从低到高包括：</p><ul><li><code>debug</code>：调试信息</li><li><code>info</code>：普通信息</li><li><code>notice</code>：正常但重要的信息</li><li><code>warning</code>：警告</li><li><code>err</code>：错误</li><li><code>crit</code>：严重错误</li><li><code>alert</code>：需要立即修复的问题</li><li><code>emerg</code>：系统不可用</li></ul></li></ul><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">authpriv.*                        /var/log/secure  <span class="hljs-comment"># 记录所有与认证相关的日志到 secure 文件</span><br>*.*                               /var/log/messages  <span class="hljs-comment"># 记录所有日志到 messages 文件</span><br></code></pre></td></tr></table></figure><p>启动和重启 <code>rsyslog</code> 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart rsyslog  <span class="hljs-comment"># 重启 rsyslog 服务</span><br></code></pre></td></tr></table></figure><h4 id="3-2-journalctl"><a href="#3-2-journalctl" class="headerlink" title="3.2 journalctl"></a>3.2 <strong>journalctl</strong></h4><ul><li><code>journalctl</code> 是 <code>systemd</code> 提供的日志管理工具，它能够查看由 <code>systemd</code> 管理的日志。<code>journalctl</code> 具有强大的过滤和格式化功能。</li></ul><p><strong>常用命令</strong>：</p><ul><li><p>查看系统日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl<br></code></pre></td></tr></table></figure></li><li><p>按时间范围查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl --since <span class="hljs-string">&quot;2024-10-20 10:00&quot;</span> --<span class="hljs-keyword">until</span> <span class="hljs-string">&quot;2024-10-20 12:00&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>查看某个服务的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl -u nginx<br></code></pre></td></tr></table></figure></li><li><p>查看系统启动日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl -b<br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="4-日志管理示例"><a href="#4-日志管理示例" class="headerlink" title="4. 日志管理示例"></a>4. <strong>日志管理示例</strong></h3><h4 id="4-1-通过-journalctl-查看-SSH-登录相关日志"><a href="#4-1-通过-journalctl-查看-SSH-登录相关日志" class="headerlink" title="4.1 通过 journalctl 查看 SSH 登录相关日志"></a>4.1 通过 <code>journalctl</code> 查看 SSH 登录相关日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">journalctl -u sshd  <span class="hljs-comment"># 查看 SSH 服务日志</span><br></code></pre></td></tr></table></figure><h4 id="4-2-通过-grep-筛选系统日志中的错误信息"><a href="#4-2-通过-grep-筛选系统日志中的错误信息" class="headerlink" title="4.2 通过 grep 筛选系统日志中的错误信息"></a>4.2 通过 <code>grep</code> 筛选系统日志中的错误信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;error&quot;</span> /var/log/syslog<br></code></pre></td></tr></table></figure><h4 id="4-3-使用-logrotate-进行日志轮换"><a href="#4-3-使用-logrotate-进行日志轮换" class="headerlink" title="4.3 使用 logrotate 进行日志轮换"></a>4.3 使用 <code>logrotate</code> 进行日志轮换</h4><p><strong>配置文件</strong>：<br>编辑 <code>/etc/logrotate.d/nginx</code>，设置 Nginx 的日志轮换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/log/nginx/*.<span class="hljs-built_in">log</span> &#123;<br>    daily           <span class="hljs-comment"># 每日轮换</span><br>    missingok       <span class="hljs-comment"># 如果日志文件丢失不报错</span><br>    rotate 14       <span class="hljs-comment"># 保存14天的日志</span><br>    compress        <span class="hljs-comment"># 压缩旧日志</span><br>    delaycompress   <span class="hljs-comment"># 推迟一天压缩</span><br>    notifempty      <span class="hljs-comment"># 如果日志为空，则不轮换</span><br>    create 640 nginx adm  <span class="hljs-comment"># 新日志文件的权限</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行日志轮换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> logrotate -f /etc/logrotate.conf  <span class="hljs-comment"># 强制执行日志轮换</span><br></code></pre></td></tr></table></figure><h4 id="4-4-查看内核消息日志"><a href="#4-4-查看内核消息日志" class="headerlink" title="4.4 查看内核消息日志"></a>4.4 查看内核消息日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dmesg | grep -i <span class="hljs-string">&quot;error&quot;</span>  <span class="hljs-comment"># 查看与内核相关的错误日志</span><br></code></pre></td></tr></table></figure><hr><h2 id="第十三章-备份与回复"><a href="#第十三章-备份与回复" class="headerlink" title="第十三章 备份与回复"></a>第十三章 备份与回复</h2><p>在 Linux 系统中，备份和恢复是至关重要的操作，尤其是对于保护数据、配置文件和整个系统。常见的备份和恢复工具有 <code>tar</code>、<code>rsync</code>、<code>dd</code> 等。以下是常用的备份与恢复指令及其使用细节，并结合示例进行说明。</p><hr><h3 id="1-常用的备份工具与指令"><a href="#1-常用的备份工具与指令" class="headerlink" title="1. 常用的备份工具与指令"></a>1. <strong>常用的备份工具与指令</strong></h3><h4 id="1-1-tar（归档与压缩工具）"><a href="#1-1-tar（归档与压缩工具）" class="headerlink" title="1.1 tar（归档与压缩工具）"></a>1.1 <strong><code>tar</code>（归档与压缩工具）</strong></h4><p><code>tar</code> 是 Linux 中常用的打包和备份工具，它不仅可以归档文件和目录，还可以进行压缩操作。使用 <code>tar</code> 命令可以创建 <code>.tar</code> 文件（只归档），或者 <code>.tar.gz</code>、<code>.tar.bz2</code> 文件（归档并压缩）。</p><p><strong>常用选项</strong>：</p><ul><li><code>-c</code>：创建新的归档文件</li><li><code>-x</code>：解压归档文件</li><li><code>-z</code>：通过 <code>gzip</code> 压缩或解压</li><li><code>-j</code>：通过 <code>bzip2</code> 压缩或解压</li><li><code>-v</code>：显示详细信息</li><li><code>-f</code>：指定归档文件名</li><li><code>-p</code>：保留文件权限</li></ul><p><strong>示例 1：备份目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个名为 backup.tar.gz 的归档压缩文件，包含 /home/user 目录</span><br>tar -czvf backup.tar.gz /home/user<br></code></pre></td></tr></table></figure><p><strong>示例 2：恢复备份</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压并恢复 backup.tar.gz 到当前目录</span><br>tar -xzvf backup.tar.gz<br></code></pre></td></tr></table></figure><h4 id="1-2-rsync（远程同步工具）"><a href="#1-2-rsync（远程同步工具）" class="headerlink" title="1.2 rsync（远程同步工具）"></a>1.2 <strong><code>rsync</code>（远程同步工具）</strong></h4><p><code>rsync</code> 是一个快速且功能强大的文件同步和备份工具，支持本地备份和远程备份。它可以仅传输变更的部分，并保持文件权限、时间戳等元数据。</p><p><strong>常用选项</strong>：</p><ul><li><code>-a</code>：归档模式，保留文件属性（递归、符号链接、权限等）</li><li><code>-v</code>：显示详细信息</li><li><code>-z</code>：在传输过程中压缩数据</li><li><code>-r</code>：递归传输目录及其子目录</li><li><code>--delete</code>：同步时删除目标目录中源中已删除的文件</li><li><code>--exclude</code>：排除某些文件或目录</li></ul><p><strong>示例 1：本地备份</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 /home/user 备份到 /backup 目录</span><br>rsync -av /home/user /backup<br></code></pre></td></tr></table></figure><p><strong>示例 2：远程备份</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 /home/user 目录备份到远程服务器</span><br>rsync -avz /home/user remote_user@remote_host:/remote/backup<br></code></pre></td></tr></table></figure><p><strong>示例 3：增量备份</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 同步时仅传输变更的文件</span><br>rsync -av --delete /home/user /backup<br></code></pre></td></tr></table></figure><h4 id="1-3-dd（磁盘克隆工具）"><a href="#1-3-dd（磁盘克隆工具）" class="headerlink" title="1.3 dd（磁盘克隆工具）"></a>1.3 <strong><code>dd</code>（磁盘克隆工具）</strong></h4><p><code>dd</code> 是用于低级别数据复制的工具，常用于备份和恢复整个硬盘或分区。它可以复制磁盘、分区，甚至是生成磁盘映像。</p><p><strong>常用选项</strong>：</p><ul><li><code>if</code>：输入文件（Input File），即源文件</li><li><code>of</code>：输出文件（Output File），即目标文件</li><li><code>bs</code>：块大小，定义读取和写入时的数据块大小</li><li><code>count</code>：指定读取的块数</li><li><code>status=progress</code>：显示进度条</li></ul><p><strong>示例 1：备份整个硬盘</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 /dev/sda 硬盘备份到 backup.img 文件中</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sda of=/backup/backup.img bs=4M status=progress<br></code></pre></td></tr></table></figure><p><strong>示例 2：恢复硬盘</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 backup.img 恢复到 /dev/sda 硬盘中</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/backup/backup.img of=/dev/sda bs=4M status=progress<br></code></pre></td></tr></table></figure><p><strong>示例 3：备份指定分区</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 备份 /dev/sda1 分区到分区备份文件</span><br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/sda1 of=/backup/sda1_backup.img bs=4M status=progress<br></code></pre></td></tr></table></figure><h4 id="1-4-scp（安全拷贝工具）"><a href="#1-4-scp（安全拷贝工具）" class="headerlink" title="1.4 scp（安全拷贝工具）"></a>1.4 <strong><code>scp</code>（安全拷贝工具）</strong></h4><p><code>scp</code> 是基于 SSH 协议的文件传输工具，可以用于安全地将文件从本地传输到远程服务器，或从远程服务器传输到本地。</p><p><strong>常用选项</strong>：</p><ul><li><code>-r</code>：递归复制整个目录</li><li><code>-v</code>：显示详细的复制过程</li><li><code>-P</code>：指定远程主机的 SSH 端口</li></ul><p><strong>示例 1：本地文件传输到远程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 backup.tar.gz 传输到远程服务器的 /backup 目录</span><br>scp backup.tar.gz remote_user@remote_host:/backup<br></code></pre></td></tr></table></figure><p><strong>示例 2：远程文件传输到本地</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将远程服务器上的 backup.tar.gz 文件传输到本地</span><br>scp remote_user@remote_host:/backup/backup.tar.gz .<br></code></pre></td></tr></table></figure><hr><h4 id="1-5-dump-工具"><a href="#1-5-dump-工具" class="headerlink" title="1.5 dump 工具"></a>1.5 <strong><code>dump</code> 工具</strong></h4><p><code>dump</code> 是一个用于备份文件系统的工具，它可以将文件系统的内容备份到指定的文件或设备中。它特别适用于对 Ext2、Ext3 和 Ext4 类型的文件系统进行备份，能够按需执行完整备份或增量备份。</p><p><strong>常用选项</strong></p><ul><li><code>-0</code> 到 <code>-9</code>：指定备份的级别。<code>0</code> 表示完整备份，<code>1-9</code> 表示增量备份。</li><li><code>-u</code>：更新 <code>/etc/dumpdates</code> 文件，记录备份时间。</li><li><code>-f</code>：指定备份文件名或目标设备（如磁带）。</li><li><code>-j</code>：使用 <code>bzip2</code> 进行压缩。</li><li><code>-z</code>：使用 <code>gzip</code> 进行压缩。</li><li><code>-v</code>：显示详细信息。</li></ul><p> <strong>示例</strong></p><p><strong>示例 1：完整备份文件系统</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 /dev/sda1 文件系统进行完整备份到 backup.dump 文件</span><br>dump -0uf /backup/backup.dump /dev/sda1<br></code></pre></td></tr></table></figure><p><strong>示例 2：增量备份文件系统</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 /dev/sda1 文件系统进行增量备份到 backup2.dump 文件</span><br>dump -1uf /backup/backup2.dump /dev/sda1<br></code></pre></td></tr></table></figure><p><strong>示例 3：使用 gzip 压缩备份</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 对 /dev/sda1 文件系统进行完整备份并使用 gzip 压缩</span><br>dump -0zvuf /backup/backup.dump.gz /dev/sda1<br></code></pre></td></tr></table></figure><p> <strong>备份级别</strong></p><p><code>dump</code> 的备份级别决定了备份的类型：</p><ul><li><strong>级别 0</strong>：完整备份，备份所有的数据。</li><li><strong>级别 1-9</strong>：增量备份，只备份自上次指定级别备份以来更改过的文件。备份级别越高，备份的数据越少。</li></ul><p>每次备份后，<code>dump</code> 会更新 <code>/etc/dumpdates</code> 文件，以记录上次备份的时间和备份级别。</p><hr><h4 id="1-6-restore-工具"><a href="#1-6-restore-工具" class="headerlink" title="1.6. restore 工具"></a>1.6. <strong><code>restore</code> 工具</strong></h4><p><code>restore</code> 是 <code>dump</code> 的配套工具，用于从 <code>dump</code> 创建的备份文件中恢复文件系统或文件。它可以还原整个文件系统、特定目录或单个文件，并支持交互式恢复。</p><p> <strong>常用选项</strong></p><ul><li><code>-r</code>：完全恢复文件系统。</li><li><code>-R</code>：增量恢复文件系统。</li><li><code>-t</code>：列出备份文件中的内容。</li><li><code>-i</code>：进入交互式模式，允许选择要恢复的文件或目录。</li><li><code>-f</code>：指定要从中恢复的备份文件。</li><li><code>-v</code>：显示详细信息。</li></ul><p><strong>示例</strong></p><p><strong>示例 1：完全恢复文件系统</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从 backup.dump 完全恢复 /dev/sda1 文件系统</span><br>restore -rf /backup/backup.dump<br></code></pre></td></tr></table></figure><p><strong>示例 2：列出备份文件的内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出 backup.dump 中的文件和目录</span><br>restore -tf /backup/backup.dump<br></code></pre></td></tr></table></figure><p><strong>示例 3：交互式恢复</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 交互式从 backup.dump 中选择要恢复的文件或目录</span><br>restore -<span class="hljs-keyword">if</span> /backup/backup.dump<br></code></pre></td></tr></table></figure><p>在交互式模式下，用户可以浏览备份文件的内容并选择特定文件或目录进行恢复。</p><p><strong>示例 4：增量恢复</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从增量备份 backup2.dump 中恢复</span><br>restore -rf /backup/backup2.dump<br></code></pre></td></tr></table></figure><p><strong>恢复特定文件或目录</strong></p><p>在交互式模式中，用户可以逐步浏览备份文件，并选择特定的文件或目录进行恢复。交互式命令包括：</p><ul><li><code>ls</code>：列出目录内容。</li><li><code>cd</code>：进入某个目录。</li><li><code>add</code>：选择恢复的文件或目录。</li><li><code>extract</code>：执行恢复操作。</li></ul><h3 id="2-文件系统备份与恢复"><a href="#2-文件系统备份与恢复" class="headerlink" title="2. 文件系统备份与恢复"></a>2. <strong>文件系统备份与恢复</strong></h3><h4 id="2-1-mount-和-umount"><a href="#2-1-mount-和-umount" class="headerlink" title="2.1 mount 和 umount"></a>2.1 <strong><code>mount</code> 和 <code>umount</code></strong></h4><p>对于文件系统的备份和恢复，通常会将某个分区或设备挂载到特定目录，然后使用工具（如 <code>rsync</code> 或 <code>tar</code>）备份该目录的内容。</p><p><strong>挂载设备示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将 /dev/sdb1 分区挂载到 /mnt 目录</span><br>mount /dev/sdb1 /mnt<br></code></pre></td></tr></table></figure><p><strong>卸载设备示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载 /mnt 目录</span><br>umount /mnt<br></code></pre></td></tr></table></figure><hr><h3 id="3-备份策略"><a href="#3-备份策略" class="headerlink" title="3. 备份策略"></a>3. <strong>备份策略</strong></h3><h4 id="3-1-完全备份"><a href="#3-1-完全备份" class="headerlink" title="3.1 完全备份"></a>3.1 完全备份</h4><ul><li>完全备份是指备份所有的数据和文件。虽然简单，但完全备份通常比较耗时且占用大量存储空间。</li></ul><p><strong>示例</strong>：<br>使用 <code>tar</code> 进行完整备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -czvf full_backup.tar.gz /home/user<br></code></pre></td></tr></table></figure><h4 id="3-2-增量备份"><a href="#3-2-增量备份" class="headerlink" title="3.2 增量备份"></a>3.2 增量备份</h4><ul><li>增量备份是指只备份自上次备份以来发生变更的数据。相比完全备份，增量备份占用的空间和时间较少，但恢复时需要结合多个备份。</li></ul><p><strong>示例</strong>：<br>使用 <code>rsync</code> 实现增量备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rsync -av --delete /home/user /backup/incremental<br></code></pre></td></tr></table></figure><h4 id="3-3-差异备份"><a href="#3-3-差异备份" class="headerlink" title="3.3 差异备份"></a>3.3 差异备份</h4><ul><li>差异备份是指自上次完全备份以来所有变化的数据。恢复时比增量备份快，但比增量备份占用的存储空间大。</li></ul><hr>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux(一)</title>
    <link href="/2024/10/21/linux/Linux1/"/>
    <url>/2024/10/21/linux/Linux1/</url>
    
    <content type="html"><![CDATA[<h1 id="linux操作系统基础"><a href="#linux操作系统基础" class="headerlink" title="linux操作系统基础"></a>linux操作系统基础</h1><h2 id="第一章-Linux目录结构"><a href="#第一章-Linux目录结构" class="headerlink" title="第一章 Linux目录结构"></a>第一章 Linux目录结构</h2><p>登录系统后，在当前命令窗口下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> / <br></code></pre></td></tr></table></figure><p>你会看到如下图所示:</p><p><img src="/../assets/Linux/image-20241021192304828.png" alt="image-20241021192304828"></p><p>树状目录结构：</p><p><img src="/../assets/Linux/image-20241021192323573.png" alt="image-20241021192323573"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix system resources(unix 系统资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>&#x2F;bin&#x2F;ls</strong> 目录下的。</p><p>值得提出的是 <strong>&#x2F;bin</strong>、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p><h2 id="第二章-Vi和VM编辑器"><a href="#第二章-Vi和VM编辑器" class="headerlink" title="第二章 Vi和VM编辑器"></a>第二章 Vi和VM编辑器</h2><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 — 入门到进阶</a></p><hr><h3 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h3><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="https://www.vim.org/">https://www.vim.org/</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><h3 id="vim-键盘图"><a href="#vim-键盘图" class="headerlink" title="vim 键盘图"></a>vim 键盘图</h3><p><img src="/../assets/Linux/image-20241021193033940.png" alt="image-20241021193033940"></p><hr><h3 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h3><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 <strong>i</strong>，并不会输入一个字符，<strong>i</strong> 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li><strong>i</strong> – 切换到输入模式，在光标当前位置开始输入文本。</li><li><strong>x</strong> – 删除当前光标所在处的字符。</li><li><strong>:</strong> – 切换到底线命令模式，以在最底一行输入命令。</li><li><strong>a</strong> – 进入插入模式，在光标下一个位置开始输入文本。</li><li><strong>o</strong>：在当前行的下方插入一个新行，并进入插入模式。</li><li><strong>O</strong> – 在当前行的上方插入一个新行，并进入插入模式。</li><li><strong>dd</strong> – 剪切当前行。</li><li><strong>yy</strong> – 复制当前行。</li><li><strong>p</strong>（小写） – 粘贴剪贴板内容到光标下方。</li><li><strong>P</strong>（大写）– 粘贴剪贴板内容到光标上方。</li><li><strong>u</strong> – 撤销上一次操作。</li><li><strong>Ctrl + r</strong> – 重做上一次撤销的操作。</li><li><strong>:w</strong> – 保存文件。</li><li><strong>:q</strong> – 退出 Vim 编辑器。</li><li><strong>:q!</strong> – 强制退出Vim 编辑器，不保存修改。</li></ul><p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 <strong>i</strong> 切换到输入模式即可。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><h4 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h4><p>在命令模式下按下 <strong>i</strong> 就进入了输入模式，使用 <strong>Esc</strong> 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h4 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h4><p>在命令模式下按下 **:**（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code>：保存文件。</li><li><code>:q</code>：退出 Vim 编辑器。</li><li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li><li><code>:q!</code>：强制退出Vim编辑器，不保存修改。</li></ul><p>按 <strong>ESC</strong> 键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="/../assets/Linux/image-20241021193105541.png" alt="image-20241021193105541"></p><h2 id="第三章-用户和用户组管理"><a href="#第三章-用户和用户组管理" class="headerlink" title="第三章 用户和用户组管理"></a>第三章 用户和用户组管理</h2><p>在Linux中，<strong>用户</strong>（User）和<strong>用户组</strong>（Group）是操作系统中用于管理权限和访问控制的两个重要概念。</p><h3 id="用户（User）"><a href="#用户（User）" class="headerlink" title="用户（User）"></a>用户（User）</h3><ul><li><strong>用户</strong>是一个能够登录到系统的个体，通常每个用户都有一个唯一的账号。</li><li>每个用户都有自己的文件、配置和权限。</li><li>在Linux中，用户的信息存储在<code>/etc/passwd</code>文件中，每个用户都关联一个唯一的用户ID（UID）。</li></ul><h3 id="用户组（Group）"><a href="#用户组（Group）" class="headerlink" title="用户组（Group）"></a>用户组（Group）</h3><ul><li><strong>用户组</strong>是一组用户的集合，用于集中管理权限。如果多个用户需要访问同一资源（如文件或目录），可以通过将这些用户添加到同一个用户组来实现。</li><li>每个用户组都有一个唯一的组ID（GID）。</li><li>用户组的信息存储在<code>/etc/group</code>文件中。</li></ul><p>每个用户都至少属于一个组，这个组被称为<strong>主组</strong>（Primary Group）。用户也可以属于多个其他的组，这些称为<strong>附加组</strong>（Supplementary Groups）。</p><h3 id="用户和用户组的常用管理指令"><a href="#用户和用户组的常用管理指令" class="headerlink" title="用户和用户组的常用管理指令"></a>用户和用户组的常用管理指令</h3><p>sudo 表示最高权限</p><ol><li><p><strong>添加用户</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">useradd [选项]  <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>useradd</code>用于创建新用户，并生成默认的主目录、用户组等，默认在家目录&#x2F;home&#x2F;用户名</p></li><li><p>例如：<code>sudo useradd alice</code></p><p>参数说明：</p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的登录名。</p></li></ul></li></ul></li><li><p><strong>删除用户</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">sudo userdel [选项] <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>userdel</code>用于删除用户。</li><li>如果要删除用户的主目录以及所有相关文件，可以使用<code>-r</code>选项：<code>sudo userdel -r alice</code></li></ul></li><li><p><strong>修改用户信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">sudo usermod [选项] <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>usermod</code>用于修改现有用户的属性。</p></li><li><p>例如，修改用户的主目录：<code>sudo usermod -d /new_home_directory alice</code></p></li><li><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：-l 新用户名</p></li></ul></li><li><p><strong>添加用户到组</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">sudo usermod -aG <span class="hljs-tag">&lt;<span class="hljs-name">组名</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>sudo usermod -aG sudo alice</code> 将用户<code>alice</code>添加到<code>sudo</code>组，使其具有超级用户权限。</li></ul></li><li><p>查询指定用户信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span> 用户名<br></code></pre></td></tr></table></figure></li><li><p><strong>创建用户组</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">groupadd [选项] <span class="hljs-tag">&lt;<span class="hljs-name">组名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>sudo groupadd developers</code></li><li>可以使用的选项有：<ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul></li></ul></li><li><p><strong>删除用户组</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">groupdel <span class="hljs-tag">&lt;<span class="hljs-name">组名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>sudo groupdel developers</code></li></ul></li><li><p><strong>查看用户所属组</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">groups <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>groups alice</code> 可以查看用户<code>alice</code>所属的所有组。</li></ul></li><li><p><strong>修改用户组的属性</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">groupmod</span> 选项 用户组<br></code></pre></td></tr></table></figure><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><p>实例1：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">groupmod</span> -g <span class="hljs-number">102</span> group2<br></code></pre></td></tr></table></figure><p>此命令将组group2的组标识号修改为102。</p><p>实例2：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">groupmod –g 10000 -n group3 group2<br></code></pre></td></tr></table></figure><p>此命令将组group2的标识号改为10000，组名修改为group3。</p></li><li><p><strong>修改用户密码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">sudo passwd <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>sudo passwd alice</code> 会为<code>alice</code>用户设置密码。</li></ul></li><li><p><strong>切换用户</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">su - <span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>例如：<code>su - alice</code> 切换到用户<code>alice</code>的身份，常用于临时切换到其他用户操作。</li></ul></li><li><p><strong>查看当前用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure></li><li><p><strong>列出所有用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure></li><li><p><strong>列出所有组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /etc/group<br></code></pre></td></tr></table></figure></li></ol><h3 id="一些常见的UID与GID范围"><a href="#一些常见的UID与GID范围" class="headerlink" title="一些常见的UID与GID范围"></a>一些常见的UID与GID范围</h3><ul><li>UID&#x2F;GID 0: 超级用户（<code>root</code>）</li><li>UID 1-99: 系统保留用户</li><li>UID&#x2F;GID 1000以上: 普通用户</li></ul><h2 id="第四章-Linux常用指令"><a href="#第四章-Linux常用指令" class="headerlink" title="第四章 Linux常用指令"></a>第四章 Linux常用指令</h2><h3 id="文件与目录操作"><a href="#文件与目录操作" class="headerlink" title="文件与目录操作"></a>文件与目录操作</h3><ol><li><p><strong>ls</strong>：列出目录内容</p><ul><li><strong>示例</strong>：<code>ls -alh</code> 显示所有文件和详细信息。</li></ul></li><li><p><strong>cd</strong>：切换目录</p><ul><li><strong>示例</strong>：<code>cd /home/user</code> 切换到指定目录。</li></ul></li><li><p><strong>cp</strong>：复制文件或目录</p><ul><li><strong>示例</strong>：<code>cp -r source_dir dest_dir</code> 递归复制目录。</li></ul></li><li><p><strong>mv</strong>：移动或重命名文件&#x2F;目录</p><ul><li><strong>示例</strong>：<code>mv oldname.txt newname.txt</code> 将文件重命名。</li></ul></li><li><p><strong>rm</strong>：删除文件或目录</p><ul><li><strong>示例</strong>：<code>rm -rf dir</code> 强制删除目录及其内容。</li></ul></li><li><p><strong>mkdir</strong>：创建目录</p><ul><li><strong>示例</strong>：<code>mkdir -p /path/to/newdir</code> 创建多级目录。</li></ul></li><li><p><strong>rmdir</strong>：删除空目录</p><ul><li><strong>示例</strong>：<code>rmdir emptydir</code> 删除空目录。</li></ul></li><li><p><strong>touch</strong>：创建空文件或更新文件的时间戳</p><ul><li><strong>示例</strong>：<code>touch newfile.txt</code> 创建新文件。</li></ul></li><li><p><strong>find</strong>：查找文件或目录</p><ul><li><strong>示例</strong>：<code>find /home -name &quot;*.txt&quot;</code> 查找指定类型的文件。</li></ul></li><li><p><strong>du</strong>：查看目录或文件的磁盘使用情况</p><ul><li><strong>示例</strong>：<code>du -sh /home</code> 显示指定目录的总大小。</li></ul></li><li><p><strong>df</strong>：查看磁盘分区使用情况</p><ul><li><strong>示例</strong>：<code>df -h</code> 显示所有分区的使用情况。</li></ul></li><li><p><strong>ln</strong>：创建链接</p><ul><li><strong>示例</strong>：<code>ln -s /path/to/file /path/to/link</code> 创建符号链接。</li></ul></li></ol><h3 id="文件压缩与解压缩"><a href="#文件压缩与解压缩" class="headerlink" title="文件压缩与解压缩"></a>文件压缩与解压缩</h3><ol start="13"><li><p><strong>tar</strong>：打包和解压缩文件</p><ul><li><strong>示例</strong>：<code>tar -czvf archive.tar.gz dir/</code> 压缩目录。</li></ul></li><li><p><strong>zip&#x2F;unzip</strong>：压缩和解压缩.zip文件</p><ul><li><strong>示例</strong>：<code>zip -r archive.zip dir/</code> 创建.zip压缩包。</li></ul></li></ol><h3 id="文件查看与文本处理"><a href="#文件查看与文本处理" class="headerlink" title="文件查看与文本处理"></a>文件查看与文本处理</h3><ol start="15"><li><p><strong>cat</strong>：显示文件内容</p><ul><li><strong>示例</strong>：<code>cat file.txt</code> 查看文件内容。</li></ul></li><li><p><strong>less</strong>：逐页查看文件内容</p><ul><li><strong>示例</strong>：<code>less file.txt</code> 分页查看文件。</li></ul></li><li><p><strong>head</strong>：查看文件的前几行</p><ul><li><strong>示例</strong>：<code>head -n 10 file.txt</code> 查看前10行。</li></ul></li><li><p><strong>tail</strong>：查看文件的末尾几行</p><ul><li><strong>示例</strong>：<code>tail -n 10 file.txt</code> 查看最后10行。</li></ul></li><li><p><strong>grep</strong>：文本搜索</p><ul><li><strong>示例</strong>：<code>grep &quot;text&quot; file.txt</code> 查找包含指定文本的行。</li></ul></li><li><p>**pipe |**：管道符，将一个命令的输出作为另一个命令的输入</p><ul><li><strong>示例</strong>：<code>cat file.txt | grep &quot;hello&quot;</code> 从文件中过滤文本。</li></ul></li></ol><h3 id="系统管理与监控"><a href="#系统管理与监控" class="headerlink" title="系统管理与监控"></a>系统管理与监控</h3><ol start="21"><li><p><strong>ps</strong>：查看进程状态</p><ul><li><strong>示例</strong>：<code>ps aux</code> 显示所有进程的信息。</li></ul></li><li><p><strong>top</strong>：实时显示系统进程</p><ul><li><strong>示例</strong>：<code>top</code> 显示当前运行的进程和系统资源使用情况。</li></ul></li><li><p><strong>kill</strong>：终止进程</p><ul><li><strong>示例</strong>：<code>kill -9 PID</code> 强制终止指定PID的进程。</li></ul></li><li><p><strong>free</strong>：查看内存使用情况</p><ul><li><strong>示例</strong>：<code>free -h</code> 显示内存使用情况。</li></ul></li></ol><h3 id="权限与用户管理"><a href="#权限与用户管理" class="headerlink" title="权限与用户管理"></a>权限与用户管理</h3><ol start="25"><li><p><strong>chmod</strong>：修改文件或目录权限</p><ul><li><strong>示例</strong>：<code>chmod 755 file.sh</code> 设置文件权限。</li></ul></li><li><p><strong>chown</strong>：修改文件或目录所有者</p><ul><li><strong>示例</strong>：<code>sudo chown user:group file.txt</code> 修改文件的所有者和组。</li></ul></li><li><p><strong>passwd</strong>：修改用户密码</p><ul><li><strong>示例</strong>：<code>passwd username</code> 修改指定用户的密码。</li></ul></li><li><p><strong>useradd</strong>：添加新用户</p><ul><li><strong>示例</strong>：<code>sudo useradd newuser</code> 添加新用户。</li></ul></li><li><p><strong>usermod</strong>：修改用户信息</p><ul><li><strong>示例</strong>：<code>sudo usermod -aG groupname username</code> 将用户添加到组中。</li></ul></li><li><p><strong>userdel</strong>：删除用户</p><ul><li><strong>示例</strong>：<code>sudo userdel username</code> 删除指定用户。</li></ul></li></ol><h3 id="日期与时间操作"><a href="#日期与时间操作" class="headerlink" title="日期与时间操作"></a>日期与时间操作</h3><ol start="31"><li><p><strong>date</strong>：显示或设置系统日期与时间</p><ul><li><strong>示例</strong>：<code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> 显示当前日期和时间。</li></ul></li><li><p><strong>cal</strong>：显示日历</p><ul><li><strong>示例</strong>：<code>cal 2024</code> 显示指定年份的日历。</li></ul></li></ol><h3 id="网络相关指令（可选）"><a href="#网络相关指令（可选）" class="headerlink" title="网络相关指令（可选）"></a>网络相关指令（可选）</h3><ol start="33"><li><p><strong>ping</strong>：测试网络连通性</p><ul><li><strong>示例</strong>：<code>ping google.com</code> 测试到 Google 的连接。</li></ul></li><li><p><strong>ifconfig&#x2F;ip</strong>：查看或配置网络接口</p><ul><li><strong>示例</strong>：<code>ifconfig</code> 或 <code>ip addr</code> 查看网络接口信息。</li></ul></li><li><p><strong>netstat</strong>：查看网络连接状态</p><ul><li><strong>示例</strong>：<code>netstat -tuln</code> 查看监听的端口。</li></ul></li></ol><h3 id="其他实用指令"><a href="#其他实用指令" class="headerlink" title="其他实用指令"></a>其他实用指令</h3><ol start="36"><li><p><strong>man</strong>：查看命令手册</p><ul><li><strong>示例</strong>：<code>man ls</code> 显示 <code>ls</code> 命令的使用说明。</li></ul></li><li><p><strong>history</strong>：查看命令历史</p><ul><li><strong>示例</strong>：<code>history</code> 显示执行过的命令记录。</li></ul></li><li><p><strong>clear</strong>：清屏</p><ul><li><strong>示例</strong>：<code>clear</code> 清除终端屏幕的内容。</li></ul></li><li><p><strong>echo</strong>：显示文本</p><ul><li><strong>示例</strong>：<code>echo &quot;Hello, World&quot;</code> 输出文本。</li></ul></li><li><p><strong>exit</strong>：退出终端或注销当前用户</p><ul><li><strong>示例</strong>：<code>exit</code> 退出当前会话。</li></ul></li></ol><p>这些指令覆盖了文件和目录操作、系统管理、用户和权限管理等多方面的功能，可以帮助用户更有效地使用Linux系统。</p><h2 id="第五章-Linux权限机制"><a href="#第五章-Linux权限机制" class="headerlink" title="第五章 Linux权限机制"></a>第五章 Linux权限机制</h2><p>在Linux中，权限机制是控制用户对文件和目录操作的一种重要机制。每个文件和目录都有三个主要的权限类型，分别是读取（Read）、写入（Write）和执行（Execute），这些权限可以由不同的用户群体（用户、组和其他用户）进行管理。</p><h4 id="1-权限类型"><a href="#1-权限类型" class="headerlink" title="1. 权限类型"></a>1. 权限类型</h4><ul><li><p><strong>读取权限（r）</strong>：</p><ul><li><strong>文件</strong>：允许查看文件内容。</li><li><strong>目录</strong>：允许列出目录中的文件。</li></ul></li><li><p><strong>写入权限（w）</strong>：</p><ul><li><strong>文件</strong>：允许修改文件内容。</li><li><strong>目录</strong>：允许在目录中添加、删除或重命名文件。</li></ul></li><li><p><strong>执行权限（x）</strong>：</p><ul><li><strong>文件</strong>：允许执行该文件（通常是脚本或程序）。</li><li><strong>目录</strong>：允许进入该目录。</li></ul></li></ul><h4 id="2-权限表示"><a href="#2-权限表示" class="headerlink" title="2. 权限表示"></a>2. 权限表示</h4><p>权限通过一串10个字符来表示，每个字符代表不同的含义：</p><ul><li><p><strong>第0位</strong>：文件类型</p><ul><li><code>-</code>：普通文件</li><li><code>d</code>：目录</li><li><code>l</code>：符号链接</li><li><code>c</code>：字符设备文件</li><li><code>b</code>：块设备文件</li></ul></li><li><p><strong>第1-3位</strong>：属主（User）权限</p><ul><li><code>r</code>：可读</li><li><code>w</code>：可写</li><li><code>x</code>：可执行</li></ul></li><li><p><strong>第4-6位</strong>：所属组（Group）权限</p><ul><li><code>r</code>：可读</li><li><code>w</code>：可写</li><li><code>x</code>：可执行</li></ul></li><li><p><strong>第7-9位</strong>：其他用户（Others）权限</p><ul><li><code>r</code>：可读</li><li><code>w</code>：可写</li><li><code>x</code>：可执行</li></ul></li></ul><p><strong>示例</strong>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">-rwxr-xr<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><ul><li>**<code>-</code>**：普通文件</li><li>**<code>rwx</code>**：属主拥有读、写和执行权限</li><li>**<code>r-x</code>**：所属组拥有读和执行权限</li><li>**<code>r--</code>**：其他用户只有读权限</li></ul><h4 id="3-权限管理命令"><a href="#3-权限管理命令" class="headerlink" title="3. 权限管理命令"></a>3. 权限管理命令</h4><ul><li><p><strong>查看权限</strong>：</p><ul><li>使用 <code>ls -l</code> 命令可以查看文件和目录的权限设置。</li><li>示例：<code>ls -l file.txt</code></li></ul></li><li><p><strong>修改权限</strong>：</p><ul><li>使用 <code>chmod</code> 命令来修改权限。</li><li><strong>符号模式</strong>：<ul><li><code>u</code>：用户（属主）</li><li><code>g</code>：组</li><li><code>o</code>：其他</li><li>示例：<code>chmod u+x file.sh</code> 为属主添加执行权限。</li></ul></li><li><strong>数字模式</strong>：<ul><li>权限用数字表示：读&#x3D;4，写&#x3D;2，执行&#x3D;1。</li><li>示例：<code>chmod 755 file.sh</code> 设置属主为读、写、执行权限，组和其他用户为读和执行权限。</li></ul></li></ul></li><li><p><strong>修改文件属主和组</strong>：</p><ul><li>使用 <code>chown</code> 命令。</li><li>示例：<code>sudo chown user:group file.txt</code> 修改文件属主和组。</li></ul></li></ul><h4 id="4-特殊权限"><a href="#4-特殊权限" class="headerlink" title="4. 特殊权限"></a>4. 特殊权限</h4><ul><li><p><strong>Setuid（s）</strong>：</p><ul><li>在可执行文件上设置，允许用户以文件属主的身份执行该文件。</li><li><strong>示例</strong>：<code>chmod u+s file</code> 设置 Setuid 权限。</li></ul></li><li><p><strong>Setgid（s）</strong>：</p><ul><li>在目录上设置，允许新创建的文件和子目录继承所属组。</li><li><strong>示例</strong>：<code>chmod g+s dir</code> 设置 Setgid 权限。</li></ul></li><li><p><strong>Sticky Bit（t）</strong>：</p><ul><li>在公共目录上设置，只有文件的属主可以删除或重命名文件。</li><li><strong>示例</strong>：<code>chmod +t dir</code> 设置 Sticky Bit 权限。</li></ul></li></ul><h4 id="5-继承权限"><a href="#5-继承权限" class="headerlink" title="5. 继承权限"></a>5. 继承权限</h4><ul><li>在创建文件时，默认权限会受到当前用户和组的影响。可以使用 umask 命令来设置默认权限掩码。</li></ul><p><strong>示例</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">umask</span> <span class="hljs-number">0022</span><br></code></pre></td></tr></table></figure><ul><li>在此示例中，默认创建的文件权限将是 <code>rw-r--r--</code>。</li></ul><p>在Linux中，文件和目录的权限由 <strong>rwx</strong>（读、写、执行）三个符号控制，这些符号的含义和作用因文件与目录的不同而有所区别。接下来我们分别介绍文件和目录中 <code>rwx</code> 权限的具体机制，并通过举例说明它们的功能。</p><hr><h3 id="文件权限机制"><a href="#文件权限机制" class="headerlink" title="文件权限机制"></a>文件权限机制</h3><p>文件的权限可以控制用户对该文件的操作，包括读取文件内容、修改文件、执行文件等。</p><h4 id="1-r（Read）-读权限"><a href="#1-r（Read）-读权限" class="headerlink" title="1. r（Read）- 读权限"></a>1. <strong>r（Read）- 读权限</strong></h4><ul><li><p><strong>含义</strong>：允许读取文件的内容。</p></li><li><p><strong>机制</strong>：如果用户对文件具有读权限，则可以查看文件的内容，通常通过 <code>cat</code>、<code>less</code>、<code>more</code> 等命令读取文件内容。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> /path/to/file.txt<br></code></pre></td></tr></table></figure><p> 如果当前用户对 <code>file.txt</code> 有读权限，则可以查看文件内容；否则将出现权限拒绝错误。</p></li></ul><h4 id="2-w（Write）-写权限"><a href="#2-w（Write）-写权限" class="headerlink" title="2. w（Write）- 写权限"></a>2. <strong>w（Write）- 写权限</strong></h4><ul><li><p><strong>含义</strong>：允许修改文件的内容。</p></li><li><p><strong>机制</strong>：如果用户对文件有写权限，可以编辑或修改文件的内容（例如用 <code>nano</code>、<code>vi</code> 等文本编辑器）。需要注意的是，拥有写权限不意味着用户可以删除文件，文件的删除权限与目录的写权限有关（后续解释）。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello&quot;</span> &gt;&gt; /path/to/file.txt<br></code></pre></td></tr></table></figure><p> 如果用户对 <code>file.txt</code> 有写权限，那么可以向文件追加内容。如果没有写权限，会提示权限不足。</p></li></ul><h4 id="3-x（Execute）-执行权限"><a href="#3-x（Execute）-执行权限" class="headerlink" title="3. x（Execute）- 执行权限"></a>3. <strong>x（Execute）- 执行权限</strong></h4><ul><li><p><strong>含义</strong>：允许执行该文件（通常是脚本或二进制可执行文件）。</p></li><li><p><strong>机制</strong>：执行权限主要用于可执行文件（如shell脚本、二进制程序）。当用户对文件有执行权限时，可以直接运行这个文件。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./script.sh<br></code></pre></td></tr></table></figure><p> 如果 <code>script.sh</code> 文件有执行权限，用户可以直接运行脚本。如果没有执行权限，即使有读权限，用户也只能读取脚本内容，无法执行。</p></li></ul><hr><h3 id="目录权限机制"><a href="#目录权限机制" class="headerlink" title="目录权限机制"></a>目录权限机制</h3><p>目录的 <code>rwx</code> 权限与文件有所不同，它决定了用户对该目录及其内容的访问、查看和修改操作。</p><h4 id="1-r（Read）-读权限-1"><a href="#1-r（Read）-读权限-1" class="headerlink" title="1. r（Read）- 读权限"></a>1. <strong>r（Read）- 读权限</strong></h4><ul><li><p><strong>含义</strong>：允许列出目录中的文件名（但不一定能读取文件内容）。</p></li><li><p><strong>机制</strong>：如果用户对目录有读权限，则可以列出该目录下的文件和子目录的名称，通常通过 <code>ls</code> 命令实现。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> /path/to/directory/<br></code></pre></td></tr></table></figure><p> 如果用户对该目录有读权限，可以看到目录中的文件和目录名；否则将显示“Permission denied”（权限不足）。</p></li></ul><h4 id="2-w（Write）-写权限-1"><a href="#2-w（Write）-写权限-1" class="headerlink" title="2. w（Write）- 写权限"></a>2. <strong>w（Write）- 写权限</strong></h4><ul><li><p><strong>含义</strong>：允许在目录中创建、删除和重命名文件或子目录。</p></li><li><p><strong>机制</strong>：写权限与目录中的内容管理有关。如果用户对目录有写权限，可以在目录中创建新文件、删除文件、修改文件名或子目录。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> /path/to/directory/newfile.txt  <span class="hljs-comment"># 创建新文件</span><br>$ <span class="hljs-built_in">rm</span> /path/to/directory/existingfile.txt  <span class="hljs-comment"># 删除文件</span><br></code></pre></td></tr></table></figure><p> 需要注意的是，删除一个文件并不取决于该文件的权限，而是取决于用户对文件所在目录的写权限。如果用户对目录有写权限，即使没有文件本身的写权限，也可以删除该文件。</p></li></ul><h4 id="3-x（Execute）-执行权限-1"><a href="#3-x（Execute）-执行权限-1" class="headerlink" title="3. x（Execute）- 执行权限"></a>3. <strong>x（Execute）- 执行权限</strong></h4><ul><li><p><strong>含义</strong>：允许用户进入该目录和访问其中的内容。</p></li><li><p><strong>机制</strong>：执行权限对于目录来说，允许用户“进入”该目录，即使用户对目录有读权限，只有同时具有执行权限才能使用 <code>cd</code> 进入该目录并访问文件。</p></li><li><p><strong>示例</strong>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /path/to/directory<br></code></pre></td></tr></table></figure><p> 如果用户对该目录有执行权限，可以进入目录并执行访问操作。如果没有执行权限，用户将无法进入目录，甚至无法访问目录中的任何文件，即使知道文件名。</p></li></ul><hr><h3 id="文件和目录权限的区别总结"><a href="#文件和目录权限的区别总结" class="headerlink" title="文件和目录权限的区别总结"></a>文件和目录权限的区别总结</h3><table><thead><tr><th>权限符</th><th><strong>文件</strong> 的作用</th><th><strong>目录</strong> 的作用</th></tr></thead><tbody><tr><td><strong>r</strong></td><td>允许读取文件内容。</td><td>允许列出目录中的文件和子目录名。</td></tr><tr><td><strong>w</strong></td><td>允许修改文件内容。</td><td>允许创建、删除和重命名目录中的文件和子目录。</td></tr><tr><td><strong>x</strong></td><td>允许执行文件（脚本或二进制可执行文件）。</td><td>允许进入目录并访问其中的内容。</td></tr></tbody></table><hr><h3 id="结合文件与目录权限的实战案例"><a href="#结合文件与目录权限的实战案例" class="headerlink" title="结合文件与目录权限的实战案例"></a>结合文件与目录权限的实战案例</h3><h4 id="案例-1：控制文件读取与执行"><a href="#案例-1：控制文件读取与执行" class="headerlink" title="案例 1：控制文件读取与执行"></a><strong>案例 1</strong>：控制文件读取与执行</h4><p>假设有一个目录 <code>/home/alice/</code>，其中有一个脚本文件 <code>run.sh</code>，你想让所有用户都能运行这个脚本，但不允许其他用户读取脚本内容。你可以使用以下权限设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chmod</span> 711 /home/alice/run.sh<br></code></pre></td></tr></table></figure><ul><li><strong>权限解读</strong>：<ul><li><code>7</code>：文件所有者 <code>alice</code> 可以读、写、执行这个文件。</li><li><code>1</code>：组内用户和其他用户只能执行文件，无法读取或修改文件内容。</li></ul></li></ul><p>通过这种设置，其他用户可以运行 <code>run.sh</code> 脚本，但无法查看其中的内容。</p><h4 id="案例-2：共享目录权限"><a href="#案例-2：共享目录权限" class="headerlink" title="案例 2：共享目录权限"></a><strong>案例 2</strong>：共享目录权限</h4><p>假设你在 <code>/shared/</code> 目录下设置了一个共享工作目录 <code>dev/</code>，团队成员可以自由创建、编辑和删除文件，但不允许非团队成员进入该目录。可以使用以下权限设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chmod</span> 770 /shared/dev<br></code></pre></td></tr></table></figure><ul><li><strong>权限解读</strong>：<ul><li><code>7</code>：目录所有者和组成员可以读取、写入和进入该目录（即完全权限）。</li><li><code>0</code>：其他用户没有任何权限，既不能进入目录，也不能查看其中的内容。</li></ul></li></ul><p>通过这种权限设置，非团队成员无法进入 <code>dev</code> 目录。</p><hr><h3 id="特殊情况：没有-x-权限的目录"><a href="#特殊情况：没有-x-权限的目录" class="headerlink" title="特殊情况：没有 x 权限的目录"></a>特殊情况：没有 <code>x</code> 权限的目录</h3><p>如果一个用户对某个目录有 <code>r</code> 权限但没有 <code>x</code> 权限，用户将可以列出目录中的文件名，但无法进入目录，也无法访问文件内容。举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> /restricted_dir<br><span class="hljs-built_in">ls</span>: cannot access <span class="hljs-string">&#x27;/restricted_dir&#x27;</span>: Permission denied<br></code></pre></td></tr></table></figure><p>即使用户有读权限，由于缺乏执行权限，用户无法查看目录内容或进入目录。</p><hr><h2 id="第六章-定时任务调度"><a href="#第六章-定时任务调度" class="headerlink" title="第六章 定时任务调度"></a>第六章 定时任务调度</h2><h4 id="1-cron"><a href="#1-cron" class="headerlink" title="1. cron"></a>1. cron</h4><p><code>cron</code> 是一种定期执行任务的调度程序，可以在特定的时间、日期或间隔运行指定的命令或脚本。用户可以通过编辑特定的文件来设置定时任务。</p><p>示例图</p><p><img src="E:\PersonalWebsite\source\assets\Linux\image-20241021214047294.png" alt="image-20241021214047294"></p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><p><strong>crontab 命令</strong>：用于管理 <code>cron</code> 任务。</p></li><li><p><strong>编辑用户的 crontab</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br></code></pre></td></tr></table></figure></li><li><p><strong>查看当前用户的 crontab</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -l<br></code></pre></td></tr></table></figure></li><li><p><strong>删除当前用户的 crontab</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -r<br></code></pre></td></tr></table></figure></li></ul><h5 id="crontab-文件格式"><a href="#crontab-文件格式" class="headerlink" title="crontab 文件格式"></a>crontab 文件格式</h5><p>每一行定义一个定时任务，格式如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>* * * * command_to_execute<br></code></pre></td></tr></table></figure><ul><li>第1位：分钟（0-59）</li><li>第2位：小时（0-23）</li><li>第3位：日（1-31）</li><li>第4位：月（1-12）</li><li>第5位：星期几（0-6，0表示星期天）</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ol><li><p>每天凌晨 2 点执行备份脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 2 * * * /path/to/backup.sh<br></code></pre></td></tr></table></figure></li><li><p>每小时执行一次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 * * * * /path/to/script.sh<br></code></pre></td></tr></table></figure></li><li><p>每周一上午 6 点执行更新命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 6 * * 1 /usr/bin/apt update<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-at"><a href="#2-at" class="headerlink" title="2. at"></a>2. at</h4><p><code>at</code> 是一种用于安排一次性任务的调度程序，适合于需要在特定时间点执行的命令，而不是周期性任务。</p><h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><ul><li><p><strong>使用 at 命令</strong>：调度一次性任务。</p></li><li><p><strong>调度任务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;command_to_execute&quot;</span> | at time<br></code></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：在明天的上午 9 点执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/path/to/script.sh&quot;</span> | at 09:00 tomorrow<br></code></pre></td></tr></table></figure></li><li><p><strong>查看待执行的 at 任务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">atq<br></code></pre></td></tr></table></figure></li><li><p><strong>取消任务</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">atrm job_number<br></code></pre></td></tr></table></figure></li></ul><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><ol><li><p>在今天晚上 11 点执行备份脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/path/to/backup.sh&quot;</span> | at 23:00<br></code></pre></td></tr></table></figure></li><li><p>在 10 分钟后执行清理操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/path/to/cleanup.sh&quot;</span> | at now + 10 minutes<br></code></pre></td></tr></table></figure></li></ol><h3 id="cron-与-at-的比较"><a href="#cron-与-at-的比较" class="headerlink" title="cron 与 at 的比较"></a>cron 与 at 的比较</h3><table><thead><tr><th>特性</th><th>cron</th><th>at</th></tr></thead><tbody><tr><td>用途</td><td>定期执行任务</td><td>一次性执行任务</td></tr><tr><td>适用场景</td><td>每天、每周、每月等定期任务</td><td>特定时间点的单次任务</td></tr><tr><td>管理方式</td><td>通过 crontab 文件配置</td><td>通过 at 命令直接调度</td></tr><tr><td>任务持久性</td><td>任务持久存在于 crontab 中</td><td>任务在执行后自动删除</td></tr><tr><td>灵活性</td><td>可以设置复杂的时间表达式</td><td>时间格式相对简单</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/21/hello-world/"/>
    <url>/2024/10/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
